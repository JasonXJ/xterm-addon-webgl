{"version":3,"file":"xterm-addon-webgl.js","mappings":"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","sources":["webpack://WebglAddon/webpack/universalModuleDefinition","webpack://WebglAddon/./src/GlyphRenderer.ts","webpack://WebglAddon/./src/RectangleRenderer.ts","webpack://WebglAddon/./src/RenderModel.ts","webpack://WebglAddon/./src/WebglRenderer.ts","webpack://WebglAddon/./src/WebglUtils.ts","webpack://WebglAddon/./src/atlas/CharAtlasCache.ts","webpack://WebglAddon/./src/atlas/CharAtlasUtils.ts","webpack://WebglAddon/./src/atlas/WebglCharAtlas.ts","webpack://WebglAddon/./src/renderLayer/BaseRenderLayer.ts","webpack://WebglAddon/./src/renderLayer/CursorRenderLayer.ts","webpack://WebglAddon/./src/renderLayer/LinkRenderLayer.ts","webpack://WebglAddon/../../src/browser/Lifecycle.ts","webpack://WebglAddon/../../src/browser/renderer/Constants.ts","webpack://WebglAddon/../../src/browser/renderer/CustomGlyphs.ts","webpack://WebglAddon/../../src/browser/renderer/DevicePixelObserver.ts","webpack://WebglAddon/../../src/browser/renderer/RendererUtils.ts","webpack://WebglAddon/../../src/common/Color.ts","webpack://WebglAddon/../../src/common/EventEmitter.ts","webpack://WebglAddon/../../src/common/Lifecycle.ts","webpack://WebglAddon/../../src/common/MultiKeyMap.ts","webpack://WebglAddon/../../src/common/Platform.ts","webpack://WebglAddon/../../src/common/TypedArrayUtils.ts","webpack://WebglAddon/../../src/common/buffer/AttributeData.ts","webpack://WebglAddon/../../src/common/buffer/CellData.ts","webpack://WebglAddon/../../src/common/buffer/Constants.ts","webpack://WebglAddon/../../src/common/input/TextDecoder.ts","webpack://WebglAddon/webpack/bootstrap","webpack://WebglAddon/./src/WebglAddon.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"WebglAddon\"] = factory();\n\telse\n\t\troot[\"WebglAddon\"] = factory();\n})(self, function() {\nreturn ","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { createProgram, PROJECTION_MATRIX, throwIfFalsy } from './WebglUtils';\nimport { WebglCharAtlas } from './atlas/WebglCharAtlas';\nimport { IWebGL2RenderingContext, IWebGLVertexArrayObject, IRenderModel, IRasterizedGlyph } from './Types';\nimport { fill } from 'common/TypedArrayUtils';\nimport { NULL_CELL_CODE } from 'common/buffer/Constants';\nimport { Terminal } from 'xterm';\nimport { IColorSet } from 'browser/Types';\nimport { IRenderDimensions } from 'browser/renderer/Types';\nimport { Disposable, toDisposable } from 'common/Lifecycle';\n\ninterface IVertices {\n  attributes: Float32Array;\n  /**\n   * These buffers are the ones used to bind to WebGL, the reason there are\n   * multiple is to allow double buffering to work as you cannot modify the\n   * buffer while it's being used by the GPU. Having multiple lets us start\n   * working on the next frame.\n   */\n  attributesBuffers: Float32Array[];\n  count: number;\n}\n\nconst enum VertexAttribLocations {\n  UNIT_QUAD = 0,\n  CELL_POSITION = 1,\n  OFFSET = 2,\n  SIZE = 3,\n  TEXCOORD = 4,\n  TEXSIZE = 5\n}\n\nconst vertexShaderSource = `#version 300 es\nlayout (location = ${VertexAttribLocations.UNIT_QUAD}) in vec2 a_unitquad;\nlayout (location = ${VertexAttribLocations.CELL_POSITION}) in vec2 a_cellpos;\nlayout (location = ${VertexAttribLocations.OFFSET}) in vec2 a_offset;\nlayout (location = ${VertexAttribLocations.SIZE}) in vec2 a_size;\nlayout (location = ${VertexAttribLocations.TEXCOORD}) in vec2 a_texcoord;\nlayout (location = ${VertexAttribLocations.TEXSIZE}) in vec2 a_texsize;\n\nuniform mat4 u_projection;\nuniform vec2 u_resolution;\n\nout vec2 v_texcoord;\n\nvoid main() {\n  vec2 zeroToOne = (a_offset / u_resolution) + a_cellpos + (a_unitquad * a_size);\n  gl_Position = u_projection * vec4(zeroToOne, 0.0, 1.0);\n  v_texcoord = a_texcoord + a_unitquad * a_texsize;\n}`;\n\nconst fragmentShaderSource = `#version 300 es\nprecision lowp float;\n\nin vec2 v_texcoord;\n\nuniform sampler2D u_texture;\n\nout vec4 outColor;\n\nvoid main() {\n  outColor = texture(u_texture, v_texcoord);\n}`;\n\nconst INDICES_PER_CELL = 10;\nconst BYTES_PER_CELL = INDICES_PER_CELL * Float32Array.BYTES_PER_ELEMENT;\nconst CELL_POSITION_INDICES = 2;\n\n/** Work variables to avoid garbage collection. */\nconst w: { i: number, glyph: IRasterizedGlyph | undefined, leftCellPadding: number, clippedPixels: number } = {\n  i: 0,\n  glyph: undefined,\n  leftCellPadding: 0,\n  clippedPixels: 0\n};\n\nexport class GlyphRenderer  extends Disposable {\n  private _atlas: WebglCharAtlas | undefined;\n\n  private _program: WebGLProgram;\n  private _vertexArrayObject: IWebGLVertexArrayObject;\n  private _projectionLocation: WebGLUniformLocation;\n  private _resolutionLocation: WebGLUniformLocation;\n  private _textureLocation: WebGLUniformLocation;\n  private _atlasTexture: WebGLTexture;\n  private _attributesBuffer: WebGLBuffer;\n  private _activeBuffer: number = 0;\n\n  private _vertices: IVertices = {\n    count: 0,\n    attributes: new Float32Array(0),\n    attributesBuffers: [\n      new Float32Array(0),\n      new Float32Array(0)\n    ]\n  };\n\n  constructor(\n    private _terminal: Terminal,\n    private _colors: IColorSet,\n    private _gl: IWebGL2RenderingContext,\n    private _dimensions: IRenderDimensions\n  ) {\n    super();\n\n    const gl = this._gl;\n    this._program = throwIfFalsy(createProgram(gl, vertexShaderSource, fragmentShaderSource));\n    this.register(toDisposable(() => gl.deleteProgram(this._program)));\n\n    // Uniform locations\n    this._projectionLocation = throwIfFalsy(gl.getUniformLocation(this._program, 'u_projection'));\n    this._resolutionLocation = throwIfFalsy(gl.getUniformLocation(this._program, 'u_resolution'));\n    this._textureLocation = throwIfFalsy(gl.getUniformLocation(this._program, 'u_texture'));\n\n    // Create and set the vertex array object\n    this._vertexArrayObject = gl.createVertexArray();\n    gl.bindVertexArray(this._vertexArrayObject);\n\n    // Setup a_unitquad, this defines the 4 vertices of a rectangle\n    const unitQuadVertices = new Float32Array([0, 0, 1, 0, 0, 1, 1, 1]);\n    const unitQuadVerticesBuffer = gl.createBuffer();\n    this.register(toDisposable(() => gl.deleteBuffer(unitQuadVerticesBuffer)));\n    gl.bindBuffer(gl.ARRAY_BUFFER, unitQuadVerticesBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, unitQuadVertices, gl.STATIC_DRAW);\n    gl.enableVertexAttribArray(VertexAttribLocations.UNIT_QUAD);\n    gl.vertexAttribPointer(VertexAttribLocations.UNIT_QUAD, 2, this._gl.FLOAT, false, 0, 0);\n\n    // Setup the unit quad element array buffer, this points to indices in\n    // unitQuadVertices to allow is to draw 2 triangles from the vertices\n    const unitQuadElementIndices = new Uint8Array([0, 1, 3, 0, 2, 3]);\n    const elementIndicesBuffer = gl.createBuffer();\n    this.register(toDisposable(() => gl.deleteBuffer(elementIndicesBuffer)));\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, elementIndicesBuffer);\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, unitQuadElementIndices, gl.STATIC_DRAW);\n\n    // Setup attributes\n    this._attributesBuffer = throwIfFalsy(gl.createBuffer());\n    this.register(toDisposable(() => gl.deleteBuffer(this._attributesBuffer)));\n    gl.bindBuffer(gl.ARRAY_BUFFER, this._attributesBuffer);\n    gl.enableVertexAttribArray(VertexAttribLocations.OFFSET);\n    gl.vertexAttribPointer(VertexAttribLocations.OFFSET, 2, gl.FLOAT, false, BYTES_PER_CELL, 0);\n    gl.vertexAttribDivisor(VertexAttribLocations.OFFSET, 1);\n    gl.enableVertexAttribArray(VertexAttribLocations.SIZE);\n    gl.vertexAttribPointer(VertexAttribLocations.SIZE, 2, gl.FLOAT, false, BYTES_PER_CELL, 2 * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribDivisor(VertexAttribLocations.SIZE, 1);\n    gl.enableVertexAttribArray(VertexAttribLocations.TEXCOORD);\n    gl.vertexAttribPointer(VertexAttribLocations.TEXCOORD, 2, gl.FLOAT, false, BYTES_PER_CELL, 4 * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribDivisor(VertexAttribLocations.TEXCOORD, 1);\n    gl.enableVertexAttribArray(VertexAttribLocations.TEXSIZE);\n    gl.vertexAttribPointer(VertexAttribLocations.TEXSIZE, 2, gl.FLOAT, false, BYTES_PER_CELL, 6 * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribDivisor(VertexAttribLocations.TEXSIZE, 1);\n    gl.enableVertexAttribArray(VertexAttribLocations.CELL_POSITION);\n    gl.vertexAttribPointer(VertexAttribLocations.CELL_POSITION, 2, gl.FLOAT, false, BYTES_PER_CELL, 8 * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribDivisor(VertexAttribLocations.CELL_POSITION, 1);\n\n    // Setup empty texture atlas\n    this._atlasTexture = throwIfFalsy(gl.createTexture());\n    this.register(toDisposable(() => gl.deleteTexture(this._atlasTexture)));\n    gl.bindTexture(gl.TEXTURE_2D, this._atlasTexture);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array([0, 0, 255, 255]));\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n    // Allow drawing of transparent texture\n    gl.enable(gl.BLEND);\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n\n    // Set viewport\n    this.onResize();\n  }\n\n  public beginFrame(): boolean {\n    return this._atlas ? this._atlas.beginFrame() : true;\n  }\n\n  public updateCell(x: number, y: number, code: number, bg: number, fg: number, ext: number, chars: string, lastBg: number): void {\n    // Since this function is called for every cell (`rows*cols`), it must be very optimized. It\n    // should not instantiate any variables unless a new glyph is drawn to the cache where the\n    // slight slowdown is acceptable for the developer ergonomics provided as it's a once of for\n    // each glyph.\n    this._updateCell(this._vertices.attributes, x, y, code, bg, fg, ext, chars, lastBg);\n  }\n\n  private _updateCell(array: Float32Array, x: number, y: number, code: number | undefined, bg: number, fg: number, ext: number, chars: string, lastBg: number): void {\n    w.i = (y * this._terminal.cols + x) * INDICES_PER_CELL;\n\n    // Exit early if this is a null character, allow space character to continue as it may have\n    // underline/strikethrough styles\n    if (code === NULL_CELL_CODE || code === undefined/* This is used for the right side of wide chars */) {\n      fill(array, 0, w.i, w.i + INDICES_PER_CELL - 1 - CELL_POSITION_INDICES);\n      return;\n    }\n\n    if (!this._atlas) {\n      return;\n    }\n\n    // Get the glyph\n    if (chars && chars.length > 1) {\n      w.glyph = this._atlas.getRasterizedGlyphCombinedChar(chars, bg, fg, ext);\n    } else {\n      w.glyph = this._atlas.getRasterizedGlyph(code, bg, fg, ext);\n    }\n\n    w.leftCellPadding = Math.floor((this._dimensions.scaledCellWidth - this._dimensions.scaledCharWidth) / 2);\n    if (bg !== lastBg && w.glyph.offset.x > w.leftCellPadding) {\n      w.clippedPixels = w.glyph.offset.x - w.leftCellPadding;\n      // a_origin\n      array[w.i    ] = -(w.glyph.offset.x - w.clippedPixels) + this._dimensions.scaledCharLeft;\n      array[w.i + 1] = -w.glyph.offset.y + this._dimensions.scaledCharTop;\n      // a_size\n      array[w.i + 2] = (w.glyph.size.x - w.clippedPixels) / this._dimensions.scaledCanvasWidth;\n      array[w.i + 3] = w.glyph.size.y / this._dimensions.scaledCanvasHeight;\n      // a_texcoord\n      array[w.i + 4] = w.glyph.texturePositionClipSpace.x + w.clippedPixels / this._atlas.cacheCanvas.width;\n      array[w.i + 5] = w.glyph.texturePositionClipSpace.y;\n      // a_texsize\n      array[w.i + 6] = w.glyph.sizeClipSpace.x - w.clippedPixels / this._atlas.cacheCanvas.width;\n      array[w.i + 7] = w.glyph.sizeClipSpace.y;\n    } else {\n      // a_origin\n      array[w.i    ] = -w.glyph.offset.x + this._dimensions.scaledCharLeft;\n      array[w.i + 1] = -w.glyph.offset.y + this._dimensions.scaledCharTop;\n      // a_size\n      array[w.i + 2] = w.glyph.size.x / this._dimensions.scaledCanvasWidth;\n      array[w.i + 3] = w.glyph.size.y / this._dimensions.scaledCanvasHeight;\n      // a_texcoord\n      array[w.i + 4] = w.glyph.texturePositionClipSpace.x;\n      array[w.i + 5] = w.glyph.texturePositionClipSpace.y;\n      // a_texsize\n      array[w.i + 6] = w.glyph.sizeClipSpace.x;\n      array[w.i + 7] = w.glyph.sizeClipSpace.y;\n    }\n    // a_cellpos only changes on resize\n  }\n\n  public clear(force?: boolean): void {\n    const terminal = this._terminal;\n    const newCount = terminal.cols * terminal.rows * INDICES_PER_CELL;\n\n    // Don't clear if not forced and the array length is correct\n    if (!force && this._vertices.count === newCount) {\n      return;\n    }\n\n    // Clear vertices\n    this._vertices.count = newCount;\n    this._vertices.attributes = new Float32Array(newCount);\n    for (let i = 0; i < this._vertices.attributesBuffers.length; i++) {\n      this._vertices.attributesBuffers[i] = new Float32Array(newCount);\n    }\n    let i = 0;\n    for (let y = 0; y < terminal.rows; y++) {\n      for (let x = 0; x < terminal.cols; x++) {\n        this._vertices.attributes[i + 8] = x / terminal.cols;\n        this._vertices.attributes[i + 9] = y / terminal.rows;\n        i += INDICES_PER_CELL;\n      }\n    }\n  }\n\n  public onResize(): void {\n    const gl = this._gl;\n    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n    this.clear();\n  }\n\n  public setColors(): void {\n  }\n\n  public render(renderModel: IRenderModel): void {\n    if (!this._atlas) {\n      return;\n    }\n\n    const gl = this._gl;\n\n    gl.useProgram(this._program);\n    gl.bindVertexArray(this._vertexArrayObject);\n\n    // Alternate buffers each frame as the active buffer gets locked while it's in use by the GPU\n    this._activeBuffer = (this._activeBuffer + 1) % 2;\n    const activeBuffer = this._vertices.attributesBuffers[this._activeBuffer];\n\n    // Copy data for each cell of each line up to its line length (the last non-whitespace cell)\n    // from the attributes buffer into activeBuffer, which is the one that gets bound to the GPU.\n    // The reasons for this are as follows:\n    // - So the active buffer can be alternated so we don't get blocked on rendering finishing\n    // - To copy either the normal attributes buffer or the selection attributes buffer when there\n    //   is a selection\n    // - So we don't send vertices for all the line-ending whitespace to the GPU\n    let bufferLength = 0;\n    for (let y = 0; y < renderModel.lineLengths.length; y++) {\n      const si = y * this._terminal.cols * INDICES_PER_CELL;\n      const sub = this._vertices.attributes.subarray(si, si + renderModel.lineLengths[y] * INDICES_PER_CELL);\n      activeBuffer.set(sub, bufferLength);\n      bufferLength += sub.length;\n    }\n\n    // Bind the attributes buffer\n    gl.bindBuffer(gl.ARRAY_BUFFER, this._attributesBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, activeBuffer.subarray(0, bufferLength), gl.STREAM_DRAW);\n\n    // Bind the texture atlas if it's changed\n    if (this._atlas.hasCanvasChanged) {\n      this._atlas.hasCanvasChanged = false;\n      gl.uniform1i(this._textureLocation, 0);\n      gl.activeTexture(gl.TEXTURE0 + 0);\n      gl.bindTexture(gl.TEXTURE_2D, this._atlasTexture);\n      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, this._atlas.cacheCanvas);\n      gl.generateMipmap(gl.TEXTURE_2D);\n    }\n\n    // Set uniforms\n    gl.uniformMatrix4fv(this._projectionLocation, false, PROJECTION_MATRIX);\n    gl.uniform2f(this._resolutionLocation, gl.canvas.width, gl.canvas.height);\n\n    // Draw the viewport\n    gl.drawElementsInstanced(gl.TRIANGLES, 6, gl.UNSIGNED_BYTE, 0, bufferLength / INDICES_PER_CELL);\n  }\n\n  public setAtlas(atlas: WebglCharAtlas): void {\n    const gl = this._gl;\n    this._atlas = atlas;\n\n    gl.bindTexture(gl.TEXTURE_2D, this._atlasTexture);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, atlas.cacheCanvas);\n    gl.generateMipmap(gl.TEXTURE_2D);\n  }\n\n  public setDimensions(dimensions: IRenderDimensions): void {\n    this._dimensions = dimensions;\n  }\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { createProgram, expandFloat32Array, PROJECTION_MATRIX, throwIfFalsy } from './WebglUtils';\nimport { IRenderModel, IWebGLVertexArrayObject, IWebGL2RenderingContext } from './Types';\nimport { Attributes, BgFlags, FgFlags } from 'common/buffer/Constants';\nimport { Terminal } from 'xterm';\nimport { IColor } from 'common/Types';\nimport { IColorSet } from 'browser/Types';\nimport { IRenderDimensions } from 'browser/renderer/Types';\nimport { RENDER_MODEL_BG_OFFSET, RENDER_MODEL_FG_OFFSET, RENDER_MODEL_INDICIES_PER_CELL } from './RenderModel';\nimport { Disposable, toDisposable } from 'common/Lifecycle';\nimport { DIM_OPACITY } from 'browser/renderer/Constants';\n\nconst enum VertexAttribLocations {\n  POSITION = 0,\n  SIZE = 1,\n  COLOR = 2,\n  UNIT_QUAD = 3\n}\n\nconst vertexShaderSource = `#version 300 es\nlayout (location = ${VertexAttribLocations.POSITION}) in vec2 a_position;\nlayout (location = ${VertexAttribLocations.SIZE}) in vec2 a_size;\nlayout (location = ${VertexAttribLocations.COLOR}) in vec4 a_color;\nlayout (location = ${VertexAttribLocations.UNIT_QUAD}) in vec2 a_unitquad;\n\nuniform mat4 u_projection;\n\nout vec4 v_color;\n\nvoid main() {\n  vec2 zeroToOne = a_position + (a_unitquad * a_size);\n  gl_Position = u_projection * vec4(zeroToOne, 0.0, 1.0);\n  v_color = a_color;\n}`;\n\nconst fragmentShaderSource = `#version 300 es\nprecision lowp float;\n\nin vec4 v_color;\n\nout vec4 outColor;\n\nvoid main() {\n  outColor = v_color;\n}`;\n\ninterface IVertices {\n  attributes: Float32Array;\n  count: number;\n}\n\nconst INDICES_PER_RECTANGLE = 8;\nconst BYTES_PER_RECTANGLE = INDICES_PER_RECTANGLE * Float32Array.BYTES_PER_ELEMENT;\n\nconst INITIAL_BUFFER_RECTANGLE_CAPACITY = 20 * INDICES_PER_RECTANGLE;\n\n/** Work variables to avoid garbage collection. */\nconst w: { rgba: number, isDefault: boolean, x1: number, y1: number, r: number, g: number, b: number, a: number } = {\n  rgba: 0,\n  isDefault: false,\n  x1: 0,\n  y1: 0,\n  r: 0,\n  g: 0,\n  b: 0,\n  a: 0\n};\n\nexport class RectangleRenderer extends Disposable {\n\n  private _program: WebGLProgram;\n  private _vertexArrayObject: IWebGLVertexArrayObject;\n  private _attributesBuffer: WebGLBuffer;\n  private _projectionLocation: WebGLUniformLocation;\n  private _bgFloat!: Float32Array;\n\n  private _vertices: IVertices = {\n    count: 0,\n    attributes: new Float32Array(INITIAL_BUFFER_RECTANGLE_CAPACITY)\n  };\n\n  constructor(\n    private _terminal: Terminal,\n    private _colors: IColorSet,\n    private _gl: IWebGL2RenderingContext,\n    private _dimensions: IRenderDimensions\n  ) {\n    super();\n\n    const gl = this._gl;\n\n    this._program = throwIfFalsy(createProgram(gl, vertexShaderSource, fragmentShaderSource));\n    this.register(toDisposable(() => gl.deleteProgram(this._program)));\n\n    // Uniform locations\n    this._projectionLocation = throwIfFalsy(gl.getUniformLocation(this._program, 'u_projection'));\n\n    // Create and set the vertex array object\n    this._vertexArrayObject = gl.createVertexArray();\n    gl.bindVertexArray(this._vertexArrayObject);\n\n    // Setup a_unitquad, this defines the 4 vertices of a rectangle\n    const unitQuadVertices = new Float32Array([0, 0, 1, 0, 0, 1, 1, 1]);\n    const unitQuadVerticesBuffer = gl.createBuffer();\n    this.register(toDisposable(() => gl.deleteBuffer(unitQuadVerticesBuffer)));\n    gl.bindBuffer(gl.ARRAY_BUFFER, unitQuadVerticesBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, unitQuadVertices, gl.STATIC_DRAW);\n    gl.enableVertexAttribArray(VertexAttribLocations.UNIT_QUAD);\n    gl.vertexAttribPointer(VertexAttribLocations.UNIT_QUAD, 2, this._gl.FLOAT, false, 0, 0);\n\n    // Setup the unit quad element array buffer, this points to indices in\n    // unitQuadVertices to allow is to draw 2 triangles from the vertices\n    const unitQuadElementIndices = new Uint8Array([0, 1, 3, 0, 2, 3]);\n    const elementIndicesBuffer = gl.createBuffer();\n    this.register(toDisposable(() => gl.deleteBuffer(elementIndicesBuffer)));\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, elementIndicesBuffer);\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, unitQuadElementIndices, gl.STATIC_DRAW);\n\n    // Setup attributes\n    this._attributesBuffer = throwIfFalsy(gl.createBuffer());\n    this.register(toDisposable(() => gl.deleteBuffer(this._attributesBuffer)));\n    gl.bindBuffer(gl.ARRAY_BUFFER, this._attributesBuffer);\n    gl.enableVertexAttribArray(VertexAttribLocations.POSITION);\n    gl.vertexAttribPointer(VertexAttribLocations.POSITION, 2, gl.FLOAT, false, BYTES_PER_RECTANGLE, 0);\n    gl.vertexAttribDivisor(VertexAttribLocations.POSITION, 1);\n    gl.enableVertexAttribArray(VertexAttribLocations.SIZE);\n    gl.vertexAttribPointer(VertexAttribLocations.SIZE, 2, gl.FLOAT, false, BYTES_PER_RECTANGLE, 2 * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribDivisor(VertexAttribLocations.SIZE, 1);\n    gl.enableVertexAttribArray(VertexAttribLocations.COLOR);\n    gl.vertexAttribPointer(VertexAttribLocations.COLOR, 4, gl.FLOAT, false, BYTES_PER_RECTANGLE, 4 * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribDivisor(VertexAttribLocations.COLOR, 1);\n\n    this._updateCachedColors();\n  }\n\n  public render(): void {\n    const gl = this._gl;\n\n    gl.useProgram(this._program);\n\n    gl.bindVertexArray(this._vertexArrayObject);\n\n    gl.uniformMatrix4fv(this._projectionLocation, false, PROJECTION_MATRIX);\n\n    // Bind attributes buffer and draw\n    gl.bindBuffer(gl.ARRAY_BUFFER, this._attributesBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, this._vertices.attributes, gl.DYNAMIC_DRAW);\n    gl.drawElementsInstanced(this._gl.TRIANGLES, 6, gl.UNSIGNED_BYTE, 0, this._vertices.count);\n  }\n\n  public onResize(): void {\n    this._updateViewportRectangle();\n  }\n\n  public setColors(): void {\n    this._updateCachedColors();\n    this._updateViewportRectangle();\n  }\n\n  public setDimensions(dimensions: IRenderDimensions): void {\n    this._dimensions = dimensions;\n  }\n\n  private _updateCachedColors(): void {\n    this._bgFloat = this._colorToFloat32Array(this._colors.background);\n  }\n\n  private _updateViewportRectangle(): void {\n    // Set first rectangle that clears the screen\n    this._addRectangleFloat(\n      this._vertices.attributes,\n      0,\n      0,\n      0,\n      this._terminal.cols * this._dimensions.scaledCellWidth,\n      this._terminal.rows * this._dimensions.scaledCellHeight,\n      this._bgFloat\n    );\n  }\n\n  public updateBackgrounds(model: IRenderModel): void {\n    const terminal = this._terminal;\n    const vertices = this._vertices;\n\n    // Declare variable ahead of time to avoid garbage collection\n    let rectangleCount = 1;\n    let y: number;\n    let x: number;\n    let currentStartX: number;\n    let currentBg: number;\n    let currentFg: number;\n    let currentInverse: boolean;\n    let modelIndex: number;\n    let bg: number;\n    let fg: number;\n    let inverse: boolean;\n    let offset: number;\n\n    for (y = 0; y < terminal.rows; y++) {\n      currentStartX = -1;\n      currentBg = 0;\n      currentFg = 0;\n      currentInverse = false;\n      for (x = 0; x < terminal.cols; x++) {\n        modelIndex = ((y * terminal.cols) + x) * RENDER_MODEL_INDICIES_PER_CELL;\n        bg = model.cells[modelIndex + RENDER_MODEL_BG_OFFSET];\n        fg = model.cells[modelIndex + RENDER_MODEL_FG_OFFSET];\n        inverse = !!(fg & FgFlags.INVERSE);\n        if (bg !== currentBg || (fg !== currentFg && (currentInverse || inverse))) {\n          // A rectangle needs to be drawn if going from non-default to another color\n          if (currentBg !== 0 || (currentInverse && currentFg !== 0)) {\n            offset = rectangleCount++ * INDICES_PER_RECTANGLE;\n            this._updateRectangle(vertices, offset, currentFg, currentBg, currentStartX, x, y);\n          }\n          currentStartX = x;\n          currentBg = bg;\n          currentFg = fg;\n          currentInverse = inverse;\n        }\n      }\n      // Finish rectangle if it's still going\n      if (currentBg !== 0 || (currentInverse && currentFg !== 0)) {\n        offset = rectangleCount++ * INDICES_PER_RECTANGLE;\n        this._updateRectangle(vertices, offset, currentFg, currentBg, currentStartX, terminal.cols, y);\n      }\n    }\n    vertices.count = rectangleCount;\n  }\n\n  private _updateRectangle(vertices: IVertices, offset: number, fg: number, bg: number, startX: number, endX: number, y: number): void {\n    w.isDefault = false;\n    if (fg & FgFlags.INVERSE) {\n      switch (fg & Attributes.CM_MASK) {\n        case Attributes.CM_P16:\n        case Attributes.CM_P256:\n          w.rgba = this._colors.ansi[fg & Attributes.PCOLOR_MASK].rgba;\n          break;\n        case Attributes.CM_RGB:\n          w.rgba = (fg & Attributes.RGB_MASK) << 8;\n          break;\n        case Attributes.CM_DEFAULT:\n        default:\n          w.rgba = this._colors.foreground.rgba;\n      }\n    } else {\n      switch (bg & Attributes.CM_MASK) {\n        case Attributes.CM_P16:\n        case Attributes.CM_P256:\n          w.rgba = this._colors.ansi[bg & Attributes.PCOLOR_MASK].rgba;\n          break;\n        case Attributes.CM_RGB:\n          w.rgba = (bg & Attributes.RGB_MASK) << 8;\n          break;\n        case Attributes.CM_DEFAULT:\n        default:\n          w.rgba = this._colors.background.rgba;\n          w.isDefault = true;\n      }\n    }\n\n    if (vertices.attributes.length < offset + 4) {\n      vertices.attributes = expandFloat32Array(vertices.attributes, this._terminal.rows * this._terminal.cols * INDICES_PER_RECTANGLE);\n    }\n    w.x1 = startX * this._dimensions.scaledCellWidth;\n    w.y1 = y * this._dimensions.scaledCellHeight;\n    w.r = ((w.rgba >> 24) & 0xFF) / 255;\n    w.g = ((w.rgba >> 16) & 0xFF) / 255;\n    w.b = ((w.rgba >> 8 ) & 0xFF) / 255;\n    w.a = (!w.isDefault && bg & BgFlags.DIM) ? DIM_OPACITY : 1;\n\n    this._addRectangle(vertices.attributes, offset, w.x1, w.y1, (endX - startX) * this._dimensions.scaledCellWidth, this._dimensions.scaledCellHeight, w.r, w.g, w.b, w.a);\n  }\n\n  private _addRectangle(array: Float32Array, offset: number, x1: number, y1: number, width: number, height: number, r: number, g: number, b: number, a: number): void {\n    array[offset    ] = x1 / this._dimensions.scaledCanvasWidth;\n    array[offset + 1] = y1 / this._dimensions.scaledCanvasHeight;\n    array[offset + 2] = width / this._dimensions.scaledCanvasWidth;\n    array[offset + 3] = height / this._dimensions.scaledCanvasHeight;\n    array[offset + 4] = r;\n    array[offset + 5] = g;\n    array[offset + 6] = b;\n    array[offset + 7] = a;\n  }\n\n  private _addRectangleFloat(array: Float32Array, offset: number, x1: number, y1: number, width: number, height: number, color: Float32Array): void {\n    array[offset    ] = x1 / this._dimensions.scaledCanvasWidth;\n    array[offset + 1] = y1 / this._dimensions.scaledCanvasHeight;\n    array[offset + 2] = width / this._dimensions.scaledCanvasWidth;\n    array[offset + 3] = height / this._dimensions.scaledCanvasHeight;\n    array[offset + 4] = color[0];\n    array[offset + 5] = color[1];\n    array[offset + 6] = color[2];\n    array[offset + 7] = color[3];\n  }\n\n  private _colorToFloat32Array(color: IColor): Float32Array {\n    return new Float32Array([\n      ((color.rgba >> 24) & 0xFF) / 255,\n      ((color.rgba >> 16) & 0xFF) / 255,\n      ((color.rgba >> 8 ) & 0xFF) / 255,\n      ((color.rgba      ) & 0xFF) / 255\n    ]);\n  }\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IRenderModel, ISelectionRenderModel } from './Types';\nimport { fill } from 'common/TypedArrayUtils';\n\nexport const RENDER_MODEL_INDICIES_PER_CELL = 4;\nexport const RENDER_MODEL_BG_OFFSET = 1;\nexport const RENDER_MODEL_FG_OFFSET = 2;\nexport const RENDER_MODEL_EXT_OFFSET = 3;\n\nexport const COMBINED_CHAR_BIT_MASK = 0x80000000;\n\nexport class RenderModel implements IRenderModel {\n  public cells: Uint32Array;\n  public lineLengths: Uint32Array;\n  public selection: ISelectionRenderModel;\n\n  constructor() {\n    this.cells = new Uint32Array(0);\n    this.lineLengths = new Uint32Array(0);\n    this.selection = {\n      hasSelection: false,\n      columnSelectMode: false,\n      viewportStartRow: 0,\n      viewportEndRow: 0,\n      viewportCappedStartRow: 0,\n      viewportCappedEndRow: 0,\n      startCol: 0,\n      endCol: 0\n    };\n  }\n\n  public resize(cols: number, rows: number): void {\n    const indexCount = cols * rows * RENDER_MODEL_INDICIES_PER_CELL;\n    if (indexCount !== this.cells.length) {\n      this.cells = new Uint32Array(indexCount);\n      this.lineLengths = new Uint32Array(rows);\n    }\n  }\n\n  public clear(): void {\n    fill(this.cells, 0, 0);\n    fill(this.lineLengths, 0, 0);\n  }\n\n  public clearSelection(): void {\n    this.selection.hasSelection = false;\n    this.selection.viewportStartRow = 0;\n    this.selection.viewportEndRow = 0;\n    this.selection.viewportCappedStartRow = 0;\n    this.selection.viewportCappedEndRow = 0;\n    this.selection.startCol = 0;\n    this.selection.endCol = 0;\n  }\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { GlyphRenderer } from './GlyphRenderer';\nimport { LinkRenderLayer } from './renderLayer/LinkRenderLayer';\nimport { CursorRenderLayer } from './renderLayer/CursorRenderLayer';\nimport { acquireCharAtlas, removeTerminalFromCache } from './atlas/CharAtlasCache';\nimport { WebglCharAtlas } from './atlas/WebglCharAtlas';\nimport { RectangleRenderer } from './RectangleRenderer';\nimport { IWebGL2RenderingContext } from './Types';\nimport { RenderModel, COMBINED_CHAR_BIT_MASK, RENDER_MODEL_BG_OFFSET, RENDER_MODEL_FG_OFFSET, RENDER_MODEL_EXT_OFFSET, RENDER_MODEL_INDICIES_PER_CELL } from './RenderModel';\nimport { Disposable } from 'common/Lifecycle';\nimport { Attributes, BgFlags, Content, FgFlags, NULL_CELL_CHAR, NULL_CELL_CODE } from 'common/buffer/Constants';\nimport { Terminal, IEvent } from 'xterm';\nimport { IRenderLayer } from './renderLayer/Types';\nimport { IRenderDimensions, IRenderer, IRequestRedrawEvent } from 'browser/renderer/Types';\nimport { observeDevicePixelDimensions } from 'browser/renderer/DevicePixelObserver';\nimport { ITerminal, IColorSet } from 'browser/Types';\nimport { EventEmitter } from 'common/EventEmitter';\nimport { CellData } from 'common/buffer/CellData';\nimport { addDisposableDomListener } from 'browser/Lifecycle';\nimport { ICharacterJoinerService, ICoreBrowserService } from 'browser/services/Services';\nimport { CharData, IBufferLine, ICellData } from 'common/Types';\nimport { AttributeData } from 'common/buffer/AttributeData';\nimport { ICoreService, IDecorationService } from 'common/services/Services';\n\n/** Work variables to avoid garbage collection. */\nconst w: { fg: number, bg: number, hasFg: boolean, hasBg: boolean, isSelected: boolean } = {\n  fg: 0,\n  bg: 0,\n  hasFg: false,\n  hasBg: false,\n  isSelected: false\n};\n\nexport class WebglRenderer extends Disposable implements IRenderer {\n  private _renderLayers: IRenderLayer[];\n  private _charAtlas: WebglCharAtlas | undefined;\n  private _devicePixelRatio: number;\n\n  private _model: RenderModel = new RenderModel();\n  private _workCell: CellData = new CellData();\n  private _workColors: { fg: number, bg: number, ext: number } = { fg: 0, bg: 0, ext: 0 };\n\n  private _canvas: HTMLCanvasElement;\n  private _gl: IWebGL2RenderingContext;\n  private _rectangleRenderer!: RectangleRenderer;\n  private _glyphRenderer!: GlyphRenderer;\n\n  public dimensions: IRenderDimensions;\n\n  private _core: ITerminal;\n  private _isAttached: boolean;\n  private _contextRestorationTimeout: number | undefined;\n\n  private _onChangeTextureAtlas = new EventEmitter<HTMLCanvasElement>();\n  public get onChangeTextureAtlas(): IEvent<HTMLCanvasElement> { return this._onChangeTextureAtlas.event; }\n  private _onRequestRedraw = new EventEmitter<IRequestRedrawEvent>();\n  public get onRequestRedraw(): IEvent<IRequestRedrawEvent> { return this._onRequestRedraw.event; }\n\n  private _onContextLoss = new EventEmitter<void>();\n  public get onContextLoss(): IEvent<void> { return this._onContextLoss.event; }\n\n  constructor(\n    private _terminal: Terminal,\n    private _colors: IColorSet,\n    private readonly _characterJoinerService: ICharacterJoinerService,\n    private readonly _coreBrowserService: ICoreBrowserService,\n    coreService: ICoreService,\n    private readonly _decorationService: IDecorationService,\n    preserveDrawingBuffer?: boolean\n  ) {\n    super();\n\n    this._core = (this._terminal as any)._core;\n\n    this._renderLayers = [\n      new LinkRenderLayer(this._core.screenElement!, 2, this._colors, this._core),\n      new CursorRenderLayer(_terminal, this._core.screenElement!, 3, this._colors, this._onRequestRedraw, this._coreBrowserService, coreService)\n    ];\n    this.dimensions = {\n      scaledCharWidth: 0,\n      scaledCharHeight: 0,\n      scaledCellWidth: 0,\n      scaledCellHeight: 0,\n      scaledCharLeft: 0,\n      scaledCharTop: 0,\n      scaledCanvasWidth: 0,\n      scaledCanvasHeight: 0,\n      canvasWidth: 0,\n      canvasHeight: 0,\n      actualCellWidth: 0,\n      actualCellHeight: 0\n    };\n    this._devicePixelRatio = window.devicePixelRatio;\n    this._updateDimensions();\n\n    this._canvas = document.createElement('canvas');\n\n    const contextAttributes = {\n      antialias: false,\n      depth: false,\n      preserveDrawingBuffer\n    };\n    this._gl = this._canvas.getContext('webgl2', contextAttributes) as IWebGL2RenderingContext;\n    if (!this._gl) {\n      throw new Error('WebGL2 not supported ' + this._gl);\n    }\n\n    this.register(addDisposableDomListener(this._canvas, 'webglcontextlost', (e) => {\n      console.log('webglcontextlost event received');\n      // Prevent the default behavior in order to enable WebGL context restoration.\n      e.preventDefault();\n      // Wait a few seconds to see if the 'webglcontextrestored' event is fired.\n      // If not, dispatch the onContextLoss notification to observers.\n      this._contextRestorationTimeout = setTimeout(() => {\n        this._contextRestorationTimeout = undefined;\n        console.warn('webgl context not restored; firing onContextLoss');\n        this._onContextLoss.fire(e);\n      }, 3000 /* ms */);\n    }));\n    this.register(addDisposableDomListener(this._canvas, 'webglcontextrestored', (e) => {\n      console.warn('webglcontextrestored event received');\n      clearTimeout(this._contextRestorationTimeout);\n      this._contextRestorationTimeout = undefined;\n      // The texture atlas and glyph renderer must be fully reinitialized\n      // because their contents have been lost.\n      removeTerminalFromCache(this._terminal);\n      this._initializeWebGLState();\n      this._requestRedrawViewport();\n    }));\n\n    this.register(observeDevicePixelDimensions(this._canvas, (w, h) => this._setCanvasDevicePixelDimensions(w, h)));\n\n    this._core.screenElement!.appendChild(this._canvas);\n\n    this._initializeWebGLState();\n\n    this._isAttached = document.body.contains(this._core.screenElement!);\n  }\n\n  public dispose(): void {\n    for (const l of this._renderLayers) {\n      l.dispose();\n    }\n    this._canvas.parentElement?.removeChild(this._canvas);\n    removeTerminalFromCache(this._terminal);\n    super.dispose();\n  }\n\n  public get textureAtlas(): HTMLCanvasElement | undefined {\n    return this._charAtlas?.cacheCanvas;\n  }\n\n  public setColors(colors: IColorSet): void {\n    this._colors = colors;\n    // Clear layers and force a full render\n    for (const l of this._renderLayers) {\n      l.setColors(this._terminal, this._colors);\n      l.reset(this._terminal);\n    }\n\n    this._rectangleRenderer.setColors();\n    this._glyphRenderer.setColors();\n\n    this._refreshCharAtlas();\n\n    // Force a full refresh\n    this._model.clear();\n  }\n\n  public onDevicePixelRatioChange(): void {\n    // If the device pixel ratio changed, the char atlas needs to be regenerated\n    // and the terminal needs to refreshed\n    if (this._devicePixelRatio !== window.devicePixelRatio) {\n      this._devicePixelRatio = window.devicePixelRatio;\n      this.onResize(this._terminal.cols, this._terminal.rows);\n    }\n  }\n\n  public onResize(cols: number, rows: number): void {\n    // Update character and canvas dimensions\n    this._updateDimensions();\n\n    this._model.resize(this._terminal.cols, this._terminal.rows);\n\n    // Resize all render layers\n    for (const l of this._renderLayers) {\n      l.resize(this._terminal, this.dimensions);\n    }\n\n    // Resize the canvas\n    this._canvas.width = this.dimensions.scaledCanvasWidth;\n    this._canvas.height = this.dimensions.scaledCanvasHeight;\n    this._canvas.style.width = `${this.dimensions.canvasWidth}px`;\n    this._canvas.style.height = `${this.dimensions.canvasHeight}px`;\n\n    // Resize the screen\n    this._core.screenElement!.style.width = `${this.dimensions.canvasWidth}px`;\n    this._core.screenElement!.style.height = `${this.dimensions.canvasHeight}px`;\n\n    this._rectangleRenderer.setDimensions(this.dimensions);\n    this._rectangleRenderer.onResize();\n    this._glyphRenderer.setDimensions(this.dimensions);\n    this._glyphRenderer.onResize();\n\n    this._refreshCharAtlas();\n\n    // Force a full refresh\n    this._model.clear();\n  }\n\n  public onCharSizeChanged(): void {\n    this.onResize(this._terminal.cols, this._terminal.rows);\n  }\n\n  public onBlur(): void {\n    for (const l of this._renderLayers) {\n      l.onBlur(this._terminal);\n    }\n    // Request a redraw for active/inactive selection background\n    this._requestRedrawViewport();\n  }\n\n  public onFocus(): void {\n    for (const l of this._renderLayers) {\n      l.onFocus(this._terminal);\n    }\n    // Request a redraw for active/inactive selection background\n    this._requestRedrawViewport();\n  }\n\n  public onSelectionChanged(start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean): void {\n    for (const l of this._renderLayers) {\n      l.onSelectionChanged(this._terminal, start, end, columnSelectMode);\n    }\n    this._updateSelectionModel(start, end, columnSelectMode);\n    this._requestRedrawViewport();\n  }\n\n  public onCursorMove(): void {\n    for (const l of this._renderLayers) {\n      l.onCursorMove(this._terminal);\n    }\n  }\n\n  public onOptionsChanged(): void {\n    for (const l of this._renderLayers) {\n      l.onOptionsChanged(this._terminal);\n    }\n    this._updateDimensions();\n    this._refreshCharAtlas();\n  }\n\n  /**\n   * Initializes members dependent on WebGL context state.\n   */\n  private _initializeWebGLState(): void {\n    // Dispose any previous rectangle and glyph renderers before creating new ones.\n    this._rectangleRenderer?.dispose();\n    this._glyphRenderer?.dispose();\n\n    this._rectangleRenderer = new RectangleRenderer(this._terminal, this._colors, this._gl, this.dimensions);\n    this._glyphRenderer = new GlyphRenderer(this._terminal, this._colors, this._gl, this.dimensions);\n\n    // Update dimensions and acquire char atlas\n    this.onCharSizeChanged();\n  }\n\n  /**\n   * Refreshes the char atlas, aquiring a new one if necessary.\n   * @param terminal The terminal.\n   * @param colorSet The color set to use for the char atlas.\n   */\n  private _refreshCharAtlas(): void {\n    if (this.dimensions.scaledCharWidth <= 0 && this.dimensions.scaledCharHeight <= 0) {\n      // Mark as not attached so char atlas gets refreshed on next render\n      this._isAttached = false;\n      return;\n    }\n\n    const atlas = acquireCharAtlas(this._terminal, this._colors, this.dimensions.scaledCellWidth, this.dimensions.scaledCellHeight, this.dimensions.scaledCharWidth, this.dimensions.scaledCharHeight);\n    if (!('getRasterizedGlyph' in atlas)) {\n      throw new Error('The webgl renderer only works with the webgl char atlas');\n    }\n    if (this._charAtlas !== atlas) {\n      this._onChangeTextureAtlas.fire(atlas.cacheCanvas);\n    }\n    this._charAtlas = atlas;\n    this._charAtlas.warmUp();\n    this._glyphRenderer.setAtlas(this._charAtlas);\n  }\n\n  public clearCharAtlas(): void {\n    this._charAtlas?.clearTexture();\n    this._model.clear();\n    this._updateModel(0, this._terminal.rows - 1);\n    this._requestRedrawViewport();\n  }\n\n  public clear(): void {\n    this._model.clear();\n    this._glyphRenderer.clear(true);\n    for (const l of this._renderLayers) {\n      l.reset(this._terminal);\n    }\n  }\n\n  public registerCharacterJoiner(handler: (text: string) => [number, number][]): number {\n    return -1;\n  }\n\n  public deregisterCharacterJoiner(joinerId: number): boolean {\n    return false;\n  }\n\n  public renderRows(start: number, end: number): void {\n    if (!this._isAttached) {\n      if (document.body.contains(this._core.screenElement!) && (this._core as any)._charSizeService.width && (this._core as any)._charSizeService.height) {\n        this._updateDimensions();\n        this._refreshCharAtlas();\n        this._isAttached = true;\n      } else {\n        return;\n      }\n    }\n\n    // Update render layers\n    for (const l of this._renderLayers) {\n      l.onGridChanged(this._terminal, start, end);\n    }\n\n    // Tell renderer the frame is beginning\n    if (this._glyphRenderer.beginFrame()) {\n      this._model.clear();\n      this._updateSelectionModel(undefined, undefined);\n    }\n\n    // Update model to reflect what's drawn\n    this._updateModel(start, end);\n\n    // Render\n    this._rectangleRenderer.render();\n    this._glyphRenderer.render(this._model);\n  }\n\n  private _updateModel(start: number, end: number): void {\n    const terminal = this._core;\n    let cell: ICellData = this._workCell;\n\n    // Declare variable ahead of time to avoid garbage collection\n    let lastBg: number;\n    let y: number;\n    let row: number;\n    let line: IBufferLine;\n    let joinedRanges: [number, number][];\n    let isJoined: boolean;\n    let lastCharX: number;\n    let range: [number, number];\n    let chars: string;\n    let code: number;\n    let i: number;\n    let x: number;\n    let j: number;\n\n    for (y = start; y <= end; y++) {\n      row = y + terminal.buffer.ydisp;\n      line = terminal.buffer.lines.get(row)!;\n      this._model.lineLengths[y] = 0;\n      joinedRanges = this._characterJoinerService.getJoinedCharacters(row);\n      for (x = 0; x < terminal.cols; x++) {\n        lastBg = this._workColors.bg;\n        line.loadCell(x, cell);\n\n        if (x === 0) {\n          lastBg = this._workColors.bg;\n        }\n\n        // If true, indicates that the current character(s) to draw were joined.\n        isJoined = false;\n        lastCharX = x;\n\n        // Process any joined character ranges as needed. Because of how the\n        // ranges are produced, we know that they are valid for the characters\n        // and attributes of our input.\n        if (joinedRanges.length > 0 && x === joinedRanges[0][0]) {\n          isJoined = true;\n          range = joinedRanges.shift()!;\n\n          // We already know the exact start and end column of the joined range,\n          // so we get the string and width representing it directly.\n          cell = new JoinedCellData(\n            cell,\n            line!.translateToString(true, range[0], range[1]),\n            range[1] - range[0]\n          );\n\n          // Skip over the cells occupied by this range in the loop\n          lastCharX = range[1] - 1;\n        }\n\n        chars = cell.getChars();\n        code = cell.getCode();\n        i = ((y * terminal.cols) + x) * RENDER_MODEL_INDICIES_PER_CELL;\n\n        // Load colors/resolve overrides into work colors\n        this._loadColorsForCell(x, row);\n\n        if (code !== NULL_CELL_CODE) {\n          this._model.lineLengths[y] = x + 1;\n        }\n\n        // Nothing has changed, no updates needed\n        if (this._model.cells[i] === code &&\n            this._model.cells[i + RENDER_MODEL_BG_OFFSET] === this._workColors.bg &&\n            this._model.cells[i + RENDER_MODEL_FG_OFFSET] === this._workColors.fg &&\n            this._model.cells[i + RENDER_MODEL_EXT_OFFSET] === this._workColors.ext) {\n          continue;\n        }\n\n        // Flag combined chars with a bit mask so they're easily identifiable\n        if (chars.length > 1) {\n          code |= COMBINED_CHAR_BIT_MASK;\n        }\n\n        // Cache the results in the model\n        this._model.cells[i] = code;\n        this._model.cells[i + RENDER_MODEL_BG_OFFSET] = this._workColors.bg;\n        this._model.cells[i + RENDER_MODEL_FG_OFFSET] = this._workColors.fg;\n        this._model.cells[i + RENDER_MODEL_EXT_OFFSET] = this._workColors.ext;\n\n        this._glyphRenderer.updateCell(x, y, code, this._workColors.bg, this._workColors.fg, this._workColors.ext, chars, lastBg);\n\n        if (isJoined) {\n          // Restore work cell\n          cell = this._workCell;\n\n          // Null out non-first cells\n          for (x++; x < lastCharX; x++) {\n            j = ((y * terminal.cols) + x) * RENDER_MODEL_INDICIES_PER_CELL;\n            this._glyphRenderer.updateCell(x, y, NULL_CELL_CODE, 0, 0, 0, NULL_CELL_CHAR, 0);\n            this._model.cells[j] = NULL_CELL_CODE;\n            this._model.cells[j + RENDER_MODEL_BG_OFFSET] = this._workColors.bg;\n            this._model.cells[j + RENDER_MODEL_FG_OFFSET] = this._workColors.fg;\n            this._model.cells[j + RENDER_MODEL_EXT_OFFSET] = this._workColors.ext;\n          }\n        }\n      }\n    }\n    this._rectangleRenderer.updateBackgrounds(this._model);\n  }\n\n  /**\n   * Loads colors for the cell into the work colors object. This resolves overrides/inverse if\n   * necessary which is why the work cell object is not used.\n   */\n  private _loadColorsForCell(x: number, y: number): void {\n    this._workColors.bg = this._workCell.bg;\n    this._workColors.fg = this._workCell.fg;\n    this._workColors.ext = this._workCell.bg & BgFlags.HAS_EXTENDED ? this._workCell.extended.ext : 0;\n    // Get any foreground/background overrides, this happens on the model to avoid spreading\n    // override logic throughout the different sub-renderers\n\n    // Reset overrides work variables\n    w.bg = 0;\n    w.fg = 0;\n    w.hasBg = false;\n    w.hasFg = false;\n    w.isSelected = false;\n\n    // Apply decorations on the bottom layer\n    this._decorationService.forEachDecorationAtCell(x, y, 'bottom', d => {\n      if (d.backgroundColorRGB) {\n        w.bg = d.backgroundColorRGB.rgba >> 8 & 0xFFFFFF;\n        w.hasBg = true;\n      }\n      if (d.foregroundColorRGB) {\n        w.fg = d.foregroundColorRGB.rgba >> 8 & 0xFFFFFF;\n        w.hasFg = true;\n      }\n    });\n\n    // Apply the selection color if needed\n    w.isSelected = this._isCellSelected(x, y);\n    if (w.isSelected) {\n      w.bg = (this._coreBrowserService.isFocused ? this._colors.selectionBackgroundOpaque : this._colors.selectionInactiveBackgroundOpaque).rgba >> 8 & 0xFFFFFF;\n      w.hasBg = true;\n      if (this._colors.selectionForeground) {\n        w.fg = this._colors.selectionForeground.rgba >> 8 & 0xFFFFFF;\n        w.hasFg = true;\n      }\n    }\n\n    // Apply decorations on the top layer\n    this._decorationService.forEachDecorationAtCell(x, y, 'top', d => {\n      if (d.backgroundColorRGB) {\n        w.bg = d.backgroundColorRGB.rgba >> 8 & 0xFFFFFF;\n        w.hasBg = true;\n      }\n      if (d.foregroundColorRGB) {\n        w.fg = d.foregroundColorRGB.rgba >> 8 & 0xFFFFFF;\n        w.hasFg = true;\n      }\n    });\n\n    // Convert any overrides from rgba to the fg/bg packed format. This resolves the inverse flag\n    // ahead of time in order to use the correct cache key\n    if (w.hasBg) {\n      if (w.isSelected) {\n        // Non-RGB attributes from model + force non-dim + override + force RGB color mode\n        w.bg = (this._workCell.bg & ~Attributes.RGB_MASK & ~BgFlags.DIM) | w.bg | Attributes.CM_RGB;\n      } else {\n        // Non-RGB attributes from model + override + force RGB color mode\n        w.bg = (this._workCell.bg & ~Attributes.RGB_MASK) | w.bg | Attributes.CM_RGB;\n      }\n    }\n    if (w.hasFg) {\n      // Non-RGB attributes from model + force disable inverse + override + force RGB color mode\n      w.fg = (this._workCell.fg & ~Attributes.RGB_MASK & ~FgFlags.INVERSE) | w.fg | Attributes.CM_RGB;\n    }\n\n    // Handle case where inverse was specified by only one of bg override or fg override was set,\n    // resolving the other inverse color and setting the inverse flag if needed.\n    if (this._workColors.fg & FgFlags.INVERSE) {\n      if (w.hasBg && !w.hasFg) {\n        // Resolve bg color type (default color has a different meaning in fg vs bg)\n        if ((this._workColors.bg & Attributes.CM_MASK) === Attributes.CM_DEFAULT) {\n          w.fg = (this._workColors.fg & ~(Attributes.RGB_MASK | FgFlags.INVERSE | Attributes.CM_MASK)) | ((this._colors.background.rgba >> 8 & 0xFFFFFF) & Attributes.RGB_MASK) | Attributes.CM_RGB;\n        } else {\n          w.fg = (this._workColors.fg & ~(Attributes.RGB_MASK | FgFlags.INVERSE | Attributes.CM_MASK)) | this._workColors.bg & (Attributes.RGB_MASK | Attributes.CM_MASK);\n        }\n        w.hasFg = true;\n      }\n      if (!w.hasBg && w.hasFg) {\n        // Resolve bg color type (default color has a different meaning in fg vs bg)\n        if ((this._workColors.fg & Attributes.CM_MASK) === Attributes.CM_DEFAULT) {\n          w.bg = (this._workColors.bg & ~(Attributes.RGB_MASK | Attributes.CM_MASK)) | ((this._colors.foreground.rgba >> 8 & 0xFFFFFF) & Attributes.RGB_MASK) | Attributes.CM_RGB;\n        } else {\n          w.bg = (this._workColors.bg & ~(Attributes.RGB_MASK | Attributes.CM_MASK)) | this._workColors.fg & (Attributes.RGB_MASK | Attributes.CM_MASK);\n        }\n        w.hasBg = true;\n      }\n    }\n\n    // Use the override if it exists\n    this._workColors.bg = w.hasBg ? w.bg : this._workColors.bg;\n    this._workColors.fg = w.hasFg ? w.fg : this._workColors.fg;\n  }\n\n  private _isCellSelected(x: number, y: number): boolean {\n    if (!this._model.selection.hasSelection) {\n      return false;\n    }\n    y -= this._terminal.buffer.active.viewportY;\n    if (this._model.selection.columnSelectMode) {\n      if (this._model.selection.startCol <= this._model.selection.endCol) {\n        return x >= this._model.selection.startCol && y >= this._model.selection.viewportCappedStartRow &&\n          x < this._model.selection.endCol && y <= this._model.selection.viewportCappedEndRow;\n      }\n      return x < this._model.selection.startCol && y >= this._model.selection.viewportCappedStartRow &&\n        x >= this._model.selection.endCol && y <= this._model.selection.viewportCappedEndRow;\n    }\n    return (y > this._model.selection.viewportStartRow && y < this._model.selection.viewportEndRow) ||\n      (this._model.selection.viewportStartRow === this._model.selection.viewportEndRow && y === this._model.selection.viewportStartRow && x >= this._model.selection.startCol && x < this._model.selection.endCol) ||\n      (this._model.selection.viewportStartRow < this._model.selection.viewportEndRow && y === this._model.selection.viewportEndRow && x < this._model.selection.endCol) ||\n      (this._model.selection.viewportStartRow < this._model.selection.viewportEndRow && y === this._model.selection.viewportStartRow && x >= this._model.selection.startCol);\n  }\n\n  private _updateSelectionModel(start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean = false): void {\n    const terminal = this._terminal;\n\n    // Selection does not exist\n    if (!start || !end || (start[0] === end[0] && start[1] === end[1])) {\n      this._model.clearSelection();\n      return;\n    }\n\n    // Translate from buffer position to viewport position\n    const viewportStartRow = start[1] - terminal.buffer.active.viewportY;\n    const viewportEndRow = end[1] - terminal.buffer.active.viewportY;\n    const viewportCappedStartRow = Math.max(viewportStartRow, 0);\n    const viewportCappedEndRow = Math.min(viewportEndRow, terminal.rows - 1);\n\n    // No need to draw the selection\n    if (viewportCappedStartRow >= terminal.rows || viewportCappedEndRow < 0) {\n      this._model.clearSelection();\n      return;\n    }\n\n    this._model.selection.hasSelection = true;\n    this._model.selection.columnSelectMode = columnSelectMode;\n    this._model.selection.viewportStartRow = viewportStartRow;\n    this._model.selection.viewportEndRow = viewportEndRow;\n    this._model.selection.viewportCappedStartRow = viewportCappedStartRow;\n    this._model.selection.viewportCappedEndRow = viewportCappedEndRow;\n    this._model.selection.startCol = start[0];\n    this._model.selection.endCol = end[0];\n  }\n\n  /**\n   * Recalculates the character and canvas dimensions.\n   */\n  private _updateDimensions(): void {\n    // TODO: Acquire CharSizeService properly\n\n    // Perform a new measure if the CharMeasure dimensions are not yet available\n    if (!(this._core as any)._charSizeService.width || !(this._core as any)._charSizeService.height) {\n      return;\n    }\n\n    // Calculate the scaled character width. Width is floored as it must be drawn to an integer grid\n    // in order for the char atlas glyphs to not be blurry.\n    this.dimensions.scaledCharWidth = Math.floor((this._core as any)._charSizeService.width * this._devicePixelRatio);\n\n    // Calculate the scaled character height. Height is ceiled in case devicePixelRatio is a\n    // floating point number in order to ensure there is enough space to draw the character to the\n    // cell.\n    this.dimensions.scaledCharHeight = Math.ceil((this._core as any)._charSizeService.height * this._devicePixelRatio);\n\n    // Calculate the scaled cell height, if lineHeight is _not_ 1, the resulting value will be\n    // floored since lineHeight can never be lower then 1, this guarentees the scaled cell height\n    // will always be larger than scaled char height.\n    this.dimensions.scaledCellHeight = Math.floor(this.dimensions.scaledCharHeight * this._terminal.options.lineHeight);\n\n    // Calculate the y offset within a cell that glyph should draw at in order for it to be centered\n    // correctly within the cell.\n    this.dimensions.scaledCharTop = this._terminal.options.lineHeight === 1 ? 0 : Math.round((this.dimensions.scaledCellHeight - this.dimensions.scaledCharHeight) / 2);\n\n    // Calculate the scaled cell width, taking the letterSpacing into account.\n    this.dimensions.scaledCellWidth = this.dimensions.scaledCharWidth + Math.round(this._terminal.options.letterSpacing);\n\n    // Calculate the x offset with a cell that text should draw from in order for it to be centered\n    // correctly within the cell.\n    this.dimensions.scaledCharLeft = Math.floor(this._terminal.options.letterSpacing / 2);\n\n    // Recalculate the canvas dimensions, the scaled dimensions define the actual number of pixel in\n    // the canvas\n    this.dimensions.scaledCanvasHeight = this._terminal.rows * this.dimensions.scaledCellHeight;\n    this.dimensions.scaledCanvasWidth = this._terminal.cols * this.dimensions.scaledCellWidth;\n\n    // The the size of the canvas on the page. It's important that this rounds to nearest integer\n    // and not ceils as browsers often have floating point precision issues where\n    // `window.devicePixelRatio` ends up being something like `1.100000023841858` for example, when\n    // it's actually 1.1. Ceiling may causes blurriness as the backing canvas image is 1 pixel too\n    // large for the canvas element size.\n    this.dimensions.canvasHeight = Math.round(this.dimensions.scaledCanvasHeight / this._devicePixelRatio);\n    this.dimensions.canvasWidth = Math.round(this.dimensions.scaledCanvasWidth / this._devicePixelRatio);\n\n    // Get the CSS dimensions of an individual cell. This needs to be derived from the calculated\n    // device pixel canvas value above. CharMeasure.width/height by itself is insufficient when the\n    // page is not at 100% zoom level as CharMeasure is measured in CSS pixels, but the actual char\n    // size on the canvas can differ.\n    this.dimensions.actualCellHeight = this.dimensions.scaledCellHeight / this._devicePixelRatio;\n    this.dimensions.actualCellWidth = this.dimensions.scaledCellWidth / this._devicePixelRatio;\n  }\n\n  private _setCanvasDevicePixelDimensions(width: number, height: number): void {\n    if (this._canvas.width === width && this._canvas.height === height) {\n      return;\n    }\n    // While the actual canvas size has changed, keep scaledCanvasWidth/Height as the value before\n    // the change as it's an exact multiple of the cell sizes.\n    this._canvas.width = width;\n    this._canvas.height = height;\n    this._requestRedrawViewport();\n  }\n\n  private _requestRedrawViewport(): void {\n    this._onRequestRedraw.fire({ start: 0, end: this._terminal.rows - 1 });\n  }\n}\n\n// TODO: Share impl with core\nexport class JoinedCellData extends AttributeData implements ICellData {\n  private _width: number;\n  // .content carries no meaning for joined CellData, simply nullify it\n  // thus we have to overload all other .content accessors\n  public content: number = 0;\n  public fg: number;\n  public bg: number;\n  public combinedData: string = '';\n\n  constructor(firstCell: ICellData, chars: string, width: number) {\n    super();\n    this.fg = firstCell.fg;\n    this.bg = firstCell.bg;\n    this.combinedData = chars;\n    this._width = width;\n  }\n\n  public isCombined(): number {\n    // always mark joined cell data as combined\n    return Content.IS_COMBINED_MASK;\n  }\n\n  public getWidth(): number {\n    return this._width;\n  }\n\n  public getChars(): string {\n    return this.combinedData;\n  }\n\n  public getCode(): number {\n    // code always gets the highest possible fake codepoint (read as -1)\n    // this is needed as code is used by caches as identifier\n    return 0x1FFFFF;\n  }\n\n  public setFromCharData(value: CharData): void {\n    throw new Error('not implemented');\n  }\n\n  public getAsCharData(): CharData {\n    return [this.fg, this.getChars(), this.getWidth(), this.getCode()];\n  }\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n/**\n * A matrix that when multiplies will translate 0-1 coordinates (left to right,\n * top to bottom) to clip space.\n */\nexport const PROJECTION_MATRIX = new Float32Array([\n  2, 0, 0, 0,\n  0, -2, 0, 0,\n  0, 0, 1, 0,\n  -1, 1, 0, 1\n]);\n\nexport function createProgram(gl: WebGLRenderingContext, vertexSource: string, fragmentSource: string): WebGLProgram | undefined {\n  const program = throwIfFalsy(gl.createProgram());\n  gl.attachShader(program, throwIfFalsy(createShader(gl, gl.VERTEX_SHADER, vertexSource)));\n  gl.attachShader(program, throwIfFalsy(createShader(gl, gl.FRAGMENT_SHADER, fragmentSource)));\n  gl.linkProgram(program);\n  const success = gl.getProgramParameter(program, gl.LINK_STATUS);\n  if (success) {\n    return program;\n  }\n\n  console.error(gl.getProgramInfoLog(program));\n  gl.deleteProgram(program);\n}\n\nexport function createShader(gl: WebGLRenderingContext, type: number, source: string): WebGLShader | undefined {\n  const shader = throwIfFalsy(gl.createShader(type));\n  gl.shaderSource(shader, source);\n  gl.compileShader(shader);\n  const success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n  if (success) {\n    return shader;\n  }\n\n  console.error(gl.getShaderInfoLog(shader));\n  gl.deleteShader(shader);\n}\n\nexport function expandFloat32Array(source: Float32Array, max: number): Float32Array {\n  const newLength = Math.min(source.length * 2, max);\n  const newArray = new Float32Array(newLength);\n  for (let i = 0; i < source.length; i++) {\n    newArray[i] = source[i];\n  }\n  return newArray;\n}\n\nexport function throwIfFalsy<T>(value: T | undefined | null): T {\n  if (!value) {\n    throw new Error('value must not be falsy');\n  }\n  return value;\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { generateConfig, configEquals } from './CharAtlasUtils';\nimport { WebglCharAtlas } from './WebglCharAtlas';\nimport { ICharAtlasConfig } from './Types';\nimport { Terminal } from 'xterm';\nimport { IColorSet, ITerminal } from 'browser/Types';\n\ninterface ICharAtlasCacheEntry {\n  atlas: WebglCharAtlas;\n  config: ICharAtlasConfig;\n  // N.B. This implementation potentially holds onto copies of the terminal forever, so\n  // this may cause memory leaks.\n  ownedBy: Terminal[];\n}\n\nconst charAtlasCache: ICharAtlasCacheEntry[] = [];\n\n/**\n * Acquires a char atlas, either generating a new one or returning an existing\n * one that is in use by another terminal.\n * @param terminal The terminal.\n * @param colors The colors to use.\n */\nexport function acquireCharAtlas(\n  terminal: Terminal,\n  colors: IColorSet,\n  scaledCellWidth: number,\n  scaledCellHeight: number,\n  scaledCharWidth: number,\n  scaledCharHeight: number\n): WebglCharAtlas {\n  const newConfig = generateConfig(scaledCellWidth, scaledCellHeight, scaledCharWidth, scaledCharHeight, terminal, colors);\n\n  // Check to see if the terminal already owns this config\n  for (let i = 0; i < charAtlasCache.length; i++) {\n    const entry = charAtlasCache[i];\n    const ownedByIndex = entry.ownedBy.indexOf(terminal);\n    if (ownedByIndex >= 0) {\n      if (configEquals(entry.config, newConfig)) {\n        return entry.atlas;\n      }\n      // The configs differ, release the terminal from the entry\n      if (entry.ownedBy.length === 1) {\n        entry.atlas.dispose();\n        charAtlasCache.splice(i, 1);\n      } else {\n        entry.ownedBy.splice(ownedByIndex, 1);\n      }\n      break;\n    }\n  }\n\n  // Try match a char atlas from the cache\n  for (let i = 0; i < charAtlasCache.length; i++) {\n    const entry = charAtlasCache[i];\n    if (configEquals(entry.config, newConfig)) {\n      // Add the terminal to the cache entry and return\n      entry.ownedBy.push(terminal);\n      return entry.atlas;\n    }\n  }\n\n  const core: ITerminal = (terminal as any)._core;\n  const newEntry: ICharAtlasCacheEntry = {\n    atlas: new WebglCharAtlas(document, newConfig, core.unicodeService),\n    config: newConfig,\n    ownedBy: [terminal]\n  };\n  charAtlasCache.push(newEntry);\n  return newEntry.atlas;\n}\n\n/**\n * Removes a terminal reference from the cache, allowing its memory to be freed.\n * @param terminal The terminal to remove.\n */\nexport function removeTerminalFromCache(terminal: Terminal): void {\n  for (let i = 0; i < charAtlasCache.length; i++) {\n    const index = charAtlasCache[i].ownedBy.indexOf(terminal);\n    if (index !== -1) {\n      if (charAtlasCache[i].ownedBy.length === 1) {\n        // Remove the cache entry if it's the only terminal\n        charAtlasCache[i].atlas.dispose();\n        charAtlasCache.splice(i, 1);\n      } else {\n        // Remove the reference from the cache entry\n        charAtlasCache[i].ownedBy.splice(index, 1);\n      }\n      break;\n    }\n  }\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICharAtlasConfig } from './Types';\nimport { Attributes } from 'common/buffer/Constants';\nimport { Terminal, FontWeight } from 'xterm';\nimport { IColorSet } from 'browser/Types';\nimport { IColor } from 'common/Types';\n\nconst NULL_COLOR: IColor = {\n  css: '',\n  rgba: 0\n};\n\nexport function generateConfig(scaledCellWidth: number, scaledCellHeight: number, scaledCharWidth: number, scaledCharHeight: number, terminal: Terminal, colors: IColorSet): ICharAtlasConfig {\n  // null out some fields that don't matter\n  const clonedColors: IColorSet = {\n    foreground: colors.foreground,\n    background: colors.background,\n    cursor: NULL_COLOR,\n    cursorAccent: NULL_COLOR,\n    selectionForeground: NULL_COLOR,\n    selectionBackgroundTransparent: NULL_COLOR,\n    selectionBackgroundOpaque: NULL_COLOR,\n    selectionInactiveBackgroundTransparent: NULL_COLOR,\n    selectionInactiveBackgroundOpaque: NULL_COLOR,\n    // For the static char atlas, we only use the first 16 colors, but we need all 256 for the\n    // dynamic character atlas.\n    ansi: colors.ansi.slice(),\n    contrastCache: colors.contrastCache\n  };\n  return {\n    customGlyphs: terminal.options.customGlyphs,\n    devicePixelRatio: window.devicePixelRatio,\n    letterSpacing: terminal.options.letterSpacing,\n    lineHeight: terminal.options.lineHeight,\n    scaledCellWidth,\n    scaledCellHeight,\n    scaledCharWidth,\n    scaledCharHeight,\n    fontFamily: terminal.options.fontFamily,\n    fontSize: terminal.options.fontSize,\n    fontWeight: terminal.options.fontWeight,\n    fontWeightBold: terminal.options.fontWeightBold,\n    allowTransparency: terminal.options.allowTransparency,\n    drawBoldTextInBrightColors: terminal.options.drawBoldTextInBrightColors,\n    minimumContrastRatio: terminal.options.minimumContrastRatio,\n    colors: clonedColors\n  };\n}\n\nexport function configEquals(a: ICharAtlasConfig, b: ICharAtlasConfig): boolean {\n  for (let i = 0; i < a.colors.ansi.length; i++) {\n    if (a.colors.ansi[i].rgba !== b.colors.ansi[i].rgba) {\n      return false;\n    }\n  }\n  return a.devicePixelRatio === b.devicePixelRatio &&\n      a.customGlyphs === b.customGlyphs &&\n      a.lineHeight === b.lineHeight &&\n      a.letterSpacing === b.letterSpacing &&\n      a.fontFamily === b.fontFamily &&\n      a.fontSize === b.fontSize &&\n      a.fontWeight === b.fontWeight &&\n      a.fontWeightBold === b.fontWeightBold &&\n      a.allowTransparency === b.allowTransparency &&\n      a.scaledCharWidth === b.scaledCharWidth &&\n      a.scaledCharHeight === b.scaledCharHeight &&\n      a.drawBoldTextInBrightColors === b.drawBoldTextInBrightColors &&\n      a.minimumContrastRatio === b.minimumContrastRatio &&\n      a.colors.foreground === b.colors.foreground &&\n      a.colors.background === b.colors.background;\n}\n\nexport function is256Color(colorCode: number): boolean {\n  return (colorCode & Attributes.CM_MASK) === Attributes.CM_P16 || (colorCode & Attributes.CM_MASK) === Attributes.CM_P256;\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICharAtlasConfig } from './Types';\nimport { DIM_OPACITY, TEXT_BASELINE } from 'browser/renderer/Constants';\nimport { IRasterizedGlyph, IBoundingBox } from '../Types';\nimport { DEFAULT_COLOR, Attributes, DEFAULT_EXT, UnderlineStyle } from 'common/buffer/Constants';\nimport { throwIfFalsy } from '../WebglUtils';\nimport { IColor } from 'common/Types';\nimport { IDisposable } from 'xterm';\nimport { AttributeData } from 'common/buffer/AttributeData';\nimport { color, rgba } from 'common/Color';\nimport { tryDrawCustomChar } from 'browser/renderer/CustomGlyphs';\nimport { excludeFromContrastRatioDemands, isPowerlineGlyph, isRestrictedPowerlineGlyph } from 'browser/renderer/RendererUtils';\nimport { IUnicodeService } from 'common/services/Services';\nimport { FourKeyMap } from 'common/MultiKeyMap';\n\n// For debugging purposes, it can be useful to set this to a really tiny value,\n// to verify that LRU eviction works.\nconst TEXTURE_WIDTH = 1024;\nconst TEXTURE_HEIGHT = 1024;\n\n/**\n * The amount of the texture to be filled before throwing it away and starting\n * again. Since the throw away and individual glyph draws don't cost too much,\n * this prevent juggling multiple textures in the GL context.\n */\nconst TEXTURE_CAPACITY = Math.floor(TEXTURE_HEIGHT * 0.8);\n\nconst TRANSPARENT_COLOR = {\n  css: 'rgba(0, 0, 0, 0)',\n  rgba: 0\n};\n\n/**\n * A shared object which is used to draw nothing for a particular cell.\n */\nconst NULL_RASTERIZED_GLYPH: IRasterizedGlyph = {\n  offset: { x: 0, y: 0 },\n  texturePosition: { x: 0, y: 0 },\n  texturePositionClipSpace: { x: 0, y: 0 },\n  size: { x: 0, y: 0 },\n  sizeClipSpace: { x: 0, y: 0 }\n};\n\nconst TMP_CANVAS_GLYPH_PADDING = 2;\n\ninterface ICharAtlasActiveRow {\n  x: number;\n  y: number;\n  height: number;\n}\n\n/** Work variables to avoid garbage collection. */\nconst w: { glyph: IRasterizedGlyph | undefined } = {\n  glyph: undefined\n};\n\nexport class WebglCharAtlas implements IDisposable {\n  private _didWarmUp: boolean = false;\n\n  private _cacheMap: FourKeyMap<number, number, number, number, IRasterizedGlyph> = new FourKeyMap();\n  private _cacheMapCombined: FourKeyMap<string, number, number, number, IRasterizedGlyph> = new FourKeyMap();\n\n  // The texture that the atlas is drawn to\n  public cacheCanvas: HTMLCanvasElement;\n  private _cacheCtx: CanvasRenderingContext2D;\n\n  private _tmpCanvas: HTMLCanvasElement;\n  // A temporary context that glyphs are drawn to before being transfered to the atlas.\n  private _tmpCtx: CanvasRenderingContext2D;\n\n  // Texture atlas current positioning data. The texture packing strategy used is to fill from\n  // left-to-right and top-to-bottom. When the glyph being written is less than half of the current\n  // row's height, the following happens:\n  //\n  // - The current row becomes the fixed height row A\n  // - A new fixed height row B the exact size of the glyph is created below the current row\n  // - A new dynamic height current row is created below B\n  //\n  // This strategy does a good job preventing space being wasted for very short glyphs such as\n  // underscores, hyphens etc. or those with underlines rendered.\n  private _currentRow: ICharAtlasActiveRow = {\n    x: 0,\n    y: 0,\n    height: 0\n  };\n  private readonly _fixedRows: ICharAtlasActiveRow[] = [];\n\n  public hasCanvasChanged = false;\n\n  private _workBoundingBox: IBoundingBox = { top: 0, left: 0, bottom: 0, right: 0 };\n  private _workAttributeData: AttributeData = new AttributeData();\n\n  constructor(\n    document: Document,\n    private readonly _config: ICharAtlasConfig,\n    private readonly _unicodeService: IUnicodeService\n  ) {\n    this.cacheCanvas = document.createElement('canvas');\n    this.cacheCanvas.width = TEXTURE_WIDTH;\n    this.cacheCanvas.height = TEXTURE_HEIGHT;\n    // The canvas needs alpha because we use clearColor to convert the background color to alpha.\n    // It might also contain some characters with transparent backgrounds if allowTransparency is\n    // set.\n    this._cacheCtx = throwIfFalsy(this.cacheCanvas.getContext('2d', { alpha: true }));\n\n    this._tmpCanvas = document.createElement('canvas');\n    this._tmpCanvas.width = this._config.scaledCellWidth * 4 + TMP_CANVAS_GLYPH_PADDING * 2;\n    this._tmpCanvas.height = this._config.scaledCellHeight + TMP_CANVAS_GLYPH_PADDING * 2;\n    this._tmpCtx = throwIfFalsy(this._tmpCanvas.getContext('2d', { alpha: this._config.allowTransparency }));\n  }\n\n  public dispose(): void {\n    if (this.cacheCanvas.parentElement) {\n      this.cacheCanvas.parentElement.removeChild(this.cacheCanvas);\n    }\n  }\n\n  public warmUp(): void {\n    if (!this._didWarmUp) {\n      this._doWarmUp();\n      this._didWarmUp = true;\n    }\n  }\n\n  private _doWarmUp(): void {\n    // Pre-fill with ASCII 33-126\n    for (let i = 33; i < 126; i++) {\n      const rasterizedGlyph = this._drawToCache(i, DEFAULT_COLOR, DEFAULT_COLOR, DEFAULT_EXT);\n      this._cacheMap.set(i, DEFAULT_COLOR, DEFAULT_COLOR, DEFAULT_EXT, rasterizedGlyph);\n    }\n  }\n\n  public beginFrame(): boolean {\n    if (this._currentRow.y > TEXTURE_CAPACITY) {\n      this.clearTexture();\n      this.warmUp();\n      return true;\n    }\n    return false;\n  }\n\n  public clearTexture(): void {\n    if (this._currentRow.x === 0 && this._currentRow.y === 0) {\n      return;\n    }\n    this._cacheCtx.clearRect(0, 0, TEXTURE_WIDTH, TEXTURE_HEIGHT);\n    this._cacheMap.clear();\n    this._cacheMapCombined.clear();\n    this._currentRow.x = 0;\n    this._currentRow.y = 0;\n    this._currentRow.height = 0;\n    this._fixedRows.length = 0;\n    this._didWarmUp = false;\n  }\n\n  public getRasterizedGlyphCombinedChar(chars: string, bg: number, fg: number, ext: number): IRasterizedGlyph {\n    return this._getFromCacheMap(this._cacheMapCombined, chars, bg, fg, ext);\n  }\n\n  public getRasterizedGlyph(code: number, bg: number, fg: number, ext: number): IRasterizedGlyph {\n    return this._getFromCacheMap(this._cacheMap, code, bg, fg, ext);\n  }\n\n  /**\n   * Gets the glyphs texture coords, drawing the texture if it's not already\n   */\n  private _getFromCacheMap(\n    cacheMap: FourKeyMap<string | number, number, number, number, IRasterizedGlyph>,\n    key: string | number,\n    bg: number,\n    fg: number,\n    ext: number\n  ): IRasterizedGlyph {\n    w.glyph = cacheMap.get(key, bg, fg, ext);\n    if (!w.glyph) {\n      w.glyph = this._drawToCache(key, bg, fg, ext);\n      cacheMap.set(key, bg, fg, ext, w.glyph);\n    }\n    return w.glyph;\n  }\n\n  private _getColorFromAnsiIndex(idx: number): IColor {\n    if (idx >= this._config.colors.ansi.length) {\n      throw new Error('No color found for idx ' + idx);\n    }\n    return this._config.colors.ansi[idx];\n  }\n\n  private _getBackgroundColor(bgColorMode: number, bgColor: number, inverse: boolean, dim: boolean): IColor {\n    if (this._config.allowTransparency) {\n      // The background color might have some transparency, so we need to render it as fully\n      // transparent in the atlas. Otherwise we'd end up drawing the transparent background twice\n      // around the anti-aliased edges of the glyph, and it would look too dark.\n      return TRANSPARENT_COLOR;\n    }\n\n    let result: IColor;\n    switch (bgColorMode) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:\n        result = this._getColorFromAnsiIndex(bgColor);\n        break;\n      case Attributes.CM_RGB:\n        const arr = AttributeData.toColorRGB(bgColor);\n        // TODO: This object creation is slow\n        result = rgba.toColor(arr[0], arr[1], arr[2]);\n        break;\n      case Attributes.CM_DEFAULT:\n      default:\n        if (inverse) {\n          result = this._config.colors.foreground;\n        } else {\n          result = this._config.colors.background;\n        }\n        break;\n    }\n\n    if (dim) {\n      // Blend here instead of using opacity because transparent colors mess with clipping the\n      // glyph's bounding box\n      result = color.blend(this._config.colors.background, color.multiplyOpacity(result, DIM_OPACITY));\n    }\n\n    return result;\n  }\n\n  private _getForegroundColor(bg: number, bgColorMode: number, bgColor: number, fg: number, fgColorMode: number, fgColor: number, inverse: boolean, dim: boolean, bold: boolean, excludeFromContrastRatioDemands: boolean): IColor {\n    // TODO: Pass dim along to get min contrast?\n    const minimumContrastColor = this._getMinimumContrastColor(bg, bgColorMode, bgColor, fg, fgColorMode, fgColor, false, bold, excludeFromContrastRatioDemands);\n    if (minimumContrastColor) {\n      return minimumContrastColor;\n    }\n\n    let result: IColor;\n    switch (fgColorMode) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:\n        if (this._config.drawBoldTextInBrightColors && bold && fgColor < 8) {\n          fgColor += 8;\n        }\n        result = this._getColorFromAnsiIndex(fgColor);\n        break;\n      case Attributes.CM_RGB:\n        const arr = AttributeData.toColorRGB(fgColor);\n        result = rgba.toColor(arr[0], arr[1], arr[2]);\n        break;\n      case Attributes.CM_DEFAULT:\n      default:\n        if (inverse) {\n          result = this._config.colors.background;\n        } else {\n          result = this._config.colors.foreground;\n        }\n    }\n\n    // Always use an opaque color regardless of allowTransparency\n    if (this._config.allowTransparency) {\n      result = color.opaque(result);\n    }\n\n    // Apply dim to the color, opacity is fine to use for the foreground color\n    if (dim) {\n      result = color.multiplyOpacity(result, DIM_OPACITY);\n    }\n\n    return result;\n  }\n\n  private _resolveBackgroundRgba(bgColorMode: number, bgColor: number, inverse: boolean): number {\n    switch (bgColorMode) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:\n        return this._getColorFromAnsiIndex(bgColor).rgba;\n      case Attributes.CM_RGB:\n        return bgColor << 8;\n      case Attributes.CM_DEFAULT:\n      default:\n        if (inverse) {\n          return this._config.colors.foreground.rgba;\n        }\n        return this._config.colors.background.rgba;\n    }\n  }\n\n  private _resolveForegroundRgba(fgColorMode: number, fgColor: number, inverse: boolean, bold: boolean): number {\n    switch (fgColorMode) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:\n        if (this._config.drawBoldTextInBrightColors && bold && fgColor < 8) {\n          fgColor += 8;\n        }\n        return this._getColorFromAnsiIndex(fgColor).rgba;\n      case Attributes.CM_RGB:\n        return fgColor << 8;\n      case Attributes.CM_DEFAULT:\n      default:\n        if (inverse) {\n          return this._config.colors.background.rgba;\n        }\n        return this._config.colors.foreground.rgba;\n    }\n  }\n\n  private _getMinimumContrastColor(bg: number, bgColorMode: number, bgColor: number, fg: number, fgColorMode: number, fgColor: number, inverse: boolean, bold: boolean, excludeFromContrastRatioDemands: boolean): IColor | undefined {\n    if (this._config.minimumContrastRatio === 1 || excludeFromContrastRatioDemands) {\n      return undefined;\n    }\n\n    // Try get from cache first\n    const adjustedColor = this._config.colors.contrastCache.getColor(bg, fg);\n    if (adjustedColor !== undefined) {\n      return adjustedColor || undefined;\n    }\n\n    const bgRgba = this._resolveBackgroundRgba(bgColorMode, bgColor, inverse);\n    const fgRgba = this._resolveForegroundRgba(fgColorMode, fgColor, inverse, bold);\n    const result = rgba.ensureContrastRatio(bgRgba, fgRgba, this._config.minimumContrastRatio);\n\n    if (!result) {\n      this._config.colors.contrastCache.setColor(bg, fg, null);\n      return undefined;\n    }\n\n    const color = rgba.toColor(\n      (result >> 24) & 0xFF,\n      (result >> 16) & 0xFF,\n      (result >> 8) & 0xFF\n    );\n    this._config.colors.contrastCache.setColor(bg, fg, color);\n\n    return color;\n  }\n\n  private _drawToCache(codeOrChars: number | string, bg: number, fg: number, ext: number): IRasterizedGlyph {\n    const chars = typeof codeOrChars === 'number' ? String.fromCharCode(codeOrChars) : codeOrChars;\n\n    this.hasCanvasChanged = true;\n\n    // Allow 1 cell width per character, with a minimum of 2 (CJK), plus some padding. This is used\n    // to draw the glyph to the canvas as well as to restrict the bounding box search to ensure\n    // giant ligatures (eg. =====>) don't impact overall performance.\n    const allowedWidth = this._config.scaledCellWidth * Math.max(chars.length, 2) + TMP_CANVAS_GLYPH_PADDING * 2;\n    if (this._tmpCanvas.width < allowedWidth) {\n      this._tmpCanvas.width = allowedWidth;\n    }\n    // Include line height when drawing glyphs\n    const allowedHeight = this._config.scaledCellHeight + TMP_CANVAS_GLYPH_PADDING * 4;\n    if (this._tmpCanvas.height < allowedHeight) {\n      this._tmpCanvas.height = allowedHeight;\n    }\n    this._tmpCtx.save();\n\n    this._workAttributeData.fg = fg;\n    this._workAttributeData.bg = bg;\n    this._workAttributeData.extended.ext = ext;\n\n    const invisible = !!this._workAttributeData.isInvisible();\n    if (invisible) {\n      return NULL_RASTERIZED_GLYPH;\n    }\n\n    const bold = !!this._workAttributeData.isBold();\n    const inverse = !!this._workAttributeData.isInverse();\n    const dim = !!this._workAttributeData.isDim();\n    const italic = !!this._workAttributeData.isItalic();\n    const underline = !!this._workAttributeData.isUnderline();\n    const strikethrough = !!this._workAttributeData.isStrikethrough();\n    let fgColor = this._workAttributeData.getFgColor();\n    let fgColorMode = this._workAttributeData.getFgColorMode();\n    let bgColor = this._workAttributeData.getBgColor();\n    let bgColorMode = this._workAttributeData.getBgColorMode();\n    if (inverse) {\n      const temp = fgColor;\n      fgColor = bgColor;\n      bgColor = temp;\n      const temp2 = fgColorMode;\n      fgColorMode = bgColorMode;\n      bgColorMode = temp2;\n    }\n\n    // draw the background\n    const backgroundColor = this._getBackgroundColor(bgColorMode, bgColor, inverse, dim);\n    // Use a 'copy' composite operation to clear any existing glyph out of _tmpCtxWithAlpha, regardless of\n    // transparency in backgroundColor\n    this._tmpCtx.globalCompositeOperation = 'copy';\n    this._tmpCtx.fillStyle = backgroundColor.css;\n    this._tmpCtx.fillRect(0, 0, this._tmpCanvas.width, this._tmpCanvas.height);\n    this._tmpCtx.globalCompositeOperation = 'source-over';\n\n    // draw the foreground/glyph\n    const fontWeight = bold ? this._config.fontWeightBold : this._config.fontWeight;\n    const fontStyle = italic ? 'italic' : '';\n    this._tmpCtx.font =\n      `${fontStyle} ${fontWeight} ${this._config.fontSize * this._config.devicePixelRatio}px ${this._config.fontFamily}`;\n    this._tmpCtx.textBaseline = TEXT_BASELINE;\n\n    const powerlineGlyph = chars.length === 1 && isPowerlineGlyph(chars.charCodeAt(0));\n    const restrictedPowerlineGlyph = chars.length === 1 && isRestrictedPowerlineGlyph(chars.charCodeAt(0));\n    const foregroundColor = this._getForegroundColor(bg, bgColorMode, bgColor, fg, fgColorMode, fgColor, inverse, dim, bold, excludeFromContrastRatioDemands(chars.charCodeAt(0)));\n    this._tmpCtx.fillStyle = foregroundColor.css;\n\n    // For powerline glyphs left/top padding is excluded (https://github.com/microsoft/vscode/issues/120129)\n    const padding = restrictedPowerlineGlyph ? 0 : TMP_CANVAS_GLYPH_PADDING * 2;\n\n    // Draw custom characters if applicable\n    let customGlyph = false;\n    if (this._config.customGlyphs !== false) {\n      customGlyph = tryDrawCustomChar(this._tmpCtx, chars, padding, padding, this._config.scaledCellWidth, this._config.scaledCellHeight, this._config.fontSize);\n    }\n\n    // Whether to clear pixels based on a threshold difference between the glyph color and the\n    // background color. This should be disabled when the glyph contains multiple colors such as\n    // underline colors to prevent important colors could get cleared.\n    let enableClearThresholdCheck = !powerlineGlyph;\n\n    let chWidth: number;\n    if (typeof codeOrChars === 'number') {\n      chWidth = this._unicodeService.wcwidth(codeOrChars);\n    } else {\n      chWidth = this._unicodeService.getStringCellWidth(codeOrChars);\n    }\n\n    // Draw underline\n    if (underline) {\n      this._tmpCtx.save();\n      const lineWidth = Math.max(1, Math.floor(this._config.fontSize * window.devicePixelRatio / 15));\n      // When the line width is odd, draw at a 0.5 position\n      const yOffset = lineWidth % 2 === 1 ? 0.5 : 0;\n      this._tmpCtx.lineWidth = lineWidth;\n\n      // Underline color\n      if (this._workAttributeData.isUnderlineColorDefault()) {\n        this._tmpCtx.strokeStyle = this._tmpCtx.fillStyle;\n      } else if (this._workAttributeData.isUnderlineColorRGB()) {\n        enableClearThresholdCheck = false;\n        this._tmpCtx.strokeStyle = `rgb(${AttributeData.toColorRGB(this._workAttributeData.getUnderlineColor()).join(',')})`;\n      } else {\n        enableClearThresholdCheck = false;\n        let fg = this._workAttributeData.getUnderlineColor();\n        if (this._config.drawBoldTextInBrightColors && this._workAttributeData.isBold() && fg < 8) {\n          fg += 8;\n        }\n        this._tmpCtx.strokeStyle = this._getColorFromAnsiIndex(fg).css;\n      }\n\n      // Underline style/stroke\n      this._tmpCtx.beginPath();\n      const xLeft = padding;\n      const yTop = Math.ceil(padding + this._config.scaledCharHeight) - yOffset;\n      const yMid = padding + this._config.scaledCharHeight + lineWidth - yOffset;\n      const yBot = Math.ceil(padding + this._config.scaledCharHeight + lineWidth * 2) - yOffset;\n\n      for (let i = 0; i < chWidth; i++) {\n        this._tmpCtx.save();\n        const xChLeft = xLeft + i * this._config.scaledCellWidth;\n        const xChRight = xLeft + (i + 1) * this._config.scaledCellWidth;\n        const xChMid = xChLeft + this._config.scaledCellWidth / 2;\n        switch (this._workAttributeData.extended.underlineStyle) {\n          case UnderlineStyle.DOUBLE:\n            this._tmpCtx.moveTo(xChLeft, yTop);\n            this._tmpCtx.lineTo(xChRight, yTop);\n            this._tmpCtx.moveTo(xChLeft, yBot);\n            this._tmpCtx.lineTo(xChRight, yBot);\n            break;\n          case UnderlineStyle.CURLY:\n            // Choose the bezier top and bottom based on the device pixel ratio, the curly line is\n            // made taller when the line width is  as otherwise it's not very clear otherwise.\n            const yCurlyBot = lineWidth <= 1 ? yBot : Math.ceil(padding + this._config.scaledCharHeight - lineWidth / 2) - yOffset;\n            const yCurlyTop = lineWidth <= 1 ? yTop : Math.ceil(padding + this._config.scaledCharHeight + lineWidth / 2) - yOffset;\n            // Clip the left and right edges of the underline such that it can be drawn just outside\n            // the edge of the cell to ensure a continuous stroke when there are multiple underlined\n            // glyphs adjacent to one another.\n            const clipRegion = new Path2D();\n            clipRegion.rect(xChLeft, yTop, this._config.scaledCellWidth, yBot - yTop);\n            this._tmpCtx.clip(clipRegion);\n            // Start 1/2 cell before and end 1/2 cells after to ensure a smooth curve with other cells\n            this._tmpCtx.moveTo(xChLeft - this._config.scaledCellWidth / 2, yMid);\n            this._tmpCtx.bezierCurveTo(\n              xChLeft - this._config.scaledCellWidth / 2, yCurlyTop,\n              xChLeft, yCurlyTop,\n              xChLeft, yMid\n            );\n            this._tmpCtx.bezierCurveTo(\n              xChLeft, yCurlyBot,\n              xChMid, yCurlyBot,\n              xChMid, yMid\n            );\n            this._tmpCtx.bezierCurveTo(\n              xChMid, yCurlyTop,\n              xChRight, yCurlyTop,\n              xChRight, yMid\n            );\n            this._tmpCtx.bezierCurveTo(\n              xChRight, yCurlyBot,\n              xChRight + this._config.scaledCellWidth / 2, yCurlyBot,\n              xChRight + this._config.scaledCellWidth / 2, yMid\n            );\n            break;\n          case UnderlineStyle.DOTTED:\n            this._tmpCtx.setLineDash([window.devicePixelRatio * 2, window.devicePixelRatio]);\n            this._tmpCtx.moveTo(xChLeft, yTop);\n            this._tmpCtx.lineTo(xChRight, yTop);\n            break;\n          case UnderlineStyle.DASHED:\n            this._tmpCtx.setLineDash([window.devicePixelRatio * 4, window.devicePixelRatio * 3]);\n            this._tmpCtx.moveTo(xChLeft, yTop);\n            this._tmpCtx.lineTo(xChRight, yTop);\n            break;\n          case UnderlineStyle.SINGLE:\n          default:\n            this._tmpCtx.moveTo(xChLeft, yTop);\n            this._tmpCtx.lineTo(xChRight, yTop);\n            break;\n        }\n        this._tmpCtx.stroke();\n        this._tmpCtx.restore();\n      }\n      this._tmpCtx.restore();\n\n      // Draw stroke in the background color for non custom characters in order to give an outline\n      // between the text and the underline. Only do this when font size is >= 12 as the underline\n      // looks odd when the font size is too small\n      if (!customGlyph && this._config.fontSize >= 12) {\n        // This only works when transparency is disabled because it's not clear how to clear stroked\n        // text\n        if (!this._config.allowTransparency && chars !== ' ') {\n          // Measure the text, only draw the stroke if there is a descent beyond an alphabetic text\n          // baseline\n          this._tmpCtx.save();\n          this._tmpCtx.textBaseline = 'alphabetic';\n          const metrics = this._tmpCtx.measureText(chars);\n          this._tmpCtx.restore();\n          if ('actualBoundingBoxDescent' in metrics && metrics.actualBoundingBoxDescent > 0) {\n            // This translates to 1/2 the line width in either direction\n            this._tmpCtx.save();\n            // Clip the region to only draw in valid pixels near the underline to avoid a slight\n            // outline around the whole glyph, as well as additional pixels in the glyph at the top\n            // which would increase GPU memory demands\n            const clipRegion = new Path2D();\n            clipRegion.rect(xLeft, yTop - Math.ceil(lineWidth / 2), this._config.scaledCellWidth, yBot - yTop + Math.ceil(lineWidth / 2));\n            this._tmpCtx.clip(clipRegion);\n            this._tmpCtx.lineWidth = window.devicePixelRatio * 3;\n            this._tmpCtx.strokeStyle = backgroundColor.css;\n            this._tmpCtx.strokeText(chars, padding, padding + this._config.scaledCharHeight);\n            this._tmpCtx.restore();\n          }\n        }\n      }\n    }\n\n    // Draw the character\n    if (!customGlyph) {\n      this._tmpCtx.fillText(chars, padding, padding + this._config.scaledCharHeight);\n    }\n\n    // If this charcater is underscore and beyond the cell bounds, shift it up until it is visible\n    // even on the bottom row, try for a maximum of 5 pixels.\n    if (chars === '_' && !this._config.allowTransparency) {\n      let isBeyondCellBounds = clearColor(this._tmpCtx.getImageData(padding, padding, this._config.scaledCellWidth, this._config.scaledCellHeight), backgroundColor, foregroundColor, enableClearThresholdCheck);\n      if (isBeyondCellBounds) {\n        for (let offset = 1; offset <= 5; offset++) {\n          this._tmpCtx.save();\n          this._tmpCtx.fillStyle = backgroundColor.css;\n          this._tmpCtx.fillRect(0, 0, this._tmpCanvas.width, this._tmpCanvas.height);\n          this._tmpCtx.restore();\n          this._tmpCtx.fillText(chars, padding, padding + this._config.scaledCharHeight - offset);\n          isBeyondCellBounds = clearColor(this._tmpCtx.getImageData(padding, padding, this._config.scaledCellWidth, this._config.scaledCellHeight), backgroundColor, foregroundColor, enableClearThresholdCheck);\n          if (!isBeyondCellBounds) {\n            break;\n          }\n        }\n      }\n    }\n\n    // Draw strokethrough\n    if (strikethrough) {\n      const lineWidth = Math.max(1, Math.floor(this._config.fontSize * window.devicePixelRatio / 10));\n      const yOffset = this._tmpCtx.lineWidth % 2 === 1 ? 0.5 : 0; // When the width is odd, draw at 0.5 position\n      this._tmpCtx.lineWidth = lineWidth;\n      this._tmpCtx.strokeStyle = this._tmpCtx.fillStyle;\n      this._tmpCtx.beginPath();\n      this._tmpCtx.moveTo(padding, padding + Math.floor(this._config.scaledCharHeight / 2) - yOffset);\n      this._tmpCtx.lineTo(padding + this._config.scaledCharWidth * chWidth, padding + Math.floor(this._config.scaledCharHeight / 2) - yOffset);\n      this._tmpCtx.stroke();\n    }\n\n    this._tmpCtx.restore();\n\n    // clear the background from the character to avoid issues with drawing over the previous\n    // character if it extends past it's bounds\n    const imageData = this._tmpCtx.getImageData(\n      0, 0, this._tmpCanvas.width, this._tmpCanvas.height\n    );\n\n    // Clear out the background color and determine if the glyph is empty.\n    let isEmpty: boolean;\n    if (!this._config.allowTransparency) {\n      isEmpty = clearColor(imageData, backgroundColor, foregroundColor, enableClearThresholdCheck);\n    } else {\n      isEmpty = checkCompletelyTransparent(imageData);\n    }\n\n    // Handle empty glyphs\n    if (isEmpty) {\n      return NULL_RASTERIZED_GLYPH;\n    }\n\n    const rasterizedGlyph = this._findGlyphBoundingBox(imageData, this._workBoundingBox, allowedWidth, restrictedPowerlineGlyph, customGlyph, padding);\n    const clippedImageData = this._clipImageData(imageData, this._workBoundingBox);\n\n    // Find the best atlas row to use\n    let activeRow: ICharAtlasActiveRow;\n    while (true) {\n      // Select the ideal existing row, preferring fixed rows over the current row\n      activeRow = this._currentRow;\n      for (const row of this._fixedRows) {\n        if ((activeRow === this._currentRow || row.height < activeRow.height) && rasterizedGlyph.size.y <= row.height) {\n          activeRow = row;\n        }\n      }\n\n      // Create a new one if vertical space would be wasted, fixing the previously active row in the\n      // process as it now has a fixed height\n      if (activeRow.height > rasterizedGlyph.size.y * 2) {\n        // Fix the current row as the new row is being added below\n        if (this._currentRow.height > 0) {\n          this._fixedRows.push(this._currentRow);\n        }\n\n        // Create the new fixed height row\n        activeRow = {\n          x: 0,\n          y: this._currentRow.y + this._currentRow.height,\n          height: rasterizedGlyph.size.y\n        };\n        this._fixedRows.push(activeRow);\n\n        // Create the new current row below the new fixed height row\n        this._currentRow = {\n          x: 0,\n          y: activeRow.y + activeRow.height,\n          height: 0\n        };\n      }\n\n      // Exit the loop if there is enough room in the row\n      if (activeRow.x + rasterizedGlyph.size.x <= TEXTURE_WIDTH) {\n        break;\n      }\n\n      // If there is enough room in the current row, finish it and try again\n      if (activeRow === this._currentRow) {\n        activeRow.x = 0;\n        activeRow.y += activeRow.height;\n        activeRow.height = 0;\n      } else {\n        this._fixedRows.splice(this._fixedRows.indexOf(activeRow), 1);\n      }\n    }\n\n    // Record texture position\n    rasterizedGlyph.texturePosition.x = activeRow.x;\n    rasterizedGlyph.texturePosition.y = activeRow.y;\n    rasterizedGlyph.texturePositionClipSpace.x = activeRow.x / TEXTURE_WIDTH;\n    rasterizedGlyph.texturePositionClipSpace.y = activeRow.y / TEXTURE_HEIGHT;\n\n    // Update atlas current row, for fixed rows the glyph height will never be larger than the row\n    // height\n    activeRow.height = Math.max(activeRow.height, rasterizedGlyph.size.y);\n    activeRow.x += rasterizedGlyph.size.x;\n\n    // putImageData doesn't do any blending, so it will overwrite any existing cache entry for us\n    this._cacheCtx.putImageData(clippedImageData, rasterizedGlyph.texturePosition.x, rasterizedGlyph.texturePosition.y);\n\n    return rasterizedGlyph;\n  }\n\n  /**\n   * Given an ImageData object, find the bounding box of the non-transparent\n   * portion of the texture and return an IRasterizedGlyph with these\n   * dimensions.\n   * @param imageData The image data to read.\n   * @param boundingBox An IBoundingBox to put the clipped bounding box values.\n   */\n  private _findGlyphBoundingBox(imageData: ImageData, boundingBox: IBoundingBox, allowedWidth: number, restrictedGlyph: boolean, customGlyph: boolean, padding: number): IRasterizedGlyph {\n    boundingBox.top = 0;\n    const height = restrictedGlyph ? this._config.scaledCellHeight : this._tmpCanvas.height;\n    const width = restrictedGlyph ? this._config.scaledCellWidth : allowedWidth;\n    let found = false;\n    for (let y = 0; y < height; y++) {\n      for (let x = 0; x < width; x++) {\n        const alphaOffset = y * this._tmpCanvas.width * 4 + x * 4 + 3;\n        if (imageData.data[alphaOffset] !== 0) {\n          boundingBox.top = y;\n          found = true;\n          break;\n        }\n      }\n      if (found) {\n        break;\n      }\n    }\n    boundingBox.left = 0;\n    found = false;\n    for (let x = 0; x < width; x++) {\n      for (let y = 0; y < height; y++) {\n        const alphaOffset = y * this._tmpCanvas.width * 4 + x * 4 + 3;\n        if (imageData.data[alphaOffset] !== 0) {\n          boundingBox.left = x;\n          found = true;\n          break;\n        }\n      }\n      if (found) {\n        break;\n      }\n    }\n    boundingBox.right = width;\n    found = false;\n    for (let x = width - 1; x >= 0; x--) {\n      for (let y = 0; y < height; y++) {\n        const alphaOffset = y * this._tmpCanvas.width * 4 + x * 4 + 3;\n        if (imageData.data[alphaOffset] !== 0) {\n          boundingBox.right = x;\n          found = true;\n          break;\n        }\n      }\n      if (found) {\n        break;\n      }\n    }\n    boundingBox.bottom = height;\n    found = false;\n    for (let y = height - 1; y >= 0; y--) {\n      for (let x = 0; x < width; x++) {\n        const alphaOffset = y * this._tmpCanvas.width * 4 + x * 4 + 3;\n        if (imageData.data[alphaOffset] !== 0) {\n          boundingBox.bottom = y;\n          found = true;\n          break;\n        }\n      }\n      if (found) {\n        break;\n      }\n    }\n    return {\n      texturePosition: { x: 0, y: 0 },\n      texturePositionClipSpace: { x: 0, y: 0 },\n      size: {\n        x: boundingBox.right - boundingBox.left + 1,\n        y: boundingBox.bottom - boundingBox.top + 1\n      },\n      sizeClipSpace: {\n        x: (boundingBox.right - boundingBox.left + 1) / TEXTURE_WIDTH,\n        y: (boundingBox.bottom - boundingBox.top + 1) / TEXTURE_HEIGHT\n      },\n      offset: {\n        x: -boundingBox.left + padding + ((restrictedGlyph || customGlyph) ? Math.floor((this._config.scaledCellWidth - this._config.scaledCharWidth) / 2) : 0),\n        y: -boundingBox.top + padding + ((restrictedGlyph || customGlyph) ? this._config.lineHeight === 1 ? 0 : Math.round((this._config.scaledCellHeight - this._config.scaledCharHeight) / 2) : 0)\n      }\n    };\n  }\n\n  private _clipImageData(imageData: ImageData, boundingBox: IBoundingBox): ImageData {\n    const width = boundingBox.right - boundingBox.left + 1;\n    const height = boundingBox.bottom - boundingBox.top + 1;\n    const clippedData = new Uint8ClampedArray(width * height * 4);\n    for (let y = boundingBox.top; y <= boundingBox.bottom; y++) {\n      for (let x = boundingBox.left; x <= boundingBox.right; x++) {\n        const oldOffset = y * this._tmpCanvas.width * 4 + x * 4;\n        const newOffset = (y - boundingBox.top) * width * 4 + (x - boundingBox.left) * 4;\n        clippedData[newOffset] = imageData.data[oldOffset];\n        clippedData[newOffset + 1] = imageData.data[oldOffset + 1];\n        clippedData[newOffset + 2] = imageData.data[oldOffset + 2];\n        clippedData[newOffset + 3] = imageData.data[oldOffset + 3];\n      }\n    }\n    return new ImageData(clippedData, width, height);\n  }\n}\n\n/**\n * Makes a particular rgb color and colors that are nearly the same in an ImageData completely\n * transparent.\n * @returns True if the result is \"empty\", meaning all pixels are fully transparent.\n */\nfunction clearColor(imageData: ImageData, bg: IColor, fg: IColor, enableThresholdCheck: boolean): boolean {\n  // Get color channels\n  const r = bg.rgba >>> 24;\n  const g = bg.rgba >>> 16 & 0xFF;\n  const b = bg.rgba >>> 8 & 0xFF;\n  const fgR = fg.rgba >>> 24;\n  const fgG = fg.rgba >>> 16 & 0xFF;\n  const fgB = fg.rgba >>> 8 & 0xFF;\n\n  // Calculate a threshold that when below a color will be treated as transpart when the sum of\n  // channel value differs. This helps improve rendering when glyphs overlap with others. This\n  // threshold is calculated relative to the difference between the background and foreground to\n  // ensure important details of the glyph are always shown, even when the contrast ratio is low.\n  // The number 12 is largely arbitrary to ensure the pixels that escape the cell in the test case\n  // were covered (fg=#8ae234, bg=#c4a000).\n  const threshold = Math.floor((Math.abs(r - fgR) + Math.abs(g - fgG) + Math.abs(b - fgB)) / 12);\n\n  // Set alpha channel of relevent pixels to 0\n  let isEmpty = true;\n  for (let offset = 0; offset < imageData.data.length; offset += 4) {\n    // Check exact match\n    if (imageData.data[offset] === r &&\n        imageData.data[offset + 1] === g &&\n        imageData.data[offset + 2] === b) {\n      imageData.data[offset + 3] = 0;\n    } else {\n      // Check the threshold based difference\n      if (enableThresholdCheck &&\n          (Math.abs(imageData.data[offset] - r) +\n          Math.abs(imageData.data[offset + 1] - g) +\n          Math.abs(imageData.data[offset + 2] - b)) < threshold) {\n        imageData.data[offset + 3] = 0;\n      } else {\n        isEmpty = false;\n      }\n    }\n  }\n\n  return isEmpty;\n}\n\nfunction checkCompletelyTransparent(imageData: ImageData): boolean {\n  for (let offset = 0; offset < imageData.data.length; offset += 4) {\n    if (imageData.data[offset + 3] > 0) {\n      return false;\n    }\n  }\n  return true;\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IRenderLayer } from './Types';\nimport { acquireCharAtlas } from '../atlas/CharAtlasCache';\nimport { Terminal } from 'xterm';\nimport { IColorSet } from 'browser/Types';\nimport { TEXT_BASELINE } from 'browser/renderer/Constants';\nimport { IRenderDimensions } from 'browser/renderer/Types';\nimport { CellData } from 'common/buffer/CellData';\nimport { WebglCharAtlas } from 'atlas/WebglCharAtlas';\nimport { throwIfFalsy } from '../WebglUtils';\n\nexport abstract class BaseRenderLayer implements IRenderLayer {\n  private _canvas: HTMLCanvasElement;\n  protected _ctx!: CanvasRenderingContext2D;\n  private _scaledCharWidth: number = 0;\n  private _scaledCharHeight: number = 0;\n  private _scaledCellWidth: number = 0;\n  private _scaledCellHeight: number = 0;\n  private _scaledCharLeft: number = 0;\n  private _scaledCharTop: number = 0;\n\n  protected _charAtlas: WebglCharAtlas | undefined;\n\n  constructor(\n    private _container: HTMLElement,\n    id: string,\n    zIndex: number,\n    private _alpha: boolean,\n    protected _colors: IColorSet\n  ) {\n    this._canvas = document.createElement('canvas');\n    this._canvas.classList.add(`xterm-${id}-layer`);\n    this._canvas.style.zIndex = zIndex.toString();\n    this._initCanvas();\n    this._container.appendChild(this._canvas);\n  }\n\n  public dispose(): void {\n    this._canvas.remove();\n    if (this._charAtlas) {\n      this._charAtlas.dispose();\n    }\n  }\n\n  private _initCanvas(): void {\n    this._ctx = throwIfFalsy(this._canvas.getContext('2d', { alpha: this._alpha }));\n    // Draw the background if this is an opaque layer\n    if (!this._alpha) {\n      this._clearAll();\n    }\n  }\n\n  public onOptionsChanged(terminal: Terminal): void {}\n  public onBlur(terminal: Terminal): void {}\n  public onFocus(terminal: Terminal): void {}\n  public onCursorMove(terminal: Terminal): void {}\n  public onGridChanged(terminal: Terminal, startRow: number, endRow: number): void {}\n  public onSelectionChanged(terminal: Terminal, start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean = false): void {}\n\n  public setColors(terminal: Terminal, colorSet: IColorSet): void {\n    this._refreshCharAtlas(terminal, colorSet);\n  }\n\n  protected _setTransparency(terminal: Terminal, alpha: boolean): void {\n    // Do nothing when alpha doesn't change\n    if (alpha === this._alpha) {\n      return;\n    }\n\n    // Create new canvas and replace old one\n    const oldCanvas = this._canvas;\n    this._alpha = alpha;\n    // Cloning preserves properties\n    this._canvas = this._canvas.cloneNode() as HTMLCanvasElement;\n    this._initCanvas();\n    this._container.replaceChild(this._canvas, oldCanvas);\n\n    // Regenerate char atlas and force a full redraw\n    this._refreshCharAtlas(terminal, this._colors);\n    this.onGridChanged(terminal, 0, terminal.rows - 1);\n  }\n\n  /**\n   * Refreshes the char atlas, aquiring a new one if necessary.\n   * @param terminal The terminal.\n   * @param colorSet The color set to use for the char atlas.\n   */\n  private _refreshCharAtlas(terminal: Terminal, colorSet: IColorSet): void {\n    if (this._scaledCharWidth <= 0 && this._scaledCharHeight <= 0) {\n      return;\n    }\n    this._charAtlas = acquireCharAtlas(terminal, colorSet, this._scaledCellWidth, this._scaledCellHeight, this._scaledCharWidth, this._scaledCharHeight);\n    this._charAtlas.warmUp();\n  }\n\n  public resize(terminal: Terminal, dim: IRenderDimensions): void {\n    this._scaledCellWidth = dim.scaledCellWidth;\n    this._scaledCellHeight = dim.scaledCellHeight;\n    this._scaledCharWidth = dim.scaledCharWidth;\n    this._scaledCharHeight = dim.scaledCharHeight;\n    this._scaledCharLeft = dim.scaledCharLeft;\n    this._scaledCharTop = dim.scaledCharTop;\n    this._canvas.width = dim.scaledCanvasWidth;\n    this._canvas.height = dim.scaledCanvasHeight;\n    this._canvas.style.width = `${dim.canvasWidth}px`;\n    this._canvas.style.height = `${dim.canvasHeight}px`;\n\n    // Draw the background if this is an opaque layer\n    if (!this._alpha) {\n      this._clearAll();\n    }\n\n    this._refreshCharAtlas(terminal, this._colors);\n  }\n\n  public abstract reset(terminal: Terminal): void;\n\n  /**\n   * Fills 1+ cells completely. This uses the existing fillStyle on the context.\n   * @param x The column to start at.\n   * @param y The row to start at\n   * @param width The number of columns to fill.\n   * @param height The number of rows to fill.\n   */\n  protected _fillCells(x: number, y: number, width: number, height: number): void {\n    this._ctx.fillRect(\n      x * this._scaledCellWidth,\n      y * this._scaledCellHeight,\n      width * this._scaledCellWidth,\n      height * this._scaledCellHeight);\n  }\n\n  /**\n   * Fills a 1px line (2px on HDPI) at the bottom of the cell. This uses the\n   * existing fillStyle on the context.\n   * @param x The column to fill.\n   * @param y The row to fill.\n   */\n  protected _fillBottomLineAtCells(x: number, y: number, width: number = 1): void {\n    this._ctx.fillRect(\n      x * this._scaledCellWidth,\n      (y + 1) * this._scaledCellHeight - window.devicePixelRatio - 1 /* Ensure it's drawn within the cell */,\n      width * this._scaledCellWidth,\n      window.devicePixelRatio);\n  }\n\n  /**\n   * Fills a 1px line (2px on HDPI) at the left of the cell. This uses the\n   * existing fillStyle on the context.\n   * @param x The column to fill.\n   * @param y The row to fill.\n   */\n  protected _fillLeftLineAtCell(x: number, y: number, width: number): void {\n    this._ctx.fillRect(\n      x * this._scaledCellWidth,\n      y * this._scaledCellHeight,\n      window.devicePixelRatio * width,\n      this._scaledCellHeight);\n  }\n\n  /**\n   * Strokes a 1px rectangle (2px on HDPI) around a cell. This uses the existing\n   * strokeStyle on the context.\n   * @param x The column to fill.\n   * @param y The row to fill.\n   */\n  protected _strokeRectAtCell(x: number, y: number, width: number, height: number): void {\n    this._ctx.lineWidth = window.devicePixelRatio;\n    this._ctx.strokeRect(\n      x * this._scaledCellWidth + window.devicePixelRatio / 2,\n      y * this._scaledCellHeight + (window.devicePixelRatio / 2),\n      width * this._scaledCellWidth - window.devicePixelRatio,\n      (height * this._scaledCellHeight) - window.devicePixelRatio);\n  }\n\n  /**\n   * Clears the entire canvas.\n   */\n  protected _clearAll(): void {\n    if (this._alpha) {\n      this._ctx.clearRect(0, 0, this._canvas.width, this._canvas.height);\n    } else {\n      this._ctx.fillStyle = this._colors.background.css;\n      this._ctx.fillRect(0, 0, this._canvas.width, this._canvas.height);\n    }\n  }\n\n  /**\n   * Clears 1+ cells completely.\n   * @param x The column to start at.\n   * @param y The row to start at.\n   * @param width The number of columns to clear.\n   * @param height The number of rows to clear.\n   */\n  protected _clearCells(x: number, y: number, width: number, height: number): void {\n    if (this._alpha) {\n      this._ctx.clearRect(\n        x * this._scaledCellWidth,\n        y * this._scaledCellHeight,\n        width * this._scaledCellWidth,\n        height * this._scaledCellHeight);\n    } else {\n      this._ctx.fillStyle = this._colors.background.css;\n      this._ctx.fillRect(\n        x * this._scaledCellWidth,\n        y * this._scaledCellHeight,\n        width * this._scaledCellWidth,\n        height * this._scaledCellHeight);\n    }\n  }\n\n  /**\n   * Draws a truecolor character at the cell. The character will be clipped to\n   * ensure that it fits with the cell, including the cell to the right if it's\n   * a wide character. This uses the existing fillStyle on the context.\n   * @param terminal The terminal.\n   * @param cell The cell data for the character to draw.\n   * @param x The column to draw at.\n   * @param y The row to draw at.\n   * @param color The color of the character.\n   */\n  protected _fillCharTrueColor(terminal: Terminal, cell: CellData, x: number, y: number): void {\n    this._ctx.font = this._getFont(terminal, false, false);\n    this._ctx.textBaseline = TEXT_BASELINE;\n    this._clipRow(terminal, y);\n    this._ctx.fillText(\n      cell.getChars(),\n      x * this._scaledCellWidth + this._scaledCharLeft,\n      y * this._scaledCellHeight + this._scaledCharTop + this._scaledCharHeight);\n  }\n\n  /**\n   * Clips a row to ensure no pixels will be drawn outside the cells in the row.\n   * @param terminal The terminal.\n   * @param y The row to clip.\n   */\n  private _clipRow(terminal: Terminal, y: number): void {\n    this._ctx.beginPath();\n    this._ctx.rect(\n      0,\n      y * this._scaledCellHeight,\n      terminal.cols * this._scaledCellWidth,\n      this._scaledCellHeight);\n    this._ctx.clip();\n  }\n\n  /**\n   * Gets the current font.\n   * @param terminal The terminal.\n   * @param isBold If we should use the bold fontWeight.\n   */\n  protected _getFont(terminal: Terminal, isBold: boolean, isItalic: boolean): string {\n    const fontWeight = isBold ? terminal.options.fontWeightBold : terminal.options.fontWeight;\n    const fontStyle = isItalic ? 'italic' : '';\n\n    return `${fontStyle} ${fontWeight} ${terminal.options.fontSize! * window.devicePixelRatio}px ${terminal.options.fontFamily}`;\n  }\n}\n\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { Terminal } from 'xterm';\nimport { BaseRenderLayer } from './BaseRenderLayer';\nimport { ICellData } from 'common/Types';\nimport { CellData } from 'common/buffer/CellData';\nimport { IColorSet } from 'browser/Types';\nimport { IRenderDimensions, IRequestRedrawEvent } from 'browser/renderer/Types';\nimport { IEventEmitter } from 'common/EventEmitter';\nimport { ICoreBrowserService } from 'browser/services/Services';\nimport { ICoreService } from 'common/services/Services';\n\ninterface ICursorState {\n  x: number;\n  y: number;\n  isFocused: boolean;\n  style: string;\n  width: number;\n}\n\n/**\n * The time between cursor blinks.\n */\nconst BLINK_INTERVAL = 600;\n\nexport class CursorRenderLayer extends BaseRenderLayer {\n  private _state: ICursorState;\n  private _cursorRenderers: {[key: string]: (terminal: Terminal, x: number, y: number, cell: ICellData) => void};\n  private _cursorBlinkStateManager: CursorBlinkStateManager | undefined;\n  private _cell: ICellData = new CellData();\n\n  constructor(\n    terminal: Terminal,\n    container: HTMLElement,\n    zIndex: number,\n    colors: IColorSet,\n    private _onRequestRefreshRowsEvent: IEventEmitter<IRequestRedrawEvent>,\n    private readonly _coreBrowserService: ICoreBrowserService,\n    private readonly _coreService: ICoreService\n  ) {\n    super(container, 'cursor', zIndex, true, colors);\n    this._state = {\n      x: 0,\n      y: 0,\n      isFocused: false,\n      style: '',\n      width: 0\n    };\n    this._cursorRenderers = {\n      'bar': this._renderBarCursor.bind(this),\n      'block': this._renderBlockCursor.bind(this),\n      'underline': this._renderUnderlineCursor.bind(this)\n    };\n    this.onOptionsChanged(terminal);\n  }\n\n  public override dispose(): void {\n    this._cursorBlinkStateManager?.dispose();\n    this._cursorBlinkStateManager = undefined;\n    super.dispose();\n  }\n\n  public resize(terminal: Terminal, dim: IRenderDimensions): void {\n    super.resize(terminal, dim);\n    // Resizing the canvas discards the contents of the canvas so clear state\n    this._state = {\n      x: 0,\n      y: 0,\n      isFocused: false,\n      style: '',\n      width: 0\n    };\n  }\n\n  public reset(terminal: Terminal): void {\n    this._clearCursor();\n    this._cursorBlinkStateManager?.restartBlinkAnimation(terminal);\n    this.onOptionsChanged(terminal);\n  }\n\n  public onBlur(terminal: Terminal): void {\n    this._cursorBlinkStateManager?.pause();\n    this._onRequestRefreshRowsEvent.fire({ start: terminal.buffer.active.cursorY, end: terminal.buffer.active.cursorY });\n  }\n\n  public onFocus(terminal: Terminal): void {\n    this._cursorBlinkStateManager?.resume(terminal);\n    this._onRequestRefreshRowsEvent.fire({ start: terminal.buffer.active.cursorY, end: terminal.buffer.active.cursorY });\n  }\n\n  public onOptionsChanged(terminal: Terminal): void {\n    if (terminal.options.cursorBlink) {\n      if (!this._cursorBlinkStateManager) {\n        this._cursorBlinkStateManager = new CursorBlinkStateManager(() => {\n          this._render(terminal, true);\n        }, this._coreBrowserService);\n      }\n    } else {\n      this._cursorBlinkStateManager?.dispose();\n      this._cursorBlinkStateManager = undefined;\n    }\n    // Request a refresh from the terminal as management of rendering is being\n    // moved back to the terminal\n    this._onRequestRefreshRowsEvent.fire({ start: terminal.buffer.active.cursorY, end: terminal.buffer.active.cursorY });\n  }\n\n  public onCursorMove(terminal: Terminal): void {\n    this._cursorBlinkStateManager?.restartBlinkAnimation(terminal);\n  }\n\n  public onGridChanged(terminal: Terminal, startRow: number, endRow: number): void {\n    if (!this._cursorBlinkStateManager || this._cursorBlinkStateManager.isPaused) {\n      this._render(terminal, false);\n    } else {\n      this._cursorBlinkStateManager.restartBlinkAnimation(terminal);\n    }\n  }\n\n  private _render(terminal: Terminal, triggeredByAnimationFrame: boolean): void {\n    // Don't draw the cursor if it's hidden\n    if (!this._coreService.isCursorInitialized || this._coreService.isCursorHidden) {\n      this._clearCursor();\n      return;\n    }\n\n    const cursorY = terminal.buffer.active.baseY + terminal.buffer.active.cursorY;\n    const viewportRelativeCursorY = cursorY - terminal.buffer.active.viewportY;\n\n    // in case cursor.x == cols adjust visual cursor to cols - 1\n    const cursorX = Math.min(terminal.buffer.active.cursorX, terminal.cols - 1);\n\n    // Don't draw the cursor if it's off-screen\n    if (viewportRelativeCursorY < 0 || viewportRelativeCursorY >= terminal.rows) {\n      this._clearCursor();\n      return;\n    }\n\n    // TODO: Need fast buffer API for loading cell\n    (terminal as any)._core.buffer.lines.get(cursorY).loadCell(cursorX, this._cell);\n    if (this._cell.content === undefined) {\n      return;\n    }\n\n    if (!this._coreBrowserService.isFocused) {\n      this._clearCursor();\n      this._ctx.save();\n      this._ctx.fillStyle = this._colors.cursor.css;\n      const cursorStyle = terminal.options.cursorStyle;\n      if (cursorStyle && cursorStyle !== 'block') {\n        this._cursorRenderers[cursorStyle](terminal, cursorX, viewportRelativeCursorY, this._cell);\n      } else {\n        this._renderBlurCursor(terminal, cursorX, viewportRelativeCursorY, this._cell);\n      }\n      this._ctx.restore();\n      this._state.x = cursorX;\n      this._state.y = viewportRelativeCursorY;\n      this._state.isFocused = false;\n      this._state.style = cursorStyle!;\n      this._state.width = this._cell.getWidth();\n      return;\n    }\n\n    // Don't draw the cursor if it's blinking\n    if (this._cursorBlinkStateManager && !this._cursorBlinkStateManager.isCursorVisible) {\n      this._clearCursor();\n      return;\n    }\n\n    if (this._state) {\n      // The cursor is already in the correct spot, don't redraw\n      if (this._state.x === cursorX &&\n          this._state.y === viewportRelativeCursorY &&\n          this._state.isFocused === this._coreBrowserService.isFocused &&\n          this._state.style === terminal.options.cursorStyle &&\n          this._state.width === this._cell.getWidth()) {\n        return;\n      }\n      this._clearCursor();\n    }\n\n    this._ctx.save();\n    this._cursorRenderers[terminal.options.cursorStyle || 'block'](terminal, cursorX, viewportRelativeCursorY, this._cell);\n    this._ctx.restore();\n\n    this._state.x = cursorX;\n    this._state.y = viewportRelativeCursorY;\n    this._state.isFocused = false;\n    this._state.style = terminal.options.cursorStyle!;\n    this._state.width = this._cell.getWidth();\n  }\n\n  private _clearCursor(): void {\n    if (this._state) {\n      // Avoid potential rounding errors when device pixel ratio is less than 1\n      if (window.devicePixelRatio < 1) {\n        this._clearAll();\n      } else {\n        this._clearCells(this._state.x, this._state.y, this._state.width, 1);\n      }\n      this._state = {\n        x: 0,\n        y: 0,\n        isFocused: false,\n        style: '',\n        width: 0\n      };\n    }\n  }\n\n  private _renderBarCursor(terminal: Terminal, x: number, y: number, cell: ICellData): void {\n    this._ctx.save();\n    this._ctx.fillStyle = this._colors.cursor.css;\n    this._fillLeftLineAtCell(x, y, terminal.options.cursorWidth);\n    this._ctx.restore();\n  }\n\n  private _renderBlockCursor(terminal: Terminal, x: number, y: number, cell: ICellData): void {\n    this._ctx.save();\n    this._ctx.fillStyle = this._colors.cursor.css;\n    this._fillCells(x, y, cell.getWidth(), 1);\n    this._ctx.fillStyle = this._colors.cursorAccent.css;\n    this._fillCharTrueColor(terminal, cell, x, y);\n    this._ctx.restore();\n  }\n\n  private _renderUnderlineCursor(terminal: Terminal, x: number, y: number, cell: ICellData): void {\n    this._ctx.save();\n    this._ctx.fillStyle = this._colors.cursor.css;\n    this._fillBottomLineAtCells(x, y);\n    this._ctx.restore();\n  }\n\n  private _renderBlurCursor(terminal: Terminal, x: number, y: number, cell: ICellData): void {\n    this._ctx.save();\n    this._ctx.strokeStyle = this._colors.cursor.css;\n    this._strokeRectAtCell(x, y, cell.getWidth(), 1);\n    this._ctx.restore();\n  }\n}\n\nclass CursorBlinkStateManager {\n  public isCursorVisible: boolean;\n\n  private _animationFrame: number | undefined;\n  private _blinkStartTimeout: number | undefined;\n  private _blinkInterval: number | undefined;\n\n  /**\n   * The time at which the animation frame was restarted, this is used on the\n   * next render to restart the timers so they don't need to restart the timers\n   * multiple times over a short period.\n   */\n  private _animationTimeRestarted: number | undefined;\n\n  constructor(\n    private _renderCallback: () => void,\n    coreBrowserService: ICoreBrowserService\n  ) {\n    this.isCursorVisible = true;\n    if (coreBrowserService.isFocused) {\n      this._restartInterval();\n    }\n  }\n\n  public get isPaused(): boolean { return !(this._blinkStartTimeout || this._blinkInterval); }\n\n  public dispose(): void {\n    if (this._blinkInterval) {\n      window.clearInterval(this._blinkInterval);\n      this._blinkInterval = undefined;\n    }\n    if (this._blinkStartTimeout) {\n      window.clearTimeout(this._blinkStartTimeout);\n      this._blinkStartTimeout = undefined;\n    }\n    if (this._animationFrame) {\n      window.cancelAnimationFrame(this._animationFrame);\n      this._animationFrame = undefined;\n    }\n  }\n\n  public restartBlinkAnimation(terminal: Terminal): void {\n    if (this.isPaused) {\n      return;\n    }\n    // Save a timestamp so that the restart can be done on the next interval\n    this._animationTimeRestarted = Date.now();\n    // Force a cursor render to ensure it's visible and in the correct position\n    this.isCursorVisible = true;\n    if (!this._animationFrame) {\n      this._animationFrame = window.requestAnimationFrame(() => {\n        this._renderCallback();\n        this._animationFrame = undefined;\n      });\n    }\n  }\n\n  private _restartInterval(timeToStart: number = BLINK_INTERVAL): void {\n    // Clear any existing interval\n    if (this._blinkInterval) {\n      window.clearInterval(this._blinkInterval);\n      this._blinkInterval = undefined;\n    }\n\n    // Setup the initial timeout which will hide the cursor, this is done before\n    // the regular interval is setup in order to support restarting the blink\n    // animation in a lightweight way (without thrashing clearInterval and\n    // setInterval).\n    this._blinkStartTimeout = window.setTimeout(() => {\n      // Check if another animation restart was requested while this was being\n      // started\n      if (this._animationTimeRestarted) {\n        const time = BLINK_INTERVAL - (Date.now() - this._animationTimeRestarted);\n        this._animationTimeRestarted = undefined;\n        if (time > 0) {\n          this._restartInterval(time);\n          return;\n        }\n      }\n\n      // Hide the cursor\n      this.isCursorVisible = false;\n      this._animationFrame = window.requestAnimationFrame(() => {\n        this._renderCallback();\n        this._animationFrame = undefined;\n      });\n\n      // Setup the blink interval\n      this._blinkInterval = window.setInterval(() => {\n        // Adjust the animation time if it was restarted\n        if (this._animationTimeRestarted) {\n          // calc time diff\n          // Make restart interval do a setTimeout initially?\n          const time = BLINK_INTERVAL - (Date.now() - this._animationTimeRestarted);\n          this._animationTimeRestarted = undefined;\n          this._restartInterval(time);\n          return;\n        }\n\n        // Invert visibility and render\n        this.isCursorVisible = !this.isCursorVisible;\n        this._animationFrame = window.requestAnimationFrame(() => {\n          this._renderCallback();\n          this._animationFrame = undefined;\n        });\n      }, BLINK_INTERVAL);\n    }, timeToStart);\n  }\n\n  public pause(): void {\n    this.isCursorVisible = true;\n    if (this._blinkInterval) {\n      window.clearInterval(this._blinkInterval);\n      this._blinkInterval = undefined;\n    }\n    if (this._blinkStartTimeout) {\n      window.clearTimeout(this._blinkStartTimeout);\n      this._blinkStartTimeout = undefined;\n    }\n    if (this._animationFrame) {\n      window.cancelAnimationFrame(this._animationFrame);\n      this._animationFrame = undefined;\n    }\n  }\n\n  public resume(terminal: Terminal): void {\n    // Clear out any existing timers just in case\n    this.pause();\n\n    this._animationTimeRestarted = undefined;\n    this._restartInterval();\n    this.restartBlinkAnimation(terminal);\n  }\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { Terminal } from 'xterm';\nimport { BaseRenderLayer } from './BaseRenderLayer';\nimport { INVERTED_DEFAULT_COLOR } from 'browser/renderer/Constants';\nimport { is256Color } from '../atlas/CharAtlasUtils';\nimport { ITerminal, IColorSet, ILinkifierEvent } from 'browser/Types';\nimport { IRenderDimensions } from 'browser/renderer/Types';\n\nexport class LinkRenderLayer extends BaseRenderLayer {\n  private _state: ILinkifierEvent | undefined;\n\n  constructor(container: HTMLElement, zIndex: number, colors: IColorSet, terminal: ITerminal) {\n    super(container, 'link', zIndex, true, colors);\n\n    terminal.linkifier2.onShowLinkUnderline(e => this._onShowLinkUnderline(e));\n    terminal.linkifier2.onHideLinkUnderline(e => this._onHideLinkUnderline(e));\n  }\n\n  public resize(terminal: Terminal, dim: IRenderDimensions): void {\n    super.resize(terminal, dim);\n    // Resizing the canvas discards the contents of the canvas so clear state\n    this._state = undefined;\n  }\n\n  public reset(terminal: Terminal): void {\n    this._clearCurrentLink();\n  }\n\n  private _clearCurrentLink(): void {\n    if (this._state) {\n      this._clearCells(this._state.x1, this._state.y1, this._state.cols - this._state.x1, 1);\n      const middleRowCount = this._state.y2 - this._state.y1 - 1;\n      if (middleRowCount > 0) {\n        this._clearCells(0, this._state.y1 + 1, this._state.cols, middleRowCount);\n      }\n      this._clearCells(0, this._state.y2, this._state.x2, 1);\n      this._state = undefined;\n    }\n  }\n\n  private _onShowLinkUnderline(e: ILinkifierEvent): void {\n    if (e.fg === INVERTED_DEFAULT_COLOR) {\n      this._ctx.fillStyle = this._colors.background.css;\n    } else if (e.fg !== undefined && is256Color(e.fg)) {\n      // 256 color support\n      this._ctx.fillStyle = this._colors.ansi[e.fg!].css;\n    } else {\n      this._ctx.fillStyle = this._colors.foreground.css;\n    }\n\n    if (e.y1 === e.y2) {\n      // Single line link\n      this._fillBottomLineAtCells(e.x1, e.y1, e.x2 - e.x1);\n    } else {\n      // Multi-line link\n      this._fillBottomLineAtCells(e.x1, e.y1, e.cols - e.x1);\n      for (let y = e.y1 + 1; y < e.y2; y++) {\n        this._fillBottomLineAtCells(0, y, e.cols);\n      }\n      this._fillBottomLineAtCells(0, e.y2, e.x2);\n    }\n    this._state = e;\n  }\n\n  private _onHideLinkUnderline(e: ILinkifierEvent): void {\n    this._clearCurrentLink();\n  }\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDisposable } from 'common/Types';\n\n/**\n * Adds a disposable listener to a node in the DOM, returning the disposable.\n * @param type The event type.\n * @param handler The handler for the listener.\n */\nexport function addDisposableDomListener(\n  node: Element | Window | Document,\n  type: string,\n  handler: (e: any) => void,\n  options?: boolean | AddEventListenerOptions\n): IDisposable {\n  node.addEventListener(type, handler, options);\n  let disposed = false;\n  return {\n    dispose: () => {\n      if (disposed) {\n        return;\n      }\n      disposed = true;\n      node.removeEventListener(type, handler, options);\n    }\n  };\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { isFirefox, isLegacyEdge } from 'common/Platform';\n\nexport const INVERTED_DEFAULT_COLOR = 257;\n\nexport const DIM_OPACITY = 0.5;\n// The text baseline is set conditionally by browser. Using 'ideographic' for Firefox or Legacy Edge would\n// result in truncated text (Issue 3353). Using 'bottom' for Chrome would result in slightly\n// unaligned Powerline fonts (PR 3356#issuecomment-850928179).\nexport const TEXT_BASELINE: CanvasTextBaseline = isFirefox || isLegacyEdge ? 'bottom' : 'ideographic';\n","/**\n * Copyright (c) 2021 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { throwIfFalsy } from 'browser/renderer/RendererUtils';\n\ninterface IBlockVector {\n  x: number;\n  y: number;\n  w: number;\n  h: number;\n}\n\nexport const blockElementDefinitions: { [index: string]: IBlockVector[] | undefined } = {\n  // Block elements (0x2580-0x2590)\n  '▀': [{ x: 0, y: 0, w: 8, h: 4 }], // UPPER HALF BLOCK\n  '▁': [{ x: 0, y: 7, w: 8, h: 1 }], // LOWER ONE EIGHTH BLOCK\n  '▂': [{ x: 0, y: 6, w: 8, h: 2 }], // LOWER ONE QUARTER BLOCK\n  '▃': [{ x: 0, y: 5, w: 8, h: 3 }], // LOWER THREE EIGHTHS BLOCK\n  '▄': [{ x: 0, y: 4, w: 8, h: 4 }], // LOWER HALF BLOCK\n  '▅': [{ x: 0, y: 3, w: 8, h: 5 }], // LOWER FIVE EIGHTHS BLOCK\n  '▆': [{ x: 0, y: 2, w: 8, h: 6 }], // LOWER THREE QUARTERS BLOCK\n  '▇': [{ x: 0, y: 1, w: 8, h: 7 }], // LOWER SEVEN EIGHTHS BLOCK\n  '█': [{ x: 0, y: 0, w: 8, h: 8 }], // FULL BLOCK\n  '▉': [{ x: 0, y: 0, w: 7, h: 8 }], // LEFT SEVEN EIGHTHS BLOCK\n  '▊': [{ x: 0, y: 0, w: 6, h: 8 }], // LEFT THREE QUARTERS BLOCK\n  '▋': [{ x: 0, y: 0, w: 5, h: 8 }], // LEFT FIVE EIGHTHS BLOCK\n  '▌': [{ x: 0, y: 0, w: 4, h: 8 }], // LEFT HALF BLOCK\n  '▍': [{ x: 0, y: 0, w: 3, h: 8 }], // LEFT THREE EIGHTHS BLOCK\n  '▎': [{ x: 0, y: 0, w: 2, h: 8 }], // LEFT ONE QUARTER BLOCK\n  '▏': [{ x: 0, y: 0, w: 1, h: 8 }], // LEFT ONE EIGHTH BLOCK\n  '▐': [{ x: 4, y: 0, w: 4, h: 8 }], // RIGHT HALF BLOCK\n\n  // Block elements (0x2594-0x2595)\n  '▔': [{ x: 0, y: 0, w: 9, h: 1 }], // UPPER ONE EIGHTH BLOCK\n  '▕': [{ x: 7, y: 0, w: 1, h: 8 }], // RIGHT ONE EIGHTH BLOCK\n\n  // Terminal graphic characters (0x2596-0x259F)\n  '▖': [{ x: 0, y: 4, w: 4, h: 4 }],                             // QUADRANT LOWER LEFT\n  '▗': [{ x: 4, y: 4, w: 4, h: 4 }],                             // QUADRANT LOWER RIGHT\n  '▘': [{ x: 0, y: 0, w: 4, h: 4 }],                             // QUADRANT UPPER LEFT\n  '▙': [{ x: 0, y: 0, w: 4, h: 8 }, { x: 0, y: 4, w: 8, h: 4 }], // QUADRANT UPPER LEFT AND LOWER LEFT AND LOWER RIGHT\n  '▚': [{ x: 0, y: 0, w: 4, h: 4 }, { x: 4, y: 4, w: 4, h: 4 }], // QUADRANT UPPER LEFT AND LOWER RIGHT\n  '▛': [{ x: 0, y: 0, w: 4, h: 8 }, { x: 4, y: 0, w: 4, h: 4 }], // QUADRANT UPPER LEFT AND UPPER RIGHT AND LOWER LEFT\n  '▜': [{ x: 0, y: 0, w: 8, h: 4 }, { x: 4, y: 0, w: 4, h: 8 }], // QUADRANT UPPER LEFT AND UPPER RIGHT AND LOWER RIGHT\n  '▝': [{ x: 4, y: 0, w: 4, h: 4 }],                             // QUADRANT UPPER RIGHT\n  '▞': [{ x: 4, y: 0, w: 4, h: 4 }, { x: 0, y: 4, w: 4, h: 4 }], // QUADRANT UPPER RIGHT AND LOWER LEFT\n  '▟': [{ x: 4, y: 0, w: 4, h: 8 }, { x: 0, y: 4, w: 8, h: 4 }], // QUADRANT UPPER RIGHT AND LOWER LEFT AND LOWER RIGHT\n\n  // VERTICAL ONE EIGHTH BLOCK-2 through VERTICAL ONE EIGHTH BLOCK-7\n  '\\u{1FB70}': [{ x: 1, y: 0, w: 1, h: 8 }],\n  '\\u{1FB71}': [{ x: 2, y: 0, w: 1, h: 8 }],\n  '\\u{1FB72}': [{ x: 3, y: 0, w: 1, h: 8 }],\n  '\\u{1FB73}': [{ x: 4, y: 0, w: 1, h: 8 }],\n  '\\u{1FB74}': [{ x: 5, y: 0, w: 1, h: 8 }],\n  '\\u{1FB75}': [{ x: 6, y: 0, w: 1, h: 8 }],\n\n  // HORIZONTAL ONE EIGHTH BLOCK-2 through HORIZONTAL ONE EIGHTH BLOCK-7\n  '\\u{1FB76}': [{ x: 0, y: 1, w: 8, h: 1 }],\n  '\\u{1FB77}': [{ x: 0, y: 2, w: 8, h: 1 }],\n  '\\u{1FB78}': [{ x: 0, y: 3, w: 8, h: 1 }],\n  '\\u{1FB79}': [{ x: 0, y: 4, w: 8, h: 1 }],\n  '\\u{1FB7A}': [{ x: 0, y: 5, w: 8, h: 1 }],\n  '\\u{1FB7B}': [{ x: 0, y: 6, w: 8, h: 1 }],\n\n  // LEFT AND LOWER ONE EIGHTH BLOCK\n  '\\u{1FB7C}': [{ x: 0, y: 0, w: 1, h: 8 }, { x: 0, y: 7, w: 8, h: 1 }],\n  // LEFT AND UPPER ONE EIGHTH BLOCK\n  '\\u{1FB7D}': [{ x: 0, y: 0, w: 1, h: 8 }, { x: 0, y: 0, w: 8, h: 1 }],\n  // RIGHT AND UPPER ONE EIGHTH BLOCK\n  '\\u{1FB7E}': [{ x: 7, y: 0, w: 1, h: 8 }, { x: 0, y: 0, w: 8, h: 1 }],\n  // RIGHT AND LOWER ONE EIGHTH BLOCK\n  '\\u{1FB7F}': [{ x: 7, y: 0, w: 1, h: 8 }, { x: 0, y: 7, w: 8, h: 1 }],\n  // UPPER AND LOWER ONE EIGHTH BLOCK\n  '\\u{1FB80}': [{ x: 0, y: 0, w: 8, h: 1 }, { x: 0, y: 7, w: 8, h: 1 }],\n  // HORIZONTAL ONE EIGHTH BLOCK-1358\n  '\\u{1FB81}': [{ x: 0, y: 0, w: 8, h: 1 }, { x: 0, y: 2, w: 8, h: 1 }, { x: 0, y: 4, w: 8, h: 1 }, { x: 0, y: 7, w: 8, h: 1 }],\n\n  // UPPER ONE QUARTER BLOCK\n  '\\u{1FB82}': [{ x: 0, y: 0, w: 8, h: 2 }],\n  // UPPER THREE EIGHTHS BLOCK\n  '\\u{1FB83}': [{ x: 0, y: 0, w: 8, h: 3 }],\n  // UPPER FIVE EIGHTHS BLOCK\n  '\\u{1FB84}': [{ x: 0, y: 0, w: 8, h: 5 }],\n  // UPPER THREE QUARTERS BLOCK\n  '\\u{1FB85}': [{ x: 0, y: 0, w: 8, h: 6 }],\n  // UPPER SEVEN EIGHTHS BLOCK\n  '\\u{1FB86}': [{ x: 0, y: 0, w: 8, h: 7 }],\n\n  // RIGHT ONE QUARTER BLOCK\n  '\\u{1FB87}': [{ x: 6, y: 0, w: 2, h: 8 }],\n  // RIGHT THREE EIGHTHS B0OCK\n  '\\u{1FB88}': [{ x: 5, y: 0, w: 3, h: 8 }],\n  // RIGHT FIVE EIGHTHS BL0CK\n  '\\u{1FB89}': [{ x: 3, y: 0, w: 5, h: 8 }],\n  // RIGHT THREE QUARTERS 0LOCK\n  '\\u{1FB8A}': [{ x: 2, y: 0, w: 6, h: 8 }],\n  // RIGHT SEVEN EIGHTHS B0OCK\n  '\\u{1FB8B}': [{ x: 1, y: 0, w: 7, h: 8 }],\n\n  // CHECKER BOARD FILL\n  '\\u{1FB95}': [\n    { x: 0, y: 0, w: 2, h: 2 }, { x: 4, y: 0, w: 2, h: 2 },\n    { x: 2, y: 2, w: 2, h: 2 }, { x: 6, y: 2, w: 2, h: 2 },\n    { x: 0, y: 4, w: 2, h: 2 }, { x: 4, y: 4, w: 2, h: 2 },\n    { x: 2, y: 6, w: 2, h: 2 }, { x: 6, y: 6, w: 2, h: 2 }\n  ],\n  // INVERSE CHECKER BOARD FILL\n  '\\u{1FB96}': [\n    { x: 2, y: 0, w: 2, h: 2 }, { x: 6, y: 0, w: 2, h: 2 },\n    { x: 0, y: 2, w: 2, h: 2 }, { x: 4, y: 2, w: 2, h: 2 },\n    { x: 2, y: 4, w: 2, h: 2 }, { x: 6, y: 4, w: 2, h: 2 },\n    { x: 0, y: 6, w: 2, h: 2 }, { x: 4, y: 6, w: 2, h: 2 }\n  ],\n  // HEAVY HORIZONTAL FILL (upper middle and lower one quarter block)\n  '\\u{1FB97}': [{ x: 0, y: 2, w: 8, h: 2 }, { x: 0, y: 6, w: 8, h: 2 }]\n};\n\ntype PatternDefinition = number[][];\n\n/**\n * Defines the repeating pattern used by special characters, the pattern is made up of a 2d array of\n * pixel values to be filled (1) or not filled (0).\n */\nconst patternCharacterDefinitions: { [key: string]: PatternDefinition | undefined } = {\n  // Shade characters (0x2591-0x2593)\n  '░': [ // LIGHT SHADE (25%)\n    [1, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 1, 0],\n    [0, 0, 0, 0]\n  ],\n  '▒': [ // MEDIUM SHADE (50%)\n    [1, 0],\n    [0, 0],\n    [0, 1],\n    [0, 0]\n  ],\n  '▓': [ // DARK SHADE (75%)\n    [0, 1],\n    [1, 1],\n    [1, 0],\n    [1, 1]\n  ]\n};\n\nconst enum Shapes {\n  /** │ */ TOP_TO_BOTTOM = 'M.5,0 L.5,1',\n  /** ─ */ LEFT_TO_RIGHT = 'M0,.5 L1,.5',\n\n  /** └ */ TOP_TO_RIGHT = 'M.5,0 L.5,.5 L1,.5',\n  /** ┘ */ TOP_TO_LEFT = 'M.5,0 L.5,.5 L0,.5',\n  /** ┐ */ LEFT_TO_BOTTOM = 'M0,.5 L.5,.5 L.5,1',\n  /** ┌ */ RIGHT_TO_BOTTOM = 'M0.5,1 L.5,.5 L1,.5',\n\n  /** ╵ */ MIDDLE_TO_TOP = 'M.5,.5 L.5,0',\n  /** ╴ */ MIDDLE_TO_LEFT = 'M.5,.5 L0,.5',\n  /** ╶ */ MIDDLE_TO_RIGHT = 'M.5,.5 L1,.5',\n  /** ╷ */ MIDDLE_TO_BOTTOM = 'M.5,.5 L.5,1',\n\n  /** ┴ */ T_TOP = 'M0,.5 L1,.5 M.5,.5 L.5,0',\n  /** ┤ */ T_LEFT = 'M.5,0 L.5,1 M.5,.5 L0,.5',\n  /** ├ */ T_RIGHT = 'M.5,0 L.5,1 M.5,.5 L1,.5',\n  /** ┬ */ T_BOTTOM = 'M0,.5 L1,.5 M.5,.5 L.5,1',\n\n  /** ┼ */ CROSS = 'M0,.5 L1,.5 M.5,0 L.5,1',\n\n  /** ╌ */ TWO_DASHES_HORIZONTAL = 'M.1,.5 L.4,.5 M.6,.5 L.9,.5', // .2 empty, .3 filled\n  /** ┄ */ THREE_DASHES_HORIZONTAL = 'M.0667,.5 L.2667,.5 M.4,.5 L.6,.5 M.7333,.5 L.9333,.5', // .1333 empty, .2 filled\n  /** ┉ */ FOUR_DASHES_HORIZONTAL = 'M.05,.5 L.2,.5 M.3,.5 L.45,.5 M.55,.5 L.7,.5 M.8,.5 L.95,.5', // .1 empty, .15 filled\n  /** ╎ */ TWO_DASHES_VERTICAL = 'M.5,.1 L.5,.4 M.5,.6 L.5,.9',\n  /** ┆ */ THREE_DASHES_VERTICAL = 'M.5,.0667 L.5,.2667 M.5,.4 L.5,.6 M.5,.7333 L.5,.9333',\n  /** ┊ */ FOUR_DASHES_VERTICAL = 'M.5,.05 L.5,.2 M.5,.3 L.5,.45 L.5,.55 M.5,.7 L.5,.95',\n}\n\nconst enum Style {\n  NORMAL = 1,\n  BOLD = 3\n}\n\n/**\n * @param xp The percentage of 15% of the x axis.\n * @param yp The percentage of 15% of the x axis on the y axis.\n */\ntype DrawFunctionDefinition = (xp: number, yp: number) => string;\n\n/**\n * This contains the definitions of all box drawing characters in the format of SVG paths (ie. the\n * svg d attribute).\n */\nexport const boxDrawingDefinitions: { [character: string]: { [fontWeight: number]: string | DrawFunctionDefinition } | undefined } = {\n  // Uniform normal and bold\n  '─': { [Style.NORMAL]: Shapes.LEFT_TO_RIGHT },\n  '━': { [Style.BOLD]:   Shapes.LEFT_TO_RIGHT },\n  '│': { [Style.NORMAL]: Shapes.TOP_TO_BOTTOM },\n  '┃': { [Style.BOLD]:   Shapes.TOP_TO_BOTTOM },\n  '┌': { [Style.NORMAL]: Shapes.RIGHT_TO_BOTTOM },\n  '┏': { [Style.BOLD]:   Shapes.RIGHT_TO_BOTTOM },\n  '┐': { [Style.NORMAL]: Shapes.LEFT_TO_BOTTOM },\n  '┓': { [Style.BOLD]:   Shapes.LEFT_TO_BOTTOM },\n  '└': { [Style.NORMAL]: Shapes.TOP_TO_RIGHT },\n  '┗': { [Style.BOLD]:   Shapes.TOP_TO_RIGHT },\n  '┘': { [Style.NORMAL]: Shapes.TOP_TO_LEFT },\n  '┛': { [Style.BOLD]:   Shapes.TOP_TO_LEFT },\n  '├': { [Style.NORMAL]: Shapes.T_RIGHT },\n  '┣': { [Style.BOLD]:   Shapes.T_RIGHT },\n  '┤': { [Style.NORMAL]: Shapes.T_LEFT },\n  '┫': { [Style.BOLD]:   Shapes.T_LEFT },\n  '┬': { [Style.NORMAL]: Shapes.T_BOTTOM },\n  '┳': { [Style.BOLD]:   Shapes.T_BOTTOM },\n  '┴': { [Style.NORMAL]: Shapes.T_TOP },\n  '┻': { [Style.BOLD]:   Shapes.T_TOP },\n  '┼': { [Style.NORMAL]: Shapes.CROSS },\n  '╋': { [Style.BOLD]:   Shapes.CROSS },\n  '╴': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT },\n  '╸': { [Style.BOLD]:   Shapes.MIDDLE_TO_LEFT },\n  '╵': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP },\n  '╹': { [Style.BOLD]:   Shapes.MIDDLE_TO_TOP },\n  '╶': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT },\n  '╺': { [Style.BOLD]:   Shapes.MIDDLE_TO_RIGHT },\n  '╷': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM },\n  '╻': { [Style.BOLD]:   Shapes.MIDDLE_TO_BOTTOM },\n\n  // Double border\n  '═': { [Style.NORMAL]: (xp, yp) => `M0,${.5 - yp} L1,${.5 - yp} M0,${.5 + yp} L1,${.5 + yp}` },\n  '║': { [Style.NORMAL]: (xp, yp) => `M${.5 - xp},0 L${.5 - xp},1 M${.5 + xp},0 L${.5 + xp},1` },\n  '╒': { [Style.NORMAL]: (xp, yp) => `M.5,1 L.5,${.5 - yp} L1,${.5 - yp} M.5,${.5 + yp} L1,${.5 + yp}` },\n  '╓': { [Style.NORMAL]: (xp, yp) => `M${.5 - xp},1 L${.5 - xp},.5 L1,.5 M${.5 + xp},.5 L${.5 + xp},1` },\n  '╔': { [Style.NORMAL]: (xp, yp) => `M1,${.5 - yp} L${.5 - xp},${.5 - yp} L${.5 - xp},1 M1,${.5 + yp} L${.5 + xp},${.5 + yp} L${.5 + xp},1` },\n  '╕': { [Style.NORMAL]: (xp, yp) => `M0,${.5 - yp} L.5,${.5 - yp} L.5,1 M0,${.5 + yp} L.5,${.5 + yp}` },\n  '╖': { [Style.NORMAL]: (xp, yp) => `M${.5 + xp},1 L${.5 + xp},.5 L0,.5 M${.5 - xp},.5 L${.5 - xp},1` },\n  '╗': { [Style.NORMAL]: (xp, yp) => `M0,${.5 + yp} L${.5 - xp},${.5 + yp} L${.5 - xp},1 M0,${.5 - yp} L${.5 + xp},${.5 - yp} L${.5 + xp},1` },\n  '╘': { [Style.NORMAL]: (xp, yp) => `M.5,0 L.5,${.5 + yp} L1,${.5 + yp} M.5,${.5 - yp} L1,${.5 - yp}` },\n  '╙': { [Style.NORMAL]: (xp, yp) => `M1,.5 L${.5 - xp},.5 L${.5 - xp},0 M${.5 + xp},.5 L${.5 + xp},0` },\n  '╚': { [Style.NORMAL]: (xp, yp) => `M1,${.5 - yp} L${.5 + xp},${.5 - yp} L${.5 + xp},0 M1,${.5 + yp} L${.5 - xp},${.5 + yp} L${.5 - xp},0` },\n  '╛': { [Style.NORMAL]: (xp, yp) => `M0,${.5 + yp} L.5,${.5 + yp} L.5,0 M0,${.5 - yp} L.5,${.5 - yp}` },\n  '╜': { [Style.NORMAL]: (xp, yp) => `M0,.5 L${.5 + xp},.5 L${.5 + xp},0 M${.5 - xp},.5 L${.5 - xp},0` },\n  '╝': { [Style.NORMAL]: (xp, yp) => `M0,${.5 - yp} L${.5 - xp},${.5 - yp} L${.5 - xp},0 M0,${.5 + yp} L${.5 + xp},${.5 + yp} L${.5 + xp},0` },\n  '╞': { [Style.NORMAL]: (xp, yp) => `${Shapes.TOP_TO_BOTTOM} M.5,${.5 - yp} L1,${.5 - yp} M.5,${.5 + yp} L1,${.5 + yp}` },\n  '╟': { [Style.NORMAL]: (xp, yp) => `M${.5 - xp},0 L${.5 - xp},1 M${.5 + xp},0 L${.5 + xp},1 M${.5 + xp},.5 L1,.5` },\n  '╠': { [Style.NORMAL]: (xp, yp) => `M${.5 - xp},0 L${.5 - xp},1 M1,${.5 + yp} L${.5 + xp},${.5 + yp} L${.5 + xp},1 M1,${.5 - yp} L${.5 + xp},${.5 - yp} L${.5 + xp},0` },\n  '╡': { [Style.NORMAL]: (xp, yp) => `${Shapes.TOP_TO_BOTTOM} M0,${.5 - yp} L.5,${.5 - yp} M0,${.5 + yp} L.5,${.5 + yp}` },\n  '╢': { [Style.NORMAL]: (xp, yp) => `M0,.5 L${.5 - xp},.5 M${.5 - xp},0 L${.5 - xp},1 M${.5 + xp},0 L${.5 + xp},1` },\n  '╣': { [Style.NORMAL]: (xp, yp) => `M${.5 + xp},0 L${.5 + xp},1 M0,${.5 + yp} L${.5 - xp},${.5 + yp} L${.5 - xp},1 M0,${.5 - yp} L${.5 - xp},${.5 - yp} L${.5 - xp},0` },\n  '╤': { [Style.NORMAL]: (xp, yp) => `M0,${.5 - yp} L1,${.5 - yp} M0,${.5 + yp} L1,${.5 + yp} M.5,${.5 + yp} L.5,1` },\n  '╥': { [Style.NORMAL]: (xp, yp) => `${Shapes.LEFT_TO_RIGHT} M${.5 - xp},.5 L${.5 - xp},1 M${.5 + xp},.5 L${.5 + xp},1` },\n  '╦': { [Style.NORMAL]: (xp, yp) => `M0,${.5 - yp} L1,${.5 - yp} M0,${.5 + yp} L${.5 - xp},${.5 + yp} L${.5 - xp},1 M1,${.5 + yp} L${.5 + xp},${.5 + yp} L${.5 + xp},1` },\n  '╧': { [Style.NORMAL]: (xp, yp) => `M.5,0 L.5,${.5 - yp} M0,${.5 - yp} L1,${.5 - yp} M0,${.5 + yp} L1,${.5 + yp}` },\n  '╨': { [Style.NORMAL]: (xp, yp) => `${Shapes.LEFT_TO_RIGHT} M${.5 - xp},.5 L${.5 - xp},0 M${.5 + xp},.5 L${.5 + xp},0` },\n  '╩': { [Style.NORMAL]: (xp, yp) => `M0,${.5 + yp} L1,${.5 + yp} M0,${.5 - yp} L${.5 - xp},${.5 - yp} L${.5 - xp},0 M1,${.5 - yp} L${.5 + xp},${.5 - yp} L${.5 + xp},0` },\n  '╪': { [Style.NORMAL]: (xp, yp) => `${Shapes.TOP_TO_BOTTOM} M0,${.5 - yp} L1,${.5 - yp} M0,${.5 + yp} L1,${.5 + yp}` },\n  '╫': { [Style.NORMAL]: (xp, yp) => `${Shapes.LEFT_TO_RIGHT} M${.5 - xp},0 L${.5 - xp},1 M${.5 + xp},0 L${.5 + xp},1` },\n  '╬': { [Style.NORMAL]: (xp, yp) => `M0,${.5 + yp} L${.5 - xp},${.5 + yp} L${.5 - xp},1 M1,${.5 + yp} L${.5 + xp},${.5 + yp} L${.5 + xp},1 M0,${.5 - yp} L${.5 - xp},${.5 - yp} L${.5 - xp},0 M1,${.5 - yp} L${.5 + xp},${.5 - yp} L${.5 + xp},0` },\n\n  // Diagonal\n  '╱': { [Style.NORMAL]: 'M1,0 L0,1' },\n  '╲': { [Style.NORMAL]: 'M0,0 L1,1' },\n  '╳': { [Style.NORMAL]: 'M1,0 L0,1 M0,0 L1,1' },\n\n  // Mixed weight\n  '╼': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT,                                [Style.BOLD]: Shapes.MIDDLE_TO_RIGHT },\n  '╽': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP,                                 [Style.BOLD]: Shapes.MIDDLE_TO_BOTTOM },\n  '╾': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT,                               [Style.BOLD]: Shapes.MIDDLE_TO_LEFT },\n  '╿': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM,                              [Style.BOLD]: Shapes.MIDDLE_TO_TOP },\n  '┍': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM,                              [Style.BOLD]: Shapes.MIDDLE_TO_RIGHT },\n  '┎': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT,                               [Style.BOLD]: Shapes.MIDDLE_TO_BOTTOM },\n  '┑': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM,                              [Style.BOLD]: Shapes.MIDDLE_TO_LEFT },\n  '┒': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT,                                [Style.BOLD]: Shapes.MIDDLE_TO_BOTTOM },\n  '┕': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP,                                 [Style.BOLD]: Shapes.MIDDLE_TO_RIGHT },\n  '┖': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT,                               [Style.BOLD]: Shapes.MIDDLE_TO_TOP },\n  '┙': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP,                                 [Style.BOLD]: Shapes.MIDDLE_TO_LEFT },\n  '┚': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT,                                [Style.BOLD]: Shapes.MIDDLE_TO_TOP },\n  '┝': { [Style.NORMAL]: Shapes.TOP_TO_BOTTOM,                                 [Style.BOLD]: Shapes.MIDDLE_TO_RIGHT },\n  '┞': { [Style.NORMAL]: Shapes.RIGHT_TO_BOTTOM,                               [Style.BOLD]: Shapes.MIDDLE_TO_TOP },\n  '┟': { [Style.NORMAL]: Shapes.TOP_TO_RIGHT,                                  [Style.BOLD]: Shapes.MIDDLE_TO_BOTTOM },\n  '┠': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT,                               [Style.BOLD]: Shapes.TOP_TO_BOTTOM },\n  '┡': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM,                              [Style.BOLD]: Shapes.TOP_TO_RIGHT },\n  '┢': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP,                                 [Style.BOLD]: Shapes.RIGHT_TO_BOTTOM },\n  '┥': { [Style.NORMAL]: Shapes.TOP_TO_BOTTOM,                                 [Style.BOLD]: Shapes.MIDDLE_TO_LEFT },\n  '┦': { [Style.NORMAL]: Shapes.LEFT_TO_BOTTOM,                                [Style.BOLD]: Shapes.MIDDLE_TO_TOP },\n  '┧': { [Style.NORMAL]: Shapes.TOP_TO_LEFT,                                   [Style.BOLD]: Shapes.MIDDLE_TO_BOTTOM },\n  '┨': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT,                                [Style.BOLD]: Shapes.TOP_TO_BOTTOM },\n  '┩': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM,                              [Style.BOLD]: Shapes.TOP_TO_LEFT },\n  '┪': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP,                                 [Style.BOLD]: Shapes.LEFT_TO_BOTTOM },\n  '┭': { [Style.NORMAL]: Shapes.RIGHT_TO_BOTTOM,                               [Style.BOLD]: Shapes.MIDDLE_TO_LEFT },\n  '┮': { [Style.NORMAL]: Shapes.LEFT_TO_BOTTOM,                                [Style.BOLD]: Shapes.MIDDLE_TO_RIGHT },\n  '┯': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM,                              [Style.BOLD]: Shapes.LEFT_TO_RIGHT },\n  '┰': { [Style.NORMAL]: Shapes.LEFT_TO_RIGHT,                                 [Style.BOLD]: Shapes.MIDDLE_TO_BOTTOM },\n  '┱': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT,                               [Style.BOLD]: Shapes.LEFT_TO_BOTTOM },\n  '┲': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT,                                [Style.BOLD]: Shapes.RIGHT_TO_BOTTOM },\n  '┵': { [Style.NORMAL]: Shapes.TOP_TO_RIGHT,                                  [Style.BOLD]: Shapes.MIDDLE_TO_LEFT },\n  '┶': { [Style.NORMAL]: Shapes.TOP_TO_LEFT,                                   [Style.BOLD]: Shapes.MIDDLE_TO_RIGHT },\n  '┷': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP,                                 [Style.BOLD]: Shapes.LEFT_TO_RIGHT },\n  '┸': { [Style.NORMAL]: Shapes.LEFT_TO_RIGHT,                                 [Style.BOLD]: Shapes.MIDDLE_TO_TOP },\n  '┹': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT,                               [Style.BOLD]: Shapes.TOP_TO_LEFT },\n  '┺': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT,                                [Style.BOLD]: Shapes.TOP_TO_RIGHT },\n  '┽': { [Style.NORMAL]: `${Shapes.TOP_TO_BOTTOM} ${Shapes.MIDDLE_TO_RIGHT}`,  [Style.BOLD]: Shapes.MIDDLE_TO_LEFT },\n  '┾': { [Style.NORMAL]: `${Shapes.TOP_TO_BOTTOM} ${Shapes.MIDDLE_TO_LEFT}`,   [Style.BOLD]: Shapes.MIDDLE_TO_RIGHT },\n  '┿': { [Style.NORMAL]: Shapes.TOP_TO_BOTTOM,                                 [Style.BOLD]: Shapes.LEFT_TO_RIGHT },\n  '╀': { [Style.NORMAL]: `${Shapes.LEFT_TO_RIGHT} ${Shapes.MIDDLE_TO_BOTTOM}`, [Style.BOLD]: Shapes.MIDDLE_TO_TOP },\n  '╁': { [Style.NORMAL]: `${Shapes.MIDDLE_TO_TOP} ${Shapes.LEFT_TO_RIGHT}`,    [Style.BOLD]: Shapes.MIDDLE_TO_BOTTOM },\n  '╂': { [Style.NORMAL]: Shapes.LEFT_TO_RIGHT,                                 [Style.BOLD]: Shapes.TOP_TO_BOTTOM },\n  '╃': { [Style.NORMAL]: Shapes.RIGHT_TO_BOTTOM,                               [Style.BOLD]: Shapes.TOP_TO_LEFT },\n  '╄': { [Style.NORMAL]: Shapes.LEFT_TO_BOTTOM,                                [Style.BOLD]: Shapes.TOP_TO_RIGHT },\n  '╅': { [Style.NORMAL]: Shapes.TOP_TO_RIGHT,                                  [Style.BOLD]: Shapes.LEFT_TO_BOTTOM },\n  '╆': { [Style.NORMAL]: Shapes.TOP_TO_LEFT,                                   [Style.BOLD]: Shapes.RIGHT_TO_BOTTOM },\n  '╇': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM,                              [Style.BOLD]: `${Shapes.MIDDLE_TO_TOP} ${Shapes.LEFT_TO_RIGHT}` },\n  '╈': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP,                                 [Style.BOLD]: `${Shapes.LEFT_TO_RIGHT} ${Shapes.MIDDLE_TO_BOTTOM}` },\n  '╉': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT,                               [Style.BOLD]: `${Shapes.TOP_TO_BOTTOM} ${Shapes.MIDDLE_TO_LEFT}` },\n  '╊': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT,                                [Style.BOLD]: `${Shapes.TOP_TO_BOTTOM} ${Shapes.MIDDLE_TO_RIGHT}` },\n\n  // Dashed\n  '╌': { [Style.NORMAL]: Shapes.TWO_DASHES_HORIZONTAL },\n  '╍': { [Style.BOLD]:   Shapes.TWO_DASHES_HORIZONTAL },\n  '┄': { [Style.NORMAL]: Shapes.THREE_DASHES_HORIZONTAL },\n  '┅': { [Style.BOLD]:   Shapes.THREE_DASHES_HORIZONTAL },\n  '┈': { [Style.NORMAL]: Shapes.FOUR_DASHES_HORIZONTAL },\n  '┉': { [Style.BOLD]:   Shapes.FOUR_DASHES_HORIZONTAL },\n  '╎': { [Style.NORMAL]: Shapes.TWO_DASHES_VERTICAL },\n  '╏': { [Style.BOLD]:   Shapes.TWO_DASHES_VERTICAL },\n  '┆': { [Style.NORMAL]: Shapes.THREE_DASHES_VERTICAL  },\n  '┇': { [Style.BOLD]:   Shapes.THREE_DASHES_VERTICAL },\n  '┊': { [Style.NORMAL]: Shapes.FOUR_DASHES_VERTICAL },\n  '┋': { [Style.BOLD]:   Shapes.FOUR_DASHES_VERTICAL },\n\n  // Curved\n  '╭': { [Style.NORMAL]: (xp, yp) => `M.5,1 L.5,${.5 + (yp / .15 * .5)} C.5,${.5 + (yp / .15 * .5)},.5,.5,1,.5` },\n  '╮': { [Style.NORMAL]: (xp, yp) => `M.5,1 L.5,${.5 + (yp / .15 * .5)} C.5,${.5 + (yp / .15 * .5)},.5,.5,0,.5` },\n  '╯': { [Style.NORMAL]: (xp, yp) => `M.5,0 L.5,${.5 - (yp / .15 * .5)} C.5,${.5 - (yp / .15 * .5)},.5,.5,0,.5` },\n  '╰': { [Style.NORMAL]: (xp, yp) => `M.5,0 L.5,${.5 - (yp / .15 * .5)} C.5,${.5 - (yp / .15 * .5)},.5,.5,1,.5` }\n};\n\ninterface IVectorShape {\n  d: string;\n  type: VectorType;\n  leftPadding?: number;\n  rightPadding?: number;\n}\n\nconst enum VectorType {\n  FILL,\n  STROKE\n}\n\n/**\n * This contains the definitions of the primarily used box drawing characters as vector shapes. The\n * reason these characters are defined specially is to avoid common problems if a user's font has\n * not been patched with powerline characters and also to get pixel perfect rendering as rendering\n * issues can occur around AA/SPAA.\n *\n * The line variants draw beyond the cell and get clipped to ensure the end of the line is not visible.\n *\n * Original symbols defined in https://github.com/powerline/fontpatcher\n */\nexport const powerlineDefinitions: { [index: string]: IVectorShape } = {\n  // Right triangle solid\n  '\\u{E0B0}': { d: 'M0,0 L1,.5 L0,1', type: VectorType.FILL, rightPadding: 2 },\n  // Right triangle line\n  '\\u{E0B1}': { d: 'M-1,-.5 L1,.5 L-1,1.5', type: VectorType.STROKE, leftPadding: 1, rightPadding: 1 },\n  // Left triangle solid\n  '\\u{E0B2}': { d: 'M1,0 L0,.5 L1,1', type: VectorType.FILL, leftPadding: 2 },\n  // Left triangle line\n  '\\u{E0B3}': { d: 'M2,-.5 L0,.5 L2,1.5', type: VectorType.STROKE, leftPadding: 1, rightPadding: 1 },\n  // Right semi-circle solid,\n  '\\u{E0B4}': { d: 'M0,0 L0,1 C0.552,1,1,0.776,1,.5 C1,0.224,0.552,0,0,0', type: VectorType.FILL, rightPadding: 1 },\n  // Right semi-circle line,\n  '\\u{E0B5}': { d: 'M0,1 C0.552,1,1,0.776,1,.5 C1,0.224,0.552,0,0,0', type: VectorType.STROKE, rightPadding: 1 },\n  // Left semi-circle solid,\n  '\\u{E0B6}': { d: 'M1,0 L1,1 C0.448,1,0,0.776,0,.5 C0,0.224,0.448,0,1,0', type: VectorType.FILL, leftPadding: 1 },\n  // Left semi-circle line,\n  '\\u{E0B7}': { d: 'M1,1 C0.448,1,0,0.776,0,.5 C0,0.224,0.448,0,1,0', type: VectorType.STROKE, leftPadding: 1 }\n};\n\n/**\n * Try drawing a custom block element or box drawing character, returning whether it was\n * successfully drawn.\n */\nexport function tryDrawCustomChar(\n  ctx: CanvasRenderingContext2D,\n  c: string,\n  xOffset: number,\n  yOffset: number,\n  scaledCellWidth: number,\n  scaledCellHeight: number,\n  fontSize: number\n): boolean {\n  const blockElementDefinition = blockElementDefinitions[c];\n  if (blockElementDefinition) {\n    drawBlockElementChar(ctx, blockElementDefinition, xOffset, yOffset, scaledCellWidth, scaledCellHeight);\n    return true;\n  }\n\n  const patternDefinition = patternCharacterDefinitions[c];\n  if (patternDefinition) {\n    drawPatternChar(ctx, patternDefinition, xOffset, yOffset, scaledCellWidth, scaledCellHeight);\n    return true;\n  }\n\n  const boxDrawingDefinition = boxDrawingDefinitions[c];\n  if (boxDrawingDefinition) {\n    drawBoxDrawingChar(ctx, boxDrawingDefinition, xOffset, yOffset, scaledCellWidth, scaledCellHeight);\n    return true;\n  }\n\n  const powerlineDefinition = powerlineDefinitions[c];\n  if (powerlineDefinition) {\n    drawPowerlineChar(ctx, powerlineDefinition, xOffset, yOffset, scaledCellWidth, scaledCellHeight, fontSize);\n    return true;\n  }\n\n  return false;\n}\n\nfunction drawBlockElementChar(\n  ctx: CanvasRenderingContext2D,\n  charDefinition: IBlockVector[],\n  xOffset: number,\n  yOffset: number,\n  scaledCellWidth: number,\n  scaledCellHeight: number\n): void {\n  for (let i = 0; i < charDefinition.length; i++) {\n    const box = charDefinition[i];\n    const xEighth = scaledCellWidth / 8;\n    const yEighth = scaledCellHeight / 8;\n    ctx.fillRect(\n      xOffset + box.x * xEighth,\n      yOffset + box.y * yEighth,\n      box.w * xEighth,\n      box.h * yEighth\n    );\n  }\n}\n\nconst cachedPatterns: Map<PatternDefinition, Map</* fillStyle */string, CanvasPattern>> = new Map();\n\nfunction drawPatternChar(\n  ctx: CanvasRenderingContext2D,\n  charDefinition: number[][],\n  xOffset: number,\n  yOffset: number,\n  scaledCellWidth: number,\n  scaledCellHeight: number\n): void {\n  let patternSet = cachedPatterns.get(charDefinition);\n  if (!patternSet) {\n    patternSet = new Map();\n    cachedPatterns.set(charDefinition, patternSet);\n  }\n  const fillStyle = ctx.fillStyle;\n  if (typeof fillStyle !== 'string') {\n    throw new Error(`Unexpected fillStyle type \"${fillStyle}\"`);\n  }\n  let pattern = patternSet.get(fillStyle);\n  if (!pattern) {\n    const width = charDefinition[0].length;\n    const height = charDefinition.length;\n    const tmpCanvas = document.createElement('canvas');\n    tmpCanvas.width = width;\n    tmpCanvas.height = height;\n    const tmpCtx = throwIfFalsy(tmpCanvas.getContext('2d'));\n    const imageData = new ImageData(width, height);\n\n    // Extract rgba from fillStyle\n    let r: number;\n    let g: number;\n    let b: number;\n    let a: number;\n    if (fillStyle.startsWith('#')) {\n      r = parseInt(fillStyle.slice(1, 3), 16);\n      g = parseInt(fillStyle.slice(3, 5), 16);\n      b = parseInt(fillStyle.slice(5, 7), 16);\n      a = fillStyle.length > 7 && parseInt(fillStyle.slice(7, 9), 16) || 1;\n    } else if (fillStyle.startsWith('rgba')) {\n      ([r, g, b, a] = fillStyle.substring(5, fillStyle.length - 1).split(',').map(e => parseFloat(e)));\n    } else {\n      throw new Error(`Unexpected fillStyle color format \"${fillStyle}\" when drawing pattern glyph`);\n    }\n\n    for (let y = 0; y < height; y++) {\n      for (let x = 0; x < width; x++) {\n        imageData.data[(y * width + x) * 4    ] = r;\n        imageData.data[(y * width + x) * 4 + 1] = g;\n        imageData.data[(y * width + x) * 4 + 2] = b;\n        imageData.data[(y * width + x) * 4 + 3] = charDefinition[y][x] * (a * 255);\n      }\n    }\n    tmpCtx.putImageData(imageData, 0, 0);\n    pattern = throwIfFalsy(ctx.createPattern(tmpCanvas, null));\n    patternSet.set(fillStyle, pattern);\n  }\n  ctx.fillStyle = pattern;\n  ctx.fillRect(xOffset, yOffset, scaledCellWidth, scaledCellHeight);\n}\n\n/**\n * Draws the following box drawing characters by mapping a subset of SVG d attribute instructions to\n * canvas draw calls.\n *\n * Box styles:       ┎┰┒┍┯┑╓╥╖╒╤╕ ┏┳┓┌┲┓┌┬┐┏┱┐\n * ┌─┬─┐ ┏━┳━┓ ╔═╦═╗ ┠╂┨┝┿┥╟╫╢╞╪╡ ┡╇┩├╊┫┢╈┪┣╉┤\n * │ │ │ ┃ ┃ ┃ ║ ║ ║ ┖┸┚┕┷┙╙╨╜╘╧╛ └┴┘└┺┛┗┻┛┗┹┘\n * ├─┼─┤ ┣━╋━┫ ╠═╬═╣ ┏┱┐┌┲┓┌┬┐┌┬┐ ┏┳┓┌┮┓┌┬┐┏┭┐\n * │ │ │ ┃ ┃ ┃ ║ ║ ║ ┡╃┤├╄┩├╆┪┢╅┤ ┞╀┦├┾┫┟╁┧┣┽┤\n * └─┴─┘ ┗━┻━┛ ╚═╩═╝ └┴┘└┴┘└┺┛┗┹┘ └┴┘└┶┛┗┻┛┗┵┘\n *\n * Other:\n * ╭─╮ ╲ ╱ ╷╻╎╏┆┇┊┋ ╺╾╴ ╌╌╌ ┄┄┄ ┈┈┈\n * │ │  ╳  ╽╿╎╏┆┇┊┋ ╶╼╸ ╍╍╍ ┅┅┅ ┉┉┉\n * ╰─╯ ╱ ╲ ╹╵╎╏┆┇┊┋\n *\n * All box drawing characters:\n * ─ ━ │ ┃ ┄ ┅ ┆ ┇ ┈ ┉ ┊ ┋ ┌ ┍ ┎ ┏\n * ┐ ┑ ┒ ┓ └ ┕ ┖ ┗ ┘ ┙ ┚ ┛ ├ ┝ ┞ ┟\n * ┠ ┡ ┢ ┣ ┤ ┥ ┦ ┧ ┨ ┩ ┪ ┫ ┬ ┭ ┮ ┯\n * ┰ ┱ ┲ ┳ ┴ ┵ ┶ ┷ ┸ ┹ ┺ ┻ ┼ ┽ ┾ ┿\n * ╀ ╁ ╂ ╃ ╄ ╅ ╆ ╇ ╈ ╉ ╊ ╋ ╌ ╍ ╎ ╏\n * ═ ║ ╒ ╓ ╔ ╕ ╖ ╗ ╘ ╙ ╚ ╛ ╜ ╝ ╞ ╟\n * ╠ ╡ ╢ ╣ ╤ ╥ ╦ ╧ ╨ ╩ ╪ ╫ ╬ ╭ ╮ ╯\n * ╰ ╱ ╲ ╳ ╴ ╵ ╶ ╷ ╸ ╹ ╺ ╻ ╼ ╽ ╾ ╿\n *\n * ---\n *\n * Box drawing alignment tests:                                          █\n *                                                                       ▉\n *   ╔══╦══╗  ┌──┬──┐  ╭──┬──╮  ╭──┬──╮  ┏━━┳━━┓  ┎┒┏┑   ╷  ╻ ┏┯┓ ┌┰┐    ▊ ╱╲╱╲╳╳╳\n *   ║┌─╨─┐║  │╔═╧═╗│  │╒═╪═╕│  │╓─╁─╖│  ┃┌─╂─┐┃  ┗╃╄┙  ╶┼╴╺╋╸┠┼┨ ┝╋┥    ▋ ╲╱╲╱╳╳╳\n *   ║│╲ ╱│║  │║   ║│  ││ │ ││  │║ ┃ ║│  ┃│ ╿ │┃  ┍╅╆┓   ╵  ╹ ┗┷┛ └┸┘    ▌ ╱╲╱╲╳╳╳\n *   ╠╡ ╳ ╞╣  ├╢   ╟┤  ├┼─┼─┼┤  ├╫─╂─╫┤  ┣┿╾┼╼┿┫  ┕┛┖┚     ┌┄┄┐ ╎ ┏┅┅┓ ┋ ▍ ╲╱╲╱╳╳╳\n *   ║│╱ ╲│║  │║   ║│  ││ │ ││  │║ ┃ ║│  ┃│ ╽ │┃  ░░▒▒▓▓██ ┊  ┆ ╎ ╏  ┇ ┋ ▎\n *   ║└─╥─┘║  │╚═╤═╝│  │╘═╪═╛│  │╙─╀─╜│  ┃└─╂─┘┃  ░░▒▒▓▓██ ┊  ┆ ╎ ╏  ┇ ┋ ▏\n *   ╚══╩══╝  └──┴──┘  ╰──┴──╯  ╰──┴──╯  ┗━━┻━━┛           └╌╌┘ ╎ ┗╍╍┛ ┋  ▁▂▃▄▅▆▇█\n *\n * Source: https://www.w3.org/2001/06/utf-8-test/UTF-8-demo.html\n */\nfunction drawBoxDrawingChar(\n  ctx: CanvasRenderingContext2D,\n  charDefinition: { [fontWeight: number]: string | ((xp: number, yp: number) => string) },\n  xOffset: number,\n  yOffset: number,\n  scaledCellWidth: number,\n  scaledCellHeight: number\n): void {\n  ctx.strokeStyle = ctx.fillStyle;\n  for (const [fontWeight, instructions] of Object.entries(charDefinition)) {\n    ctx.beginPath();\n    ctx.lineWidth = window.devicePixelRatio * Number.parseInt(fontWeight);\n    let actualInstructions: string;\n    if (typeof instructions === 'function') {\n      const xp = .15;\n      const yp = .15 / scaledCellHeight * scaledCellWidth;\n      actualInstructions = instructions(xp, yp);\n    } else {\n      actualInstructions = instructions;\n    }\n    for (const instruction of actualInstructions.split(' ')) {\n      const type = instruction[0];\n      const f = svgToCanvasInstructionMap[type];\n      if (!f) {\n        console.error(`Could not find drawing instructions for \"${type}\"`);\n        continue;\n      }\n      const args: string[] = instruction.substring(1).split(',');\n      if (!args[0] || !args[1]) {\n        continue;\n      }\n      f(ctx, translateArgs(args, scaledCellWidth, scaledCellHeight, xOffset, yOffset, true));\n    }\n    ctx.stroke();\n    ctx.closePath();\n  }\n}\n\nfunction drawPowerlineChar(\n  ctx: CanvasRenderingContext2D,\n  charDefinition: IVectorShape,\n  xOffset: number,\n  yOffset: number,\n  scaledCellWidth: number,\n  scaledCellHeight: number,\n  fontSize: number\n): void {\n  ctx.beginPath();\n  // Scale the stroke with DPR and font size\n  const cssLineWidth = fontSize / 12;\n  ctx.lineWidth = window.devicePixelRatio * cssLineWidth;\n  for (const instruction of charDefinition.d.split(' ')) {\n    const type = instruction[0];\n    const f = svgToCanvasInstructionMap[type];\n    if (!f) {\n      console.error(`Could not find drawing instructions for \"${type}\"`);\n      continue;\n    }\n    const args: string[] = instruction.substring(1).split(',');\n    if (!args[0] || !args[1]) {\n      continue;\n    }\n    f(ctx, translateArgs(\n      args,\n      scaledCellWidth,\n      scaledCellHeight,\n      xOffset,\n      yOffset,\n      false,\n      (charDefinition.leftPadding ?? 0) * (cssLineWidth / 2),\n      (charDefinition.rightPadding ?? 0) * (cssLineWidth / 2)\n    ));\n  }\n  if (charDefinition.type === VectorType.STROKE) {\n    ctx.strokeStyle = ctx.fillStyle;\n    ctx.stroke();\n  } else {\n    ctx.fill();\n  }\n  ctx.closePath();\n}\n\nfunction clamp(value: number, max: number, min: number = 0): number {\n  return Math.max(Math.min(value, max), min);\n}\n\nconst svgToCanvasInstructionMap: { [index: string]: any } = {\n  'C': (ctx: CanvasRenderingContext2D, args: number[]) => ctx.bezierCurveTo(args[0], args[1], args[2], args[3], args[4], args[5]),\n  'L': (ctx: CanvasRenderingContext2D, args: number[]) => ctx.lineTo(args[0], args[1]),\n  'M': (ctx: CanvasRenderingContext2D, args: number[]) => ctx.moveTo(args[0], args[1])\n};\n\nfunction translateArgs(args: string[], cellWidth: number, cellHeight: number, xOffset: number, yOffset: number, doClamp: boolean, leftPadding: number = 0, rightPadding: number = 0): number[] {\n  const result = args.map(e => parseFloat(e) || parseInt(e));\n\n  if (result.length < 2) {\n    throw new Error('Too few arguments for instruction');\n  }\n\n  for (let x = 0; x < result.length; x += 2) {\n    // Translate from 0-1 to 0-cellWidth\n    result[x] *= cellWidth - (leftPadding * window.devicePixelRatio) - (rightPadding * window.devicePixelRatio);\n    // Ensure coordinate doesn't escape cell bounds and round to the nearest 0.5 to ensure a crisp\n    // line at 100% devicePixelRatio\n    if (doClamp && result[x] !== 0) {\n      result[x] = clamp(Math.round(result[x] + 0.5) - 0.5, cellWidth, 0);\n    }\n    // Apply the cell's offset (ie. x*cellWidth)\n    result[x] += xOffset + (leftPadding * window.devicePixelRatio);\n  }\n\n  for (let y = 1; y < result.length; y += 2) {\n    // Translate from 0-1 to 0-cellHeight\n    result[y] *= cellHeight;\n    // Ensure coordinate doesn't escape cell bounds and round to the nearest 0.5 to ensure a crisp\n    // line at 100% devicePixelRatio\n    if (doClamp && result[y] !== 0) {\n      result[y] = clamp(Math.round(result[y] + 0.5) - 0.5, cellHeight, 0);\n    }\n    // Apply the cell's offset (ie. x*cellHeight)\n    result[y] += yOffset;\n  }\n\n  return result;\n}\n","/**\n * Copyright (c) 2022 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { toDisposable } from 'common/Lifecycle';\nimport { IDisposable } from 'common/Types';\n\nexport function observeDevicePixelDimensions(element: HTMLElement, callback: (deviceWidth: number, deviceHeight: number) => void): IDisposable {\n  // Observe any resizes to the element and extract the actual pixel size of the element if the\n  // devicePixelContentBoxSize API is supported. This allows correcting rounding errors when\n  // converting between CSS pixels and device pixels which causes blurry rendering when device\n  // pixel ratio is not a round number.\n  let observer: ResizeObserver | undefined = new ResizeObserver((entries) => {\n    const entry = entries.find((entry) => entry.target === element);\n    if (!entry) {\n      return;\n    }\n\n    // Disconnect if devicePixelContentBoxSize isn't supported by the browser\n    if (!('devicePixelContentBoxSize' in entry)) {\n      observer?.disconnect();\n      observer = undefined;\n      return;\n    }\n\n    // Fire the callback, ignore events where the dimensions are 0x0 as the canvas is likely hidden\n    const width = entry.devicePixelContentBoxSize[0].inlineSize;\n    const height = entry.devicePixelContentBoxSize[0].blockSize;\n    if (width > 0 && height > 0) {\n      callback(width, height);\n    }\n  });\n  observer.observe(element, { box: ['device-pixel-content-box'] } as any);\n  return toDisposable(() => observer?.disconnect());\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport function throwIfFalsy<T>(value: T | undefined | null): T {\n  if (!value) {\n    throw new Error('value must not be falsy');\n  }\n  return value;\n}\n\nexport function isPowerlineGlyph(codepoint: number): boolean {\n  // Only return true for Powerline symbols which require\n  // different padding and should be excluded from minimum contrast\n  // ratio standards\n  return 0xE0A4 <= codepoint && codepoint <= 0xE0D6;\n}\n\nexport function isRestrictedPowerlineGlyph(codepoint: number): boolean {\n  return 0xE0B0 <= codepoint && codepoint <= 0xE0B7;\n}\n\nfunction isBoxOrBlockGlyph(codepoint: number): boolean {\n  return 0x2500 <= codepoint && codepoint <= 0x259F;\n}\n\nexport function excludeFromContrastRatioDemands(codepoint: number): boolean {\n  return isPowerlineGlyph(codepoint) || isBoxOrBlockGlyph(codepoint);\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IColor, IColorRGB } from 'common/Types';\n\n/**\n * Helper functions where the source type is \"channels\" (individual color channels as numbers).\n */\nexport namespace channels {\n  export function toCss(r: number, g: number, b: number, a?: number): string {\n    if (a !== undefined) {\n      return `#${toPaddedHex(r)}${toPaddedHex(g)}${toPaddedHex(b)}${toPaddedHex(a)}`;\n    }\n    return `#${toPaddedHex(r)}${toPaddedHex(g)}${toPaddedHex(b)}`;\n  }\n\n  export function toRgba(r: number, g: number, b: number, a: number = 0xFF): number {\n    // Note: The aggregated number is RGBA32 (BE), thus needs to be converted to ABGR32\n    // on LE systems, before it can be used for direct 32-bit buffer writes.\n    // >>> 0 forces an unsigned int\n    return (r << 24 | g << 16 | b << 8 | a) >>> 0;\n  }\n}\n\n/**\n * Helper functions where the source type is `IColor`.\n */\nexport namespace color {\n  export function blend(bg: IColor, fg: IColor): IColor {\n    const a = (fg.rgba & 0xFF) / 255;\n    if (a === 1) {\n      return {\n        css: fg.css,\n        rgba: fg.rgba\n      };\n    }\n    const fgR = (fg.rgba >> 24) & 0xFF;\n    const fgG = (fg.rgba >> 16) & 0xFF;\n    const fgB = (fg.rgba >> 8) & 0xFF;\n    const bgR = (bg.rgba >> 24) & 0xFF;\n    const bgG = (bg.rgba >> 16) & 0xFF;\n    const bgB = (bg.rgba >> 8) & 0xFF;\n    const r = bgR + Math.round((fgR - bgR) * a);\n    const g = bgG + Math.round((fgG - bgG) * a);\n    const b = bgB + Math.round((fgB - bgB) * a);\n    const css = channels.toCss(r, g, b);\n    const rgba = channels.toRgba(r, g, b);\n    return { css, rgba };\n  }\n\n  export function isOpaque(color: IColor): boolean {\n    return (color.rgba & 0xFF) === 0xFF;\n  }\n\n  export function ensureContrastRatio(bg: IColor, fg: IColor, ratio: number): IColor | undefined {\n    const result = rgba.ensureContrastRatio(bg.rgba, fg.rgba, ratio);\n    if (!result) {\n      return undefined;\n    }\n    return rgba.toColor(\n      (result >> 24 & 0xFF),\n      (result >> 16 & 0xFF),\n      (result >> 8  & 0xFF)\n    );\n  }\n\n  export function opaque(color: IColor): IColor {\n    const rgbaColor = (color.rgba | 0xFF) >>> 0;\n    const [r, g, b] = rgba.toChannels(rgbaColor);\n    return {\n      css: channels.toCss(r, g, b),\n      rgba: rgbaColor\n    };\n  }\n\n  export function opacity(color: IColor, opacity: number): IColor {\n    const a = Math.round(opacity * 0xFF);\n    const [r, g, b] = rgba.toChannels(color.rgba);\n    return {\n      css: channels.toCss(r, g, b, a),\n      rgba: channels.toRgba(r, g, b, a)\n    };\n  }\n\n  export function multiplyOpacity(color: IColor, factor: number): IColor {\n    const a = color.rgba & 0xFF;\n    return opacity(color, (a * factor) / 0xFF);\n  }\n\n  export function toColorRGB(color: IColor): IColorRGB {\n    return [(color.rgba >> 24) & 0xFF, (color.rgba >> 16) & 0xFF, (color.rgba >> 8) & 0xFF];\n  }\n}\n\n/**\n * Helper functions where the source type is \"css\" (string: '#rgb', '#rgba', '#rrggbb', '#rrggbbaa').\n */\nexport namespace css {\n  export function toColor(css: string): IColor {\n    if (css.match(/#[0-9a-f]{3,8}/i)) {\n      switch (css.length) {\n        case 4: { // #rgb\n          const r = parseInt(css.slice(1, 2).repeat(2), 16);\n          const g = parseInt(css.slice(2, 3).repeat(2), 16);\n          const b = parseInt(css.slice(3, 4).repeat(2), 16);\n          return rgba.toColor(r, g, b);\n        }\n        case 5: { // #rgba\n          const r = parseInt(css.slice(1, 2).repeat(2), 16);\n          const g = parseInt(css.slice(2, 3).repeat(2), 16);\n          const b = parseInt(css.slice(3, 4).repeat(2), 16);\n          const a = parseInt(css.slice(4, 5).repeat(2), 16);\n          return rgba.toColor(r, g, b, a);\n        }\n        case 7: // #rrggbb\n          return {\n            css,\n            rgba: (parseInt(css.slice(1), 16) << 8 | 0xFF) >>> 0\n          };\n        case 9: // #rrggbbaa\n          return {\n            css,\n            rgba: parseInt(css.slice(1), 16) >>> 0\n          };\n      }\n    }\n    const rgbaMatch = css.match(/rgba?\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*(,\\s*(0|1|\\d?\\.(\\d+))\\s*)?\\)/);\n    if (rgbaMatch) { // rgb() or rgba()\n      const r = parseInt(rgbaMatch[1]);\n      const g = parseInt(rgbaMatch[2]);\n      const b = parseInt(rgbaMatch[3]);\n      const a = Math.round((rgbaMatch[5] === undefined ? 1 : parseFloat(rgbaMatch[5])) * 0xFF);\n      return rgba.toColor(r, g, b, a);\n    }\n    throw new Error('css.toColor: Unsupported css format');\n  }\n}\n\n/**\n * Helper functions where the source type is \"rgb\" (number: 0xrrggbb).\n */\nexport namespace rgb {\n  /**\n   * Gets the relative luminance of an RGB color, this is useful in determining the contrast ratio\n   * between two colors.\n   * @param rgb The color to use.\n   * @see https://www.w3.org/TR/WCAG20/#relativeluminancedef\n   */\n  export function relativeLuminance(rgb: number): number {\n    return relativeLuminance2(\n      (rgb >> 16) & 0xFF,\n      (rgb >> 8 ) & 0xFF,\n      (rgb      ) & 0xFF);\n  }\n\n  /**\n   * Gets the relative luminance of an RGB color, this is useful in determining the contrast ratio\n   * between two colors.\n   * @param r The red channel (0x00 to 0xFF).\n   * @param g The green channel (0x00 to 0xFF).\n   * @param b The blue channel (0x00 to 0xFF).\n   * @see https://www.w3.org/TR/WCAG20/#relativeluminancedef\n   */\n  export function relativeLuminance2(r: number, g: number, b: number): number {\n    const rs = r / 255;\n    const gs = g / 255;\n    const bs = b / 255;\n    const rr = rs <= 0.03928 ? rs / 12.92 : Math.pow((rs + 0.055) / 1.055, 2.4);\n    const rg = gs <= 0.03928 ? gs / 12.92 : Math.pow((gs + 0.055) / 1.055, 2.4);\n    const rb = bs <= 0.03928 ? bs / 12.92 : Math.pow((bs + 0.055) / 1.055, 2.4);\n    return rr * 0.2126 + rg * 0.7152 + rb * 0.0722;\n  }\n}\n\n/**\n * Helper functions where the source type is \"rgba\" (number: 0xrrggbbaa).\n */\nexport namespace rgba {\n  /**\n   * Given a foreground color and a background color, either increase or reduce the luminance of the\n   * foreground color until the specified contrast ratio is met. If pure white or black is hit\n   * without the contrast ratio being met, go the other direction using the background color as the\n   * foreground color and take either the first or second result depending on which has the higher\n   * contrast ratio.\n   *\n   * `undefined` will be returned if the contrast ratio is already met.\n   *\n   * @param bgRgba The background color in rgba format.\n   * @param fgRgba The foreground color in rgba format.\n   * @param ratio The contrast ratio to achieve.\n   */\n  export function ensureContrastRatio(bgRgba: number, fgRgba: number, ratio: number): number | undefined {\n    const bgL = rgb.relativeLuminance(bgRgba >> 8);\n    const fgL = rgb.relativeLuminance(fgRgba >> 8);\n    const cr = contrastRatio(bgL, fgL);\n    if (cr < ratio) {\n      if (fgL < bgL) {\n        const resultA = reduceLuminance(bgRgba, fgRgba, ratio);\n        const resultARatio = contrastRatio(bgL, rgb.relativeLuminance(resultA >> 8));\n        if (resultARatio < ratio) {\n          const resultB = increaseLuminance(bgRgba, fgRgba, ratio);\n          const resultBRatio = contrastRatio(bgL, rgb.relativeLuminance(resultB >> 8));\n          return resultARatio > resultBRatio ? resultA : resultB;\n        }\n        return resultA;\n      }\n      const resultA = increaseLuminance(bgRgba, fgRgba, ratio);\n      const resultARatio = contrastRatio(bgL, rgb.relativeLuminance(resultA >> 8));\n      if (resultARatio < ratio) {\n        const resultB = reduceLuminance(bgRgba, fgRgba, ratio);\n        const resultBRatio = contrastRatio(bgL, rgb.relativeLuminance(resultB >> 8));\n        return resultARatio > resultBRatio ? resultA : resultB;\n      }\n      return resultA;\n    }\n    return undefined;\n  }\n\n  export function reduceLuminance(bgRgba: number, fgRgba: number, ratio: number): number {\n    // This is a naive but fast approach to reducing luminance as converting to\n    // HSL and back is expensive\n    const bgR = (bgRgba >> 24) & 0xFF;\n    const bgG = (bgRgba >> 16) & 0xFF;\n    const bgB = (bgRgba >>  8) & 0xFF;\n    let fgR = (fgRgba >> 24) & 0xFF;\n    let fgG = (fgRgba >> 16) & 0xFF;\n    let fgB = (fgRgba >>  8) & 0xFF;\n    let cr = contrastRatio(rgb.relativeLuminance2(fgR, fgG, fgB), rgb.relativeLuminance2(bgR, bgG, bgB));\n    while (cr < ratio && (fgR > 0 || fgG > 0 || fgB > 0)) {\n      // Reduce by 10% until the ratio is hit\n      fgR -= Math.max(0, Math.ceil(fgR * 0.1));\n      fgG -= Math.max(0, Math.ceil(fgG * 0.1));\n      fgB -= Math.max(0, Math.ceil(fgB * 0.1));\n      cr = contrastRatio(rgb.relativeLuminance2(fgR, fgG, fgB), rgb.relativeLuminance2(bgR, bgG, bgB));\n    }\n    return (fgR << 24 | fgG << 16 | fgB << 8 | 0xFF) >>> 0;\n  }\n\n  export function increaseLuminance(bgRgba: number, fgRgba: number, ratio: number): number {\n    // This is a naive but fast approach to increasing luminance as converting to\n    // HSL and back is expensive\n    const bgR = (bgRgba >> 24) & 0xFF;\n    const bgG = (bgRgba >> 16) & 0xFF;\n    const bgB = (bgRgba >>  8) & 0xFF;\n    let fgR = (fgRgba >> 24) & 0xFF;\n    let fgG = (fgRgba >> 16) & 0xFF;\n    let fgB = (fgRgba >>  8) & 0xFF;\n    let cr = contrastRatio(rgb.relativeLuminance2(fgR, fgG, fgB), rgb.relativeLuminance2(bgR, bgG, bgB));\n    while (cr < ratio && (fgR < 0xFF || fgG < 0xFF || fgB < 0xFF)) {\n      // Increase by 10% until the ratio is hit\n      fgR = Math.min(0xFF, fgR + Math.ceil((255 - fgR) * 0.1));\n      fgG = Math.min(0xFF, fgG + Math.ceil((255 - fgG) * 0.1));\n      fgB = Math.min(0xFF, fgB + Math.ceil((255 - fgB) * 0.1));\n      cr = contrastRatio(rgb.relativeLuminance2(fgR, fgG, fgB), rgb.relativeLuminance2(bgR, bgG, bgB));\n    }\n    return (fgR << 24 | fgG << 16 | fgB << 8 | 0xFF) >>> 0;\n  }\n\n  // FIXME: Move this to channels NS?\n  export function toChannels(value: number): [number, number, number, number] {\n    return [(value >> 24) & 0xFF, (value >> 16) & 0xFF, (value >> 8) & 0xFF, value & 0xFF];\n  }\n\n  export function toColor(r: number, g: number, b: number, a?: number): IColor {\n    return {\n      css: channels.toCss(r, g, b, a),\n      rgba: channels.toRgba(r, g, b, a)\n    };\n  }\n}\n\nexport function toPaddedHex(c: number): string {\n  const s = c.toString(16);\n  return s.length < 2 ? '0' + s : s;\n}\n\n/**\n * Gets the contrast ratio between two relative luminance values.\n * @param l1 The first relative luminance.\n * @param l2 The first relative luminance.\n * @see https://www.w3.org/TR/WCAG20/#contrast-ratiodef\n */\nexport function contrastRatio(l1: number, l2: number): number {\n  if (l1 < l2) {\n    return (l2 + 0.05) / (l1 + 0.05);\n  }\n  return (l1 + 0.05) / (l2 + 0.05);\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDisposable } from 'common/Types';\n\ninterface IListener<T, U = void> {\n  (arg1: T, arg2: U): void;\n}\n\nexport interface IEvent<T, U = void> {\n  (listener: (arg1: T, arg2: U) => any): IDisposable;\n}\n\nexport interface IEventEmitter<T, U = void> {\n  event: IEvent<T, U>;\n  fire(arg1: T, arg2: U): void;\n  dispose(): void;\n}\n\nexport class EventEmitter<T, U = void> implements IEventEmitter<T, U> {\n  private _listeners: IListener<T, U>[] = [];\n  private _event?: IEvent<T, U>;\n  private _disposed: boolean = false;\n\n  public get event(): IEvent<T, U> {\n    if (!this._event) {\n      this._event = (listener: (arg1: T, arg2: U) => any) => {\n        this._listeners.push(listener);\n        const disposable = {\n          dispose: () => {\n            if (!this._disposed) {\n              for (let i = 0; i < this._listeners.length; i++) {\n                if (this._listeners[i] === listener) {\n                  this._listeners.splice(i, 1);\n                  return;\n                }\n              }\n            }\n          }\n        };\n        return disposable;\n      };\n    }\n    return this._event;\n  }\n\n  public fire(arg1: T, arg2: U): void {\n    const queue: IListener<T, U>[] = [];\n    for (let i = 0; i < this._listeners.length; i++) {\n      queue.push(this._listeners[i]);\n    }\n    for (let i = 0; i < queue.length; i++) {\n      queue[i].call(undefined, arg1, arg2);\n    }\n  }\n\n  public dispose(): void {\n    if (this._listeners) {\n      this._listeners.length = 0;\n    }\n    this._disposed = true;\n  }\n}\n\nexport function forwardEvent<T>(from: IEvent<T>, to: IEventEmitter<T>): IDisposable {\n  return from(e => to.fire(e));\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDisposable } from 'common/Types';\n\n/**\n * A base class that can be extended to provide convenience methods for managing the lifecycle of an\n * object and its components.\n */\nexport abstract class Disposable implements IDisposable {\n  protected _disposables: IDisposable[] = [];\n  protected _isDisposed: boolean = false;\n\n  constructor() {\n  }\n\n  /**\n   * Disposes the object, triggering the `dispose` method on all registered IDisposables.\n   */\n  public dispose(): void {\n    this._isDisposed = true;\n    for (const d of this._disposables) {\n      d.dispose();\n    }\n    this._disposables.length = 0;\n  }\n\n  /**\n   * Registers a disposable object.\n   * @param d The disposable to register.\n   * @returns The disposable.\n   */\n  public register<T extends IDisposable>(d: T): T {\n    this._disposables.push(d);\n    return d;\n  }\n\n  /**\n   * Unregisters a disposable object if it has been registered, if not do\n   * nothing.\n   * @param d The disposable to unregister.\n   */\n  public unregister<T extends IDisposable>(d: T): void {\n    const index = this._disposables.indexOf(d);\n    if (index !== -1) {\n      this._disposables.splice(index, 1);\n    }\n  }\n}\n\n/**\n * Wrap a function in a disposable.\n */\nexport function toDisposable(f: () => void): IDisposable {\n  return { dispose: f };\n}\n\n/**\n * Dispose of all disposables in an array and set its length to 0.\n */\nexport function disposeArray(disposables: IDisposable[]): void {\n  for (const d of disposables) {\n    d.dispose();\n  }\n  disposables.length = 0;\n}\n\n/**\n * Creates a disposable that will dispose of an array of disposables when disposed.\n */\nexport function getDisposeArrayDisposable(array: IDisposable[]): IDisposable {\n  return { dispose: () => disposeArray(array) };\n}\n","/**\n * Copyright (c) 2022 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport class TwoKeyMap<TFirst extends string | number, TSecond extends string | number, TValue> {\n  private _data: { [bg: string | number]: { [fg: string | number]: TValue | undefined } | undefined } = {};\n\n  public set(first: TFirst, second: TSecond, value: TValue): void {\n    if (!this._data[first]) {\n      this._data[first] = {};\n    }\n    this._data[first as string | number]![second] = value;\n  }\n\n  public get(first: TFirst, second: TSecond): TValue | undefined {\n    return this._data[first as string | number] ? this._data[first as string | number]![second] : undefined;\n  }\n\n  public clear(): void {\n    this._data = {};\n  }\n}\n\nexport class FourKeyMap<TFirst extends string | number, TSecond extends string | number, TThird extends string | number, TFourth extends string | number, TValue> {\n  private _data: TwoKeyMap<TFirst, TSecond, TwoKeyMap<TThird, TFourth, TValue>> = new TwoKeyMap();\n\n  public set(first: TFirst, second: TSecond, third: TThird, fourth: TFourth, value: TValue): void {\n    if (!this._data.get(first, second)) {\n      this._data.set(first, second, new TwoKeyMap());\n    }\n    this._data.get(first, second)!.set(third, fourth, value);\n  }\n\n  public get(first: TFirst, second: TSecond, third: TThird, fourth: TFourth): TValue | undefined {\n    return this._data.get(first, second)?.get(third, fourth);\n  }\n\n  public clear(): void {\n    this._data.clear();\n  }\n}\n","/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\ninterface INavigator {\n  userAgent: string;\n  language: string;\n  platform: string;\n}\n\n// We're declaring a navigator global here as we expect it in all runtimes (node and browser), but\n// we want this module to live in common.\ndeclare const navigator: INavigator;\n\nconst isNode = (typeof navigator === 'undefined') ? true : false;\nconst userAgent = (isNode) ? 'node' : navigator.userAgent;\nconst platform = (isNode) ? 'node' : navigator.platform;\n\nexport const isFirefox = userAgent.includes('Firefox');\nexport const isLegacyEdge = userAgent.includes('Edge');\nexport const isSafari = /^((?!chrome|android).)*safari/i.test(userAgent);\n\n// Find the users platform. We use this to interpret the meta key\n// and ISO third level shifts.\n// http://stackoverflow.com/q/19877924/577598\nexport const isMac = ['Macintosh', 'MacIntel', 'MacPPC', 'Mac68K'].includes(platform);\nexport const isIpad = platform === 'iPad';\nexport const isIphone = platform === 'iPhone';\nexport const isWindows = ['Windows', 'Win16', 'Win32', 'WinCE'].includes(platform);\nexport const isLinux = platform.indexOf('Linux') >= 0;\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport type TypedArray = Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Int8Array | Int16Array | Int32Array | Float32Array | Float64Array;\n\n\n/**\n * polyfill for TypedArray.fill\n * This is needed to support .fill in all safari versions and IE 11.\n */\nexport function fill<T extends TypedArray>(array: T, value: number, start?: number, end?: number): T {\n  // all modern engines that support .fill\n  if (array.fill) {\n    return array.fill(value, start, end) as T;\n  }\n  return fillFallback(array, value, start, end);\n}\n\nexport function fillFallback<T extends TypedArray>(array: T, value: number, start: number = 0, end: number = array.length): T {\n  // safari and IE 11\n  // since IE 11 does not support Array.prototype.fill either\n  // we cannot use the suggested polyfill from MDN\n  // instead we simply fall back to looping\n  if (start >= array.length) {\n    return array;\n  }\n  start = (array.length + start) % array.length;\n  if (end >= array.length) {\n    end = array.length;\n  } else {\n    end = (array.length + end) % array.length;\n  }\n  for (let i = start; i < end; ++i) {\n    array[i] = value;\n  }\n  return array;\n}\n\n/**\n * Concat two typed arrays `a` and `b`.\n * Returns a new typed array.\n */\nexport function concat<T extends TypedArray>(a: T, b: T): T {\n  const result = new (a.constructor as any)(a.length + b.length);\n  result.set(a);\n  result.set(b, a.length);\n  return result;\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IAttributeData, IColorRGB, IExtendedAttrs } from 'common/Types';\nimport { Attributes, FgFlags, BgFlags, UnderlineStyle, ExtFlags } from 'common/buffer/Constants';\n\nexport class AttributeData implements IAttributeData {\n  public static toColorRGB(value: number): IColorRGB {\n    return [\n      value >>> Attributes.RED_SHIFT & 255,\n      value >>> Attributes.GREEN_SHIFT & 255,\n      value & 255\n    ];\n  }\n\n  public static fromColorRGB(value: IColorRGB): number {\n    return (value[0] & 255) << Attributes.RED_SHIFT | (value[1] & 255) << Attributes.GREEN_SHIFT | value[2] & 255;\n  }\n\n  public clone(): IAttributeData {\n    const newObj = new AttributeData();\n    newObj.fg = this.fg;\n    newObj.bg = this.bg;\n    newObj.extended = this.extended.clone();\n    return newObj;\n  }\n\n  // data\n  public fg = 0;\n  public bg = 0;\n  public extended: IExtendedAttrs = new ExtendedAttrs();\n\n  // flags\n  public isInverse(): number       { return this.fg & FgFlags.INVERSE; }\n  public isBold(): number          { return this.fg & FgFlags.BOLD; }\n  public isUnderline(): number     {\n    if (this.hasExtendedAttrs() && this.extended.underlineStyle !== UnderlineStyle.NONE) {\n      return 1;\n    }\n    return this.fg & FgFlags.UNDERLINE;\n  }\n  public isBlink(): number         { return this.fg & FgFlags.BLINK; }\n  public isInvisible(): number     { return this.fg & FgFlags.INVISIBLE; }\n  public isItalic(): number        { return this.bg & BgFlags.ITALIC; }\n  public isDim(): number           { return this.bg & BgFlags.DIM; }\n  public isStrikethrough(): number { return this.fg & FgFlags.STRIKETHROUGH; }\n\n  // color modes\n  public getFgColorMode(): number { return this.fg & Attributes.CM_MASK; }\n  public getBgColorMode(): number { return this.bg & Attributes.CM_MASK; }\n  public isFgRGB(): boolean       { return (this.fg & Attributes.CM_MASK) === Attributes.CM_RGB; }\n  public isBgRGB(): boolean       { return (this.bg & Attributes.CM_MASK) === Attributes.CM_RGB; }\n  public isFgPalette(): boolean   { return (this.fg & Attributes.CM_MASK) === Attributes.CM_P16 || (this.fg & Attributes.CM_MASK) === Attributes.CM_P256; }\n  public isBgPalette(): boolean   { return (this.bg & Attributes.CM_MASK) === Attributes.CM_P16 || (this.bg & Attributes.CM_MASK) === Attributes.CM_P256; }\n  public isFgDefault(): boolean   { return (this.fg & Attributes.CM_MASK) === 0; }\n  public isBgDefault(): boolean   { return (this.bg & Attributes.CM_MASK) === 0; }\n  public isAttributeDefault(): boolean { return this.fg === 0 && this.bg === 0; }\n\n  // colors\n  public getFgColor(): number {\n    switch (this.fg & Attributes.CM_MASK) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:  return this.fg & Attributes.PCOLOR_MASK;\n      case Attributes.CM_RGB:   return this.fg & Attributes.RGB_MASK;\n      default:                  return -1;  // CM_DEFAULT defaults to -1\n    }\n  }\n  public getBgColor(): number {\n    switch (this.bg & Attributes.CM_MASK) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:  return this.bg & Attributes.PCOLOR_MASK;\n      case Attributes.CM_RGB:   return this.bg & Attributes.RGB_MASK;\n      default:                  return -1;  // CM_DEFAULT defaults to -1\n    }\n  }\n\n  // extended attrs\n  public hasExtendedAttrs(): number {\n    return this.bg & BgFlags.HAS_EXTENDED;\n  }\n  public updateExtended(): void {\n    if (this.extended.isEmpty()) {\n      this.bg &= ~BgFlags.HAS_EXTENDED;\n    } else {\n      this.bg |= BgFlags.HAS_EXTENDED;\n    }\n  }\n  public getUnderlineColor(): number {\n    if ((this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor) {\n      switch (this.extended.underlineColor & Attributes.CM_MASK) {\n        case Attributes.CM_P16:\n        case Attributes.CM_P256:  return this.extended.underlineColor & Attributes.PCOLOR_MASK;\n        case Attributes.CM_RGB:   return this.extended.underlineColor & Attributes.RGB_MASK;\n        default:                  return this.getFgColor();\n      }\n    }\n    return this.getFgColor();\n  }\n  public getUnderlineColorMode(): number {\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\n      ? this.extended.underlineColor & Attributes.CM_MASK\n      : this.getFgColorMode();\n  }\n  public isUnderlineColorRGB(): boolean {\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\n      ? (this.extended.underlineColor & Attributes.CM_MASK) === Attributes.CM_RGB\n      : this.isFgRGB();\n  }\n  public isUnderlineColorPalette(): boolean {\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\n      ? (this.extended.underlineColor & Attributes.CM_MASK) === Attributes.CM_P16\n          || (this.extended.underlineColor & Attributes.CM_MASK) === Attributes.CM_P256\n      : this.isFgPalette();\n  }\n  public isUnderlineColorDefault(): boolean {\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\n      ? (this.extended.underlineColor & Attributes.CM_MASK) === 0\n      : this.isFgDefault();\n  }\n  public getUnderlineStyle(): UnderlineStyle {\n    return this.fg & FgFlags.UNDERLINE\n      ? (this.bg & BgFlags.HAS_EXTENDED ? this.extended.underlineStyle : UnderlineStyle.SINGLE)\n      : UnderlineStyle.NONE;\n  }\n}\n\n\n/**\n * Extended attributes for a cell.\n * Holds information about different underline styles and color.\n */\nexport class ExtendedAttrs implements IExtendedAttrs {\n  private _ext: number = 0;\n  public get ext(): number {\n    if (this._urlId) {\n      return (\n        (this._ext & ~ExtFlags.UNDERLINE_STYLE) |\n        (this.underlineStyle << 26)\n      );\n    }\n    return this._ext;\n  }\n  public set ext(value: number) { this._ext = value; }\n\n  public get underlineStyle(): UnderlineStyle {\n    // Always return the URL style if it has one\n    if (this._urlId) {\n      return UnderlineStyle.DASHED;\n    }\n    return (this._ext & ExtFlags.UNDERLINE_STYLE) >> 26;\n  }\n  public set underlineStyle(value: UnderlineStyle) {\n    this._ext &= ~ExtFlags.UNDERLINE_STYLE;\n    this._ext |= (value << 26) & ExtFlags.UNDERLINE_STYLE;\n  }\n\n  public get underlineColor(): number {\n    return this._ext & (Attributes.CM_MASK | Attributes.RGB_MASK);\n  }\n  public set underlineColor(value: number) {\n    this._ext &= ~(Attributes.CM_MASK | Attributes.RGB_MASK);\n    this._ext |= value & (Attributes.CM_MASK | Attributes.RGB_MASK);\n  }\n\n  private _urlId: number = 0;\n  public get urlId(): number {\n    return this._urlId;\n  }\n  public set urlId(value: number) {\n    this._urlId = value;\n  }\n\n  constructor(\n    ext: number = 0,\n    urlId: number = 0\n  ) {\n    this._ext = ext;\n    this._urlId = urlId;\n  }\n\n  public clone(): IExtendedAttrs {\n    return new ExtendedAttrs(this._ext, this._urlId);\n  }\n\n  /**\n   * Convenient method to indicate whether the object holds no additional information,\n   * that needs to be persistant in the buffer.\n   */\n  public isEmpty(): boolean {\n    return this.underlineStyle === UnderlineStyle.NONE && this._urlId === 0;\n  }\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { CharData, ICellData, IExtendedAttrs } from 'common/Types';\nimport { stringFromCodePoint } from 'common/input/TextDecoder';\nimport { CHAR_DATA_CHAR_INDEX, CHAR_DATA_WIDTH_INDEX, CHAR_DATA_ATTR_INDEX, Content } from 'common/buffer/Constants';\nimport { AttributeData, ExtendedAttrs } from 'common/buffer/AttributeData';\n\n/**\n * CellData - represents a single Cell in the terminal buffer.\n */\nexport class CellData extends AttributeData implements ICellData {\n  /** Helper to create CellData from CharData. */\n  public static fromCharData(value: CharData): CellData {\n    const obj = new CellData();\n    obj.setFromCharData(value);\n    return obj;\n  }\n  /** Primitives from terminal buffer. */\n  public content = 0;\n  public fg = 0;\n  public bg = 0;\n  public extended: IExtendedAttrs = new ExtendedAttrs();\n  public combinedData = '';\n  /** Whether cell contains a combined string. */\n  public isCombined(): number {\n    return this.content & Content.IS_COMBINED_MASK;\n  }\n  /** Width of the cell. */\n  public getWidth(): number {\n    return this.content >> Content.WIDTH_SHIFT;\n  }\n  /** JS string of the content. */\n  public getChars(): string {\n    if (this.content & Content.IS_COMBINED_MASK) {\n      return this.combinedData;\n    }\n    if (this.content & Content.CODEPOINT_MASK) {\n      return stringFromCodePoint(this.content & Content.CODEPOINT_MASK);\n    }\n    return '';\n  }\n  /**\n   * Codepoint of cell\n   * Note this returns the UTF32 codepoint of single chars,\n   * if content is a combined string it returns the codepoint\n   * of the last char in string to be in line with code in CharData.\n   * */\n  public getCode(): number {\n    return (this.isCombined())\n      ? this.combinedData.charCodeAt(this.combinedData.length - 1)\n      : this.content & Content.CODEPOINT_MASK;\n  }\n  /** Set data from CharData */\n  public setFromCharData(value: CharData): void {\n    this.fg = value[CHAR_DATA_ATTR_INDEX];\n    this.bg = 0;\n    let combined = false;\n    // surrogates and combined strings need special treatment\n    if (value[CHAR_DATA_CHAR_INDEX].length > 2) {\n      combined = true;\n    }\n    else if (value[CHAR_DATA_CHAR_INDEX].length === 2) {\n      const code = value[CHAR_DATA_CHAR_INDEX].charCodeAt(0);\n      // if the 2-char string is a surrogate create single codepoint\n      // everything else is combined\n      if (0xD800 <= code && code <= 0xDBFF) {\n        const second = value[CHAR_DATA_CHAR_INDEX].charCodeAt(1);\n        if (0xDC00 <= second && second <= 0xDFFF) {\n          this.content = ((code - 0xD800) * 0x400 + second - 0xDC00 + 0x10000) | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n        }\n        else {\n          combined = true;\n        }\n      }\n      else {\n        combined = true;\n      }\n    }\n    else {\n      this.content = value[CHAR_DATA_CHAR_INDEX].charCodeAt(0) | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n    }\n    if (combined) {\n      this.combinedData = value[CHAR_DATA_CHAR_INDEX];\n      this.content = Content.IS_COMBINED_MASK | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n    }\n  }\n  /** Get data as CharData. */\n  public getAsCharData(): CharData {\n    return [this.fg, this.getChars(), this.getWidth(), this.getCode()];\n  }\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport const DEFAULT_COLOR = 256;\nexport const DEFAULT_ATTR = (0 << 18) | (DEFAULT_COLOR << 9) | (256 << 0);\nexport const DEFAULT_EXT = 0;\n\nexport const CHAR_DATA_ATTR_INDEX = 0;\nexport const CHAR_DATA_CHAR_INDEX = 1;\nexport const CHAR_DATA_WIDTH_INDEX = 2;\nexport const CHAR_DATA_CODE_INDEX = 3;\n\n/**\n * Null cell - a real empty cell (containing nothing).\n * Note that code should always be 0 for a null cell as\n * several test condition of the buffer line rely on this.\n */\nexport const NULL_CELL_CHAR = '';\nexport const NULL_CELL_WIDTH = 1;\nexport const NULL_CELL_CODE = 0;\n\n/**\n * Whitespace cell.\n * This is meant as a replacement for empty cells when needed\n * during rendering lines to preserve correct aligment.\n */\nexport const WHITESPACE_CELL_CHAR = ' ';\nexport const WHITESPACE_CELL_WIDTH = 1;\nexport const WHITESPACE_CELL_CODE = 32;\n\n/**\n * Bitmasks for accessing data in `content`.\n */\nexport const enum Content {\n  /**\n   * bit 1..21    codepoint, max allowed in UTF32 is 0x10FFFF (21 bits taken)\n   *              read:   `codepoint = content & Content.codepointMask;`\n   *              write:  `content |= codepoint & Content.codepointMask;`\n   *                      shortcut if precondition `codepoint <= 0x10FFFF` is met:\n   *                      `content |= codepoint;`\n   */\n  CODEPOINT_MASK = 0x1FFFFF,\n\n  /**\n   * bit 22       flag indication whether a cell contains combined content\n   *              read:   `isCombined = content & Content.isCombined;`\n   *              set:    `content |= Content.isCombined;`\n   *              clear:  `content &= ~Content.isCombined;`\n   */\n  IS_COMBINED_MASK = 0x200000,  // 1 << 21\n\n  /**\n   * bit 1..22    mask to check whether a cell contains any string data\n   *              we need to check for codepoint and isCombined bits to see\n   *              whether a cell contains anything\n   *              read:   `isEmpty = !(content & Content.hasContent)`\n   */\n  HAS_CONTENT_MASK = 0x3FFFFF,\n\n  /**\n   * bit 23..24   wcwidth value of cell, takes 2 bits (ranges from 0..2)\n   *              read:   `width = (content & Content.widthMask) >> Content.widthShift;`\n   *                      `hasWidth = content & Content.widthMask;`\n   *                      as long as wcwidth is highest value in `content`:\n   *                      `width = content >> Content.widthShift;`\n   *              write:  `content |= (width << Content.widthShift) & Content.widthMask;`\n   *                      shortcut if precondition `0 <= width <= 3` is met:\n   *                      `content |= width << Content.widthShift;`\n   */\n  WIDTH_MASK = 0xC00000,   // 3 << 22\n  WIDTH_SHIFT = 22\n}\n\nexport const enum Attributes {\n  /**\n   * bit 1..8     blue in RGB, color in P256 and P16\n   */\n  BLUE_MASK = 0xFF,\n  BLUE_SHIFT = 0,\n  PCOLOR_MASK = 0xFF,\n  PCOLOR_SHIFT = 0,\n\n  /**\n   * bit 9..16    green in RGB\n   */\n  GREEN_MASK = 0xFF00,\n  GREEN_SHIFT = 8,\n\n  /**\n   * bit 17..24   red in RGB\n   */\n  RED_MASK = 0xFF0000,\n  RED_SHIFT = 16,\n\n  /**\n   * bit 25..26   color mode: DEFAULT (0) | P16 (1) | P256 (2) | RGB (3)\n   */\n  CM_MASK = 0x3000000,\n  CM_DEFAULT = 0,\n  CM_P16 = 0x1000000,\n  CM_P256 = 0x2000000,\n  CM_RGB = 0x3000000,\n\n  /**\n   * bit 1..24  RGB room\n   */\n  RGB_MASK = 0xFFFFFF\n}\n\nexport const enum FgFlags {\n  /**\n   * bit 27..32\n   */\n  INVERSE = 0x4000000,\n  BOLD = 0x8000000,\n  UNDERLINE = 0x10000000,\n  BLINK = 0x20000000,\n  INVISIBLE = 0x40000000,\n  STRIKETHROUGH = 0x80000000,\n}\n\nexport const enum BgFlags {\n  /**\n   * bit 27..32 (upper 3 unused)\n   */\n  ITALIC = 0x4000000,\n  DIM = 0x8000000,\n  HAS_EXTENDED = 0x10000000\n}\n\nexport const enum ExtFlags {\n  /**\n   * bit 27..32 (upper 3 unused)\n   */\n  UNDERLINE_STYLE = 0x1C000000\n}\n\nexport const enum UnderlineStyle {\n  NONE = 0,\n  SINGLE = 1,\n  DOUBLE = 2,\n  CURLY = 3,\n  DOTTED = 4,\n  DASHED = 5\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n/**\n * Polyfill - Convert UTF32 codepoint into JS string.\n * Note: The built-in String.fromCodePoint happens to be much slower\n *       due to additional sanity checks. We can avoid them since\n *       we always operate on legal UTF32 (granted by the input decoders)\n *       and use this faster version instead.\n */\nexport function stringFromCodePoint(codePoint: number): string {\n  if (codePoint > 0xFFFF) {\n    codePoint -= 0x10000;\n    return String.fromCharCode((codePoint >> 10) + 0xD800) + String.fromCharCode((codePoint % 0x400) + 0xDC00);\n  }\n  return String.fromCharCode(codePoint);\n}\n\n/**\n * Convert UTF32 char codes into JS string.\n * Basically the same as `stringFromCodePoint` but for multiple codepoints\n * in a loop (which is a lot faster).\n */\nexport function utf32ToString(data: Uint32Array, start: number = 0, end: number = data.length): string {\n  let result = '';\n  for (let i = start; i < end; ++i) {\n    let codepoint = data[i];\n    if (codepoint > 0xFFFF) {\n      // JS strings are encoded as UTF16, thus a non BMP codepoint gets converted into a surrogate pair\n      // conversion rules:\n      //  - subtract 0x10000 from code point, leaving a 20 bit number\n      //  - add high 10 bits to 0xD800  --> first surrogate\n      //  - add low 10 bits to 0xDC00   --> second surrogate\n      codepoint -= 0x10000;\n      result += String.fromCharCode((codepoint >> 10) + 0xD800) + String.fromCharCode((codepoint % 0x400) + 0xDC00);\n    } else {\n      result += String.fromCharCode(codepoint);\n    }\n  }\n  return result;\n}\n\n/**\n * StringToUtf32 - decodes UTF16 sequences into UTF32 codepoints.\n * To keep the decoder in line with JS strings it handles single surrogates as UCS2.\n */\nexport class StringToUtf32 {\n  private _interim: number = 0;\n\n  /**\n   * Clears interim and resets decoder to clean state.\n   */\n  public clear(): void {\n    this._interim = 0;\n  }\n\n  /**\n   * Decode JS string to UTF32 codepoints.\n   * The methods assumes stream input and will store partly transmitted\n   * surrogate pairs and decode them with the next data chunk.\n   * Note: The method does no bound checks for target, therefore make sure\n   * the provided input data does not exceed the size of `target`.\n   * Returns the number of written codepoints in `target`.\n   */\n  public decode(input: string, target: Uint32Array): number {\n    const length = input.length;\n\n    if (!length) {\n      return 0;\n    }\n\n    let size = 0;\n    let startPos = 0;\n\n    // handle leftover surrogate high\n    if (this._interim) {\n      const second = input.charCodeAt(startPos++);\n      if (0xDC00 <= second && second <= 0xDFFF) {\n        target[size++] = (this._interim - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n      } else {\n        // illegal codepoint (USC2 handling)\n        target[size++] = this._interim;\n        target[size++] = second;\n      }\n      this._interim = 0;\n    }\n\n    for (let i = startPos; i < length; ++i) {\n      const code = input.charCodeAt(i);\n      // surrogate pair first\n      if (0xD800 <= code && code <= 0xDBFF) {\n        if (++i >= length) {\n          this._interim = code;\n          return size;\n        }\n        const second = input.charCodeAt(i);\n        if (0xDC00 <= second && second <= 0xDFFF) {\n          target[size++] = (code - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n        } else {\n          // illegal codepoint (USC2 handling)\n          target[size++] = code;\n          target[size++] = second;\n        }\n        continue;\n      }\n      if (code === 0xFEFF) {\n        // BOM\n        continue;\n      }\n      target[size++] = code;\n    }\n    return size;\n  }\n}\n\n/**\n * Utf8Decoder - decodes UTF8 byte sequences into UTF32 codepoints.\n */\nexport class Utf8ToUtf32 {\n  public interim: Uint8Array = new Uint8Array(3);\n\n  /**\n   * Clears interim bytes and resets decoder to clean state.\n   */\n  public clear(): void {\n    this.interim.fill(0);\n  }\n\n  /**\n   * Decodes UTF8 byte sequences in `input` to UTF32 codepoints in `target`.\n   * The methods assumes stream input and will store partly transmitted bytes\n   * and decode them with the next data chunk.\n   * Note: The method does no bound checks for target, therefore make sure\n   * the provided data chunk does not exceed the size of `target`.\n   * Returns the number of written codepoints in `target`.\n   */\n  public decode(input: Uint8Array, target: Uint32Array): number {\n    const length = input.length;\n\n    if (!length) {\n      return 0;\n    }\n\n    let size = 0;\n    let byte1: number;\n    let byte2: number;\n    let byte3: number;\n    let byte4: number;\n    let codepoint = 0;\n    let startPos = 0;\n\n    // handle leftover bytes\n    if (this.interim[0]) {\n      let discardInterim = false;\n      let cp = this.interim[0];\n      cp &= ((((cp & 0xE0) === 0xC0)) ? 0x1F : (((cp & 0xF0) === 0xE0)) ? 0x0F : 0x07);\n      let pos = 0;\n      let tmp: number;\n      while ((tmp = this.interim[++pos] & 0x3F) && pos < 4) {\n        cp <<= 6;\n        cp |= tmp;\n      }\n      // missing bytes - read ahead from input\n      const type = (((this.interim[0] & 0xE0) === 0xC0)) ? 2 : (((this.interim[0] & 0xF0) === 0xE0)) ? 3 : 4;\n      const missing = type - pos;\n      while (startPos < missing) {\n        if (startPos >= length) {\n          return 0;\n        }\n        tmp = input[startPos++];\n        if ((tmp & 0xC0) !== 0x80) {\n          // wrong continuation, discard interim bytes completely\n          startPos--;\n          discardInterim = true;\n          break;\n        } else {\n          // need to save so we can continue short inputs in next call\n          this.interim[pos++] = tmp;\n          cp <<= 6;\n          cp |= tmp & 0x3F;\n        }\n      }\n      if (!discardInterim) {\n        // final test is type dependent\n        if (type === 2) {\n          if (cp < 0x80) {\n            // wrong starter byte\n            startPos--;\n          } else {\n            target[size++] = cp;\n          }\n        } else if (type === 3) {\n          if (cp < 0x0800 || (cp >= 0xD800 && cp <= 0xDFFF) || cp === 0xFEFF) {\n            // illegal codepoint or BOM\n          } else {\n            target[size++] = cp;\n          }\n        } else {\n          if (cp < 0x010000 || cp > 0x10FFFF) {\n            // illegal codepoint\n          } else {\n            target[size++] = cp;\n          }\n        }\n      }\n      this.interim.fill(0);\n    }\n\n    // loop through input\n    const fourStop = length - 4;\n    let i = startPos;\n    while (i < length) {\n      /**\n       * ASCII shortcut with loop unrolled to 4 consecutive ASCII chars.\n       * This is a compromise between speed gain for ASCII\n       * and penalty for non ASCII:\n       * For best ASCII performance the char should be stored directly into target,\n       * but even a single attempt to write to target and compare afterwards\n       * penalizes non ASCII really bad (-50%), thus we load the char into byteX first,\n       * which reduces ASCII performance by ~15%.\n       * This trial for ASCII reduces non ASCII performance by ~10% which seems acceptible\n       * compared to the gains.\n       * Note that this optimization only takes place for 4 consecutive ASCII chars,\n       * for any shorter it bails out. Worst case - all 4 bytes being read but\n       * thrown away due to the last being a non ASCII char (-10% performance).\n       */\n      while (i < fourStop\n        && !((byte1 = input[i]) & 0x80)\n        && !((byte2 = input[i + 1]) & 0x80)\n        && !((byte3 = input[i + 2]) & 0x80)\n        && !((byte4 = input[i + 3]) & 0x80))\n      {\n        target[size++] = byte1;\n        target[size++] = byte2;\n        target[size++] = byte3;\n        target[size++] = byte4;\n        i += 4;\n      }\n\n      // reread byte1\n      byte1 = input[i++];\n\n      // 1 byte\n      if (byte1 < 0x80) {\n        target[size++] = byte1;\n\n        // 2 bytes\n      } else if ((byte1 & 0xE0) === 0xC0) {\n        if (i >= length) {\n          this.interim[0] = byte1;\n          return size;\n        }\n        byte2 = input[i++];\n        if ((byte2 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        codepoint = (byte1 & 0x1F) << 6 | (byte2 & 0x3F);\n        if (codepoint < 0x80) {\n          // wrong starter byte\n          i--;\n          continue;\n        }\n        target[size++] = codepoint;\n\n        // 3 bytes\n      } else if ((byte1 & 0xF0) === 0xE0) {\n        if (i >= length) {\n          this.interim[0] = byte1;\n          return size;\n        }\n        byte2 = input[i++];\n        if ((byte2 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        if (i >= length) {\n          this.interim[0] = byte1;\n          this.interim[1] = byte2;\n          return size;\n        }\n        byte3 = input[i++];\n        if ((byte3 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        codepoint = (byte1 & 0x0F) << 12 | (byte2 & 0x3F) << 6 | (byte3 & 0x3F);\n        if (codepoint < 0x0800 || (codepoint >= 0xD800 && codepoint <= 0xDFFF) || codepoint === 0xFEFF) {\n          // illegal codepoint or BOM, no i-- here\n          continue;\n        }\n        target[size++] = codepoint;\n\n        // 4 bytes\n      } else if ((byte1 & 0xF8) === 0xF0) {\n        if (i >= length) {\n          this.interim[0] = byte1;\n          return size;\n        }\n        byte2 = input[i++];\n        if ((byte2 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        if (i >= length) {\n          this.interim[0] = byte1;\n          this.interim[1] = byte2;\n          return size;\n        }\n        byte3 = input[i++];\n        if ((byte3 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        if (i >= length) {\n          this.interim[0] = byte1;\n          this.interim[1] = byte2;\n          this.interim[2] = byte3;\n          return size;\n        }\n        byte4 = input[i++];\n        if ((byte4 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        codepoint = (byte1 & 0x07) << 18 | (byte2 & 0x3F) << 12 | (byte3 & 0x3F) << 6 | (byte4 & 0x3F);\n        if (codepoint < 0x010000 || codepoint > 0x10FFFF) {\n          // illegal codepoint, no i-- here\n          continue;\n        }\n        target[size++] = codepoint;\n      } else {\n        // illegal byte, just skip\n      }\n    }\n    return size;\n  }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { Terminal, ITerminalAddon, IEvent } from 'xterm';\nimport { WebglRenderer } from './WebglRenderer';\nimport { ICharacterJoinerService, ICoreBrowserService, IRenderService } from 'browser/services/Services';\nimport { IColorSet } from 'browser/Types';\nimport { EventEmitter, forwardEvent } from 'common/EventEmitter';\nimport { isSafari } from 'common/Platform';\nimport { ICoreService, IDecorationService } from 'common/services/Services';\n\nexport class WebglAddon implements ITerminalAddon {\n  private _terminal?: Terminal;\n  private _renderer?: WebglRenderer;\n\n  private _onChangeTextureAtlas = new EventEmitter<HTMLElement>();\n  public get onChangeTextureAtlas(): IEvent<HTMLElement> { return this._onChangeTextureAtlas.event; }\n  private _onContextLoss = new EventEmitter<void>();\n  public get onContextLoss(): IEvent<void> { return this._onContextLoss.event; }\n\n  constructor(\n    private _preserveDrawingBuffer?: boolean\n  ) {}\n\n  public activate(terminal: Terminal): void {\n    if (!terminal.element) {\n      throw new Error('Cannot activate WebglAddon before Terminal.open');\n    }\n    if (isSafari) {\n      throw new Error('Webgl is not currently supported on Safari');\n    }\n    this._terminal = terminal;\n    const renderService: IRenderService = (terminal as any)._core._renderService;\n    const characterJoinerService: ICharacterJoinerService = (terminal as any)._core._characterJoinerService;\n    const coreBrowserService: ICoreBrowserService = (terminal as any)._core._coreBrowserService;\n    const coreService: ICoreService = (terminal as any)._core.coreService;\n    const decorationService: IDecorationService = (terminal as any)._core._decorationService;\n    const colors: IColorSet = (terminal as any)._core._colorManager.colors;\n    this._renderer = new WebglRenderer(terminal, colors, characterJoinerService, coreBrowserService, coreService, decorationService, this._preserveDrawingBuffer);\n    forwardEvent(this._renderer.onContextLoss, this._onContextLoss);\n    forwardEvent(this._renderer.onChangeTextureAtlas, this._onChangeTextureAtlas);\n    renderService.setRenderer(this._renderer);\n  }\n\n  public dispose(): void {\n    if (!this._terminal) {\n      throw new Error('Cannot dispose WebglAddon because it is activated');\n    }\n    const renderService: IRenderService = (this._terminal as any)._core._renderService;\n    renderService.setRenderer((this._terminal as any)._core._createRenderer());\n    renderService.onResize(this._terminal.cols, this._terminal.rows);\n    this._renderer?.dispose();\n    this._renderer = undefined;\n  }\n\n  public get textureAtlas(): HTMLCanvasElement | undefined {\n    return this._renderer?.textureAtlas;\n  }\n\n  public clearTextureAtlas(): void {\n    this._renderer?.clearCharAtlas();\n  }\n}\n"],"names":["root","factory","exports","module","define","amd","self","INDICES_PER_CELL","BYTES_PER_CELL","Float32Array","BYTES_PER_ELEMENT","w","i","glyph","undefined","leftCellPadding","clippedPixels","GlyphRenderer","Disposable","constructor","_terminal","_colors","_gl","_dimensions","super","_activeBuffer","_vertices","count","attributes","attributesBuffers","gl","this","_program","throwIfFalsy","createProgram","register","toDisposable","deleteProgram","_projectionLocation","getUniformLocation","_resolutionLocation","_textureLocation","_vertexArrayObject","createVertexArray","bindVertexArray","unitQuadVertices","unitQuadVerticesBuffer","createBuffer","deleteBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","enableVertexAttribArray","vertexAttribPointer","FLOAT","unitQuadElementIndices","Uint8Array","elementIndicesBuffer","ELEMENT_ARRAY_BUFFER","_attributesBuffer","vertexAttribDivisor","_atlasTexture","createTexture","deleteTexture","bindTexture","TEXTURE_2D","texImage2D","RGBA","UNSIGNED_BYTE","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","enable","BLEND","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","onResize","beginFrame","_atlas","updateCell","x","y","code","bg","fg","ext","chars","lastBg","_updateCell","array","cols","NULL_CELL_CODE","length","getRasterizedGlyphCombinedChar","getRasterizedGlyph","Math","floor","scaledCellWidth","scaledCharWidth","offset","scaledCharLeft","scaledCharTop","size","scaledCanvasWidth","scaledCanvasHeight","texturePositionClipSpace","cacheCanvas","width","sizeClipSpace","fill","clear","force","terminal","newCount","rows","viewport","canvas","height","setColors","render","renderModel","useProgram","activeBuffer","bufferLength","lineLengths","si","sub","subarray","set","STREAM_DRAW","hasCanvasChanged","uniform1i","activeTexture","TEXTURE0","generateMipmap","uniformMatrix4fv","PROJECTION_MATRIX","uniform2f","drawElementsInstanced","TRIANGLES","setAtlas","atlas","setDimensions","dimensions","BYTES_PER_RECTANGLE","rgba","isDefault","x1","y1","r","g","b","a","RectangleRenderer","_updateCachedColors","DYNAMIC_DRAW","_updateViewportRectangle","_bgFloat","_colorToFloat32Array","background","_addRectangleFloat","scaledCellHeight","updateBackgrounds","model","vertices","currentStartX","currentBg","currentFg","currentInverse","modelIndex","inverse","rectangleCount","RENDER_MODEL_INDICIES_PER_CELL","cells","RENDER_MODEL_BG_OFFSET","RENDER_MODEL_FG_OFFSET","_updateRectangle","startX","endX","ansi","foreground","expandFloat32Array","DIM_OPACITY","_addRectangle","color","RENDER_MODEL_EXT_OFFSET","COMBINED_CHAR_BIT_MASK","Uint32Array","selection","hasSelection","columnSelectMode","viewportStartRow","viewportEndRow","viewportCappedStartRow","viewportCappedEndRow","startCol","endCol","resize","indexCount","clearSelection","hasFg","hasBg","isSelected","WebglRenderer","_characterJoinerService","_coreBrowserService","coreService","_decorationService","preserveDrawingBuffer","_model","RenderModel","_workCell","CellData","_workColors","_onChangeTextureAtlas","EventEmitter","_onRequestRedraw","_onContextLoss","_core","_renderLayers","LinkRenderLayer","screenElement","CursorRenderLayer","scaledCharHeight","canvasWidth","canvasHeight","actualCellWidth","actualCellHeight","_devicePixelRatio","window","devicePixelRatio","_updateDimensions","_canvas","document","createElement","contextAttributes","antialias","depth","getContext","Error","addDisposableDomListener","e","console","log","preventDefault","_contextRestorationTimeout","setTimeout","warn","fire","clearTimeout","removeTerminalFromCache","_initializeWebGLState","_requestRedrawViewport","observeDevicePixelDimensions","h","_setCanvasDevicePixelDimensions","appendChild","_isAttached","body","contains","onChangeTextureAtlas","event","onRequestRedraw","onContextLoss","dispose","l","parentElement","removeChild","textureAtlas","_charAtlas","colors","reset","_rectangleRenderer","_glyphRenderer","_refreshCharAtlas","onDevicePixelRatioChange","style","onCharSizeChanged","onBlur","onFocus","onSelectionChanged","start","end","_updateSelectionModel","onCursorMove","onOptionsChanged","acquireCharAtlas","warmUp","clearCharAtlas","clearTexture","_updateModel","registerCharacterJoiner","handler","deregisterCharacterJoiner","joinerId","renderRows","_charSizeService","onGridChanged","row","line","joinedRanges","isJoined","lastCharX","range","j","cell","buffer","ydisp","lines","get","getJoinedCharacters","loadCell","shift","JoinedCellData","translateToString","getChars","getCode","_loadColorsForCell","NULL_CELL_CHAR","extended","forEachDecorationAtCell","d","backgroundColorRGB","foregroundColorRGB","_isCellSelected","isFocused","selectionBackgroundOpaque","selectionInactiveBackgroundOpaque","selectionForeground","active","viewportY","max","min","ceil","options","lineHeight","round","letterSpacing","AttributeData","firstCell","content","combinedData","_width","isCombined","getWidth","setFromCharData","value","getAsCharData","createShader","type","source","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","error","getShaderInfoLog","deleteShader","vertexSource","fragmentSource","program","attachShader","VERTEX_SHADER","FRAGMENT_SHADER","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","newLength","newArray","charAtlasCache","newConfig","generateConfig","entry","ownedByIndex","ownedBy","indexOf","configEquals","config","splice","push","core","newEntry","WebglCharAtlas","unicodeService","index","NULL_COLOR","css","clonedColors","cursor","cursorAccent","selectionBackgroundTransparent","selectionInactiveBackgroundTransparent","slice","contrastCache","customGlyphs","fontFamily","fontSize","fontWeight","fontWeightBold","allowTransparency","drawBoldTextInBrightColors","minimumContrastRatio","colorCode","TEXTURE_WIDTH","TEXTURE_HEIGHT","TEXTURE_CAPACITY","TRANSPARENT_COLOR","NULL_RASTERIZED_GLYPH","texturePosition","clearColor","imageData","enableThresholdCheck","fgR","fgG","fgB","threshold","abs","isEmpty","data","_config","_unicodeService","_didWarmUp","_cacheMap","FourKeyMap","_cacheMapCombined","_currentRow","_fixedRows","_workBoundingBox","top","left","bottom","right","_workAttributeData","_cacheCtx","alpha","_tmpCanvas","TMP_CANVAS_GLYPH_PADDING","_tmpCtx","_doWarmUp","rasterizedGlyph","_drawToCache","DEFAULT_COLOR","DEFAULT_EXT","clearRect","_getFromCacheMap","cacheMap","key","_getColorFromAnsiIndex","idx","_getBackgroundColor","bgColorMode","bgColor","dim","result","arr","toColorRGB","toColor","blend","multiplyOpacity","_getForegroundColor","fgColorMode","fgColor","bold","excludeFromContrastRatioDemands","minimumContrastColor","_getMinimumContrastColor","opaque","_resolveBackgroundRgba","_resolveForegroundRgba","adjustedColor","getColor","bgRgba","fgRgba","ensureContrastRatio","setColor","codeOrChars","String","fromCharCode","allowedWidth","allowedHeight","save","isInvisible","isBold","isInverse","isDim","italic","isItalic","underline","isUnderline","strikethrough","isStrikethrough","getFgColor","getFgColorMode","getBgColor","getBgColorMode","temp","temp2","backgroundColor","globalCompositeOperation","fillStyle","fillRect","fontStyle","font","textBaseline","TEXT_BASELINE","powerlineGlyph","isPowerlineGlyph","charCodeAt","restrictedPowerlineGlyph","isRestrictedPowerlineGlyph","foregroundColor","padding","customGlyph","tryDrawCustomChar","chWidth","enableClearThresholdCheck","wcwidth","getStringCellWidth","lineWidth","yOffset","isUnderlineColorDefault","strokeStyle","isUnderlineColorRGB","getUnderlineColor","join","beginPath","xLeft","yTop","yMid","yBot","xChLeft","xChRight","xChMid","underlineStyle","moveTo","lineTo","yCurlyBot","yCurlyTop","clipRegion","Path2D","rect","clip","bezierCurveTo","setLineDash","stroke","restore","metrics","measureText","actualBoundingBoxDescent","strokeText","fillText","isBeyondCellBounds","getImageData","checkCompletelyTransparent","_findGlyphBoundingBox","clippedImageData","_clipImageData","activeRow","putImageData","boundingBox","restrictedGlyph","found","alphaOffset","clippedData","Uint8ClampedArray","oldOffset","newOffset","ImageData","_container","id","zIndex","_alpha","_scaledCharWidth","_scaledCharHeight","_scaledCellWidth","_scaledCellHeight","_scaledCharLeft","_scaledCharTop","classList","add","toString","_initCanvas","remove","_ctx","_clearAll","startRow","endRow","colorSet","_setTransparency","oldCanvas","cloneNode","replaceChild","_fillCells","_fillBottomLineAtCells","_fillLeftLineAtCell","_strokeRectAtCell","strokeRect","_clearCells","_fillCharTrueColor","_getFont","_clipRow","BaseRenderLayer","container","_onRequestRefreshRowsEvent","_coreService","_cell","_state","_cursorRenderers","_renderBarCursor","bind","_renderBlockCursor","_renderUnderlineCursor","_cursorBlinkStateManager","_clearCursor","restartBlinkAnimation","pause","cursorY","resume","cursorBlink","CursorBlinkStateManager","_render","isPaused","triggeredByAnimationFrame","isCursorInitialized","isCursorHidden","baseY","viewportRelativeCursorY","cursorX","cursorStyle","_renderBlurCursor","isCursorVisible","cursorWidth","_renderCallback","coreBrowserService","_restartInterval","_blinkStartTimeout","_blinkInterval","clearInterval","_animationFrame","cancelAnimationFrame","_animationTimeRestarted","Date","now","requestAnimationFrame","timeToStart","BLINK_INTERVAL","time","setInterval","linkifier2","onShowLinkUnderline","_onShowLinkUnderline","onHideLinkUnderline","_onHideLinkUnderline","_clearCurrentLink","middleRowCount","y2","x2","INVERTED_DEFAULT_COLOR","is256Color","node","addEventListener","disposed","removeEventListener","isFirefox","isLegacyEdge","blockElementDefinitions","patternCharacterDefinitions","boxDrawingDefinitions","xp","yp","powerlineDefinitions","rightPadding","leftPadding","ctx","c","xOffset","blockElementDefinition","charDefinition","box","xEighth","yEighth","drawBlockElementChar","patternDefinition","patternSet","cachedPatterns","Map","pattern","tmpCanvas","tmpCtx","startsWith","parseInt","substring","split","map","parseFloat","createPattern","drawPatternChar","boxDrawingDefinition","instructions","Object","entries","actualInstructions","Number","instruction","f","svgToCanvasInstructionMap","args","translateArgs","closePath","drawBoxDrawingChar","powerlineDefinition","cssLineWidth","drawPowerlineChar","clamp","cellWidth","cellHeight","doClamp","element","callback","observer","ResizeObserver","find","target","disconnect","devicePixelContentBoxSize","inlineSize","blockSize","observe","codepoint","isBoxOrBlockGlyph","channels","rgb","toPaddedHex","s","contrastRatio","l1","l2","toCss","toRgba","opacity","toChannels","bgR","bgG","bgB","isOpaque","ratio","rgbaColor","factor","match","repeat","rgbaMatch","relativeLuminance2","rs","gs","bs","pow","relativeLuminance","reduceLuminance","cr","increaseLuminance","bgL","fgL","resultA","resultARatio","resultB","_listeners","_disposed","_event","listener","arg1","arg2","queue","call","from","to","disposeArray","disposables","_disposables","_isDisposed","unregister","TwoKeyMap","_data","first","second","third","fourth","isNode","navigator","userAgent","platform","includes","isSafari","test","isMac","isIpad","isIphone","isWindows","isLinux","fillFallback","ExtendedAttrs","static","clone","newObj","hasExtendedAttrs","isBlink","isFgRGB","isBgRGB","isFgPalette","isBgPalette","isFgDefault","isBgDefault","isAttributeDefault","updateExtended","underlineColor","getUnderlineColorMode","isUnderlineColorPalette","getUnderlineStyle","urlId","_ext","_urlId","obj","stringFromCodePoint","CHAR_DATA_ATTR_INDEX","combined","CHAR_DATA_CHAR_INDEX","CHAR_DATA_WIDTH_INDEX","DEFAULT_ATTR","CHAR_DATA_CODE_INDEX","NULL_CELL_WIDTH","WHITESPACE_CELL_CHAR","WHITESPACE_CELL_WIDTH","WHITESPACE_CELL_CODE","codePoint","_interim","decode","input","startPos","interim","byte1","byte2","byte3","byte4","discardInterim","cp","tmp","pos","missing","fourStop","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","_preserveDrawingBuffer","activate","renderService","_renderService","characterJoinerService","decorationService","_colorManager","_renderer","forwardEvent","setRenderer","_createRenderer","clearTextureAtlas"],"sourceRoot":""}